///< CMSG_ACCOUNT_SET_CHEATS
struct AccountObjectSetCheats
{
    bool                         AutoBattle;                          ///< Offset 0x0000 Type _MJVTBL_BOOL
    JAM_ACCOUNTOBJECT_SET_CHEATS Type;                                ///< Offset 0x0004 Type _MJVTBL_JAM_ACCOUNTOBJECT_SET_CHEATS
    int8                         SlotLockCheat;                       ///< Offset 0x0008 Type _MJVTBL_INT8
};

///< CMSG_ACCOUNT_GET_PROFILE
struct AccountObjectGetProfile
{
    std::string Filename;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_ACCOUNT_SET_PROFILE
struct AccountObjectSetProfile
{
    uint8 * Profile;        ///< Offset 0x0000 Type _MJVTBL_NOT_IMPLEMENTED
};

///< CMSG_CHARACTER_OBJECT_TEST
struct CliCharacterObjectTest
{
    int32 Ping;         ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_CHAT_JOIN_CHANNEL
struct CliChatJoinChannel
{
    std::string Password;                  ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string ChannelName;               ///< Offset 0x0080 Type _MJVTBL_STRING
    bool        CreateVoiceSession;        ///< Offset 0x0100 Type _MJVTBL_BOOL
    int32       ChatChannelId;             ///< Offset 0x0104 Type _MJVTBL_INT32
    bool        Internal;                  ///< Offset 0x0108 Type _MJVTBL_BOOL
};

///< CMSG_CHAT_LEAVE_CHANNEL
struct CliChatLeaveChannel
{
    int32       ZoneChannelID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string ChannelName;          ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_CHAT_GMCHAT
struct CliChatGMChat
{
    std::string Source;             ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Arguments;          ///< Offset 0x0132 Type _MJVTBL_STRING
    std::string Dest;               ///< Offset 0x0232 Type _MJVTBL_STRING
    uint64      Target;             ///< Offset 0x0368 Type _MJVTBL_UINT64
};

///< CMSG_CHAT_REPORT_IGNORED
struct CliChatReportIgnored
{
    uint64 IgnoredGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  Reason;             ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_CHAT_REPORT_FILTERED
struct CliChatReportFiltered
{
    uint64 FilteredSenderGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_CHAT_REGISTER_ADDON_PREFIXES
struct CliChatRegisterAddonPrefixes
{
    struct JamCliStructAddonPrefix
    {
        std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    std::vector<JamCliStructAddonPrefix> Prefixes;                                    ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliStructAddonPrefix>::MJVTBL
};

///< CMSG_CHAT_UNREGISTER_ALL_ADDON_PREFIXES
struct CliChatUnregisterAllAddonPrefixes
{
};

///< CMSG_CHAT_MESSAGE_CHANNEL
struct CliChatMessageChannel
{
    int32       Language;           ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string Text;               ///< Offset 0x0004 Type _MJVTBL_STRING
    std::string Target;             ///< Offset 0x0104 Type _MJVTBL_STRING
};

///< CMSG_CHAT_ADDON_MESSAGE_CHANNEL
struct CliChatAddonMessageChannel
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Target;             ///< Offset 0x0100 Type _MJVTBL_STRING
    std::string Prefix;             ///< Offset 0x0232 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_WHISPER
struct CliChatMessageWhisper
{
    std::string Target;             ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Text;               ///< Offset 0x0132 Type _MJVTBL_STRING
    int32       Language;           ///< Offset 0x0234 Type _MJVTBL_INT32
};

///< CMSG_CHAT_ADDON_MESSAGE_WHISPER
struct CliChatAddonMessageWhisper
{
    std::string Prefix;             ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Target;             ///< Offset 0x0011 Type _MJVTBL_STRING
    std::string Text;               ///< Offset 0x0143 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_GUILD
struct CliChatMessageGuild
{
    int32       Language;           ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string Text;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_CHAT_ADDON_MESSAGE_GUILD
struct CliChatAddonMessageGuild
{
    std::string Prefix;             ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Text;               ///< Offset 0x0011 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_OFFICER
struct CliChatMessageOfficer
{
    int32       Language;           ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string Text;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_CHAT_ADDON_MESSAGE_OFFICER
struct CliChatAddonMessageOfficer
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Prefix;             ///< Offset 0x0100 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_AFK
struct CliChatMessageAfk
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_DND
struct CliChatMessageDnd
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_LIST
struct CliChatChannelList
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_DISPLAY_LIST
struct CliChatChannelDisplayList
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_PASSWORD
struct CliChatChannelPassword
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string ChannelName;        ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_SET_OWNER
struct CliChatChannelSetOwner
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string ChannelName;        ///< Offset 0x0132 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_OWNER
struct CliChatChannelOwner
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_MODERATE
struct CliChatChannelModerate
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_MODERATOR
struct CliChatChannelModerator
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_UNMODERATOR
struct CliChatChannelUnmoderator
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_MUTE
struct CliChatChannelMute
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_UNMUTE
struct CliChatChannelUnmute
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_INVITE
struct CliChatChannelInvite
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_KICK
struct CliChatChannelKick
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string ChannelName;        ///< Offset 0x0132 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_BAN
struct CliChatChannelBan
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string ChannelName;        ///< Offset 0x0132 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_UNBAN
struct CliChatChannelUnban
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string ChannelName;        ///< Offset 0x0132 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_ANNOUNCEMENTS
struct CliChatChannelAnnouncements
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_SILENCE_VOICE
struct CliChatChannelSilenceVoice
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_UNSILENCE_VOICE
struct CliChatChannelUnsilenceVoice
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_SILENCE_ALL
struct CliChatChannelSilenceAll
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string ChannelName;        ///< Offset 0x0132 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_UNSILENCE_ALL
struct CliChatChannelUnsilenceAll
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_VOICE_ON
struct CliChatChannelVoiceOn
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_VOICE_OFF
struct CliChatChannelVoiceOff
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_CHANNEL_DECLINE_INVITE
struct CliChatChannelDeclineInvite
{
    std::string ChannelName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_SAY
struct CliChatMessageSay
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       Language;           ///< Offset 0x0100 Type _MJVTBL_INT32
};

///< CMSG_CHAT_MESSAGE_EMOTE
struct CliChatMessageEmote
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_YELL
struct CliChatMessageYell
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       Language;           ///< Offset 0x0100 Type _MJVTBL_INT32
};

///< CMSG_CHAT_MESSAGE_PARTY
struct CliChatMessageParty
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       Language;           ///< Offset 0x0100 Type _MJVTBL_INT32
};

///< CMSG_CHAT_ADDON_MESSAGE_PARTY
struct CliChatAddonMessageParty
{
    std::string Prefix;             ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Text;               ///< Offset 0x0011 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_RAID
struct CliChatMessageRaid
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       Language;           ///< Offset 0x0100 Type _MJVTBL_INT32
};

///< CMSG_CHAT_ADDON_MESSAGE_RAID
struct CliChatAddonMessageRaid
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Prefix;             ///< Offset 0x0100 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_INSTANCE_CHAT
struct CliChatMessageInstanceChat
{
    int32       Language;           ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string Text;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_CHAT_ADDON_MESSAGE_INSTANCE_CHAT
struct CliChatAddonMessageInstanceChat
{
    std::string Prefix;             ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Text;               ///< Offset 0x0011 Type _MJVTBL_STRING
};

///< CMSG_CHAT_MESSAGE_RAID_WARNING
struct CliChatMessageRaidWarning
{
    int32       Language;           ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string Text;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< SMSG_SET_VETERAN_TRIAL
struct ClientSetVeteranTrial
{
    bool IsVeteranTrial;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_AUTH_RESPONSE
struct ClientAuthResponse
{
    struct JamAuthWaitInfo
    {
        uint32 WaitCount;        ///< Offset 0x0000 Type _MJVTBL_UINT32
        bool   HasFCM;           ///< Offset 0x0004 Type _MJVTBL_BOOL
    };

    struct JamAuthSuccessInfo
    {
        struct JamVirtualRealmInfo
        {
            struct RealmNameInfo_Struct
            {
                bool        IsLocal;                    ///< Offset 0x0000 Type _MJVTBL_BOOL
                std::string RealmNameActual;            ///< Offset 0x0001 Type _MJVTBL_STRING
                std::string RealmNameNormalized;        ///< Offset 0x0101 Type _MJVTBL_STRING
            };

            uint32               RealmAddress;                ///< Offset 0x0000 Type _MJVTBL_UINT32
            RealmNameInfo_Struct RealmNameInfo;               ///< Offset 0x0004 Type _MJVTBL_STRUCT
        };

        struct JamRaceClassAvailability
        {
            JamRaceClassAvailability(uint8 RoC, uint8 E)
            {
                RaceOrClassID = RoC;
                RequiredExpansion = E;
            }

            uint8 RaceOrClassID;            ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 RequiredExpansion;        ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        struct JamAvailableCharacterTemplateSet
        {
            struct JamAvailableCharacterTemplateClass
            {
                uint8 ClassID;             ///< Offset 0x0000 Type _MJVTBL_UINT8
                uint8 FactionGroup;        ///< Offset 0x0001 Type _MJVTBL_UINT8
            };

            uint32                                          TemplateSetID;                                          ///< Offset 0x0000 Type _MJVTBL_UINT32
            std::string                                     Name;                                                   ///< Offset 0x0004 Type _MJVTBL_STRING
            std::string                                     Description;                                            ///< Offset 0x0045 Type _MJVTBL_STRING
            std::vector<JamAvailableCharacterTemplateClass> Classes;                                                ///< Offset 0x0448 Type MakeMJVTblForArrayOfStruct<JamAvailableCharacterTemplateClass>::MJVTBL
        };

        uint32                                        VirtualRealmAddress;                                  ///< Offset 0x0000 Type _MJVTBL_UINT32
        std::vector<JamVirtualRealmInfo>              VirtualRealms;                                        ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamVirtualRealmInfo>::MJVTBL
        uint32                                        TimeRemain;                                           ///< Offset 0x0020 Type _MJVTBL_UINT32
        uint32                                        TimeOptions;                                          ///< Offset 0x0024 Type _MJVTBL_UINT32
        uint32                                        TimeRested;                                           ///< Offset 0x0028 Type _MJVTBL_UINT32
        uint8                                         ActiveExpansionLevel;                                 ///< Offset 0x002C Type _MJVTBL_UINT8
        uint8                                         AccountExpansionLevel;                                ///< Offset 0x002D Type _MJVTBL_UINT8
        bool                                          IsExpansionTrial;                                     ///< Offset 0x002E Type _MJVTBL_BOOL
        uint32                                        TimeSecondsUntilPCKick;                               ///< Offset 0x0030 Type _MJVTBL_UINT32
        std::vector<JamRaceClassAvailability>         AvailableRaces;                                       ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamRaceClassAvailability>::MJVTBL
        std::vector<JamRaceClassAvailability>         AvailableClasses;                                     ///< Offset 0x0050 Type MakeMJVTblForArrayOfStruct<JamRaceClassAvailability>::MJVTBL
        std::vector<JamAvailableCharacterTemplateSet> Templates;                                            ///< Offset 0x0068 Type MakeMJVTblForArrayOfStruct<JamAvailableCharacterTemplateSet>::MJVTBL
        bool                                          ForceCharacterTemplate;                               ///< Offset 0x0080 Type _MJVTBL_BOOL
        Optional<uint16>                              NumPlayersHorde;                                      ///< Offset 0x0082 Type MakeMJVTblForOptional<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
        Optional<uint16>                              NumPlayersAlliance;                                   ///< Offset 0x0086 Type MakeMJVTblForOptional<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
        bool                                          IsVeteranTrial;                                       ///< Offset 0x008A Type _MJVTBL_BOOL
        uint32                                        CurrencyID;                                           ///< Offset 0x008C Type _MJVTBL_UINT32
    };

    Optional<JamAuthWaitInfo>    WaitInfo;                            ///< Offset 0x0000 Type MakeMJVTblForOptionalStruct<JamAuthWaitInfo>::MJVTBL
    uint8                        Result;                              ///< Offset 0x000C Type _MJVTBL_UINT8
    Optional<JamAuthSuccessInfo> SuccessInfo;                         ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamAuthSuccessInfo>::MJVTBL
};

///< SMSG_WAIT_QUEUE_UPDATE
struct ClientWaitQueueUpdate
{
    struct WaitInfo_Struct
    {
        uint32 WaitCount;        ///< Offset 0x0000 Type _MJVTBL_UINT32
        bool   HasFCM;           ///< Offset 0x0004 Type _MJVTBL_BOOL
    };

    WaitInfo_Struct WaitInfo;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_WAIT_QUEUE_FINISH
struct ClientWaitQueueFinish
{
};

///< SMSG_ALL_ACHIEVEMENT_DATA
struct ClientAllAchievementData
{
    struct Data_Struct
    {
        struct JamEarnedAchievement
        {
            int32   Id;                         ///< Offset 0x0000 Type _MJVTBL_INT32
            uint8 * Date;                       ///< Offset 0x0004 Type _MJVTBL_NOT_IMPLEMENTED
            uint64  Owner;                      ///< Offset 0x0028 Type _MJVTBL_UINT64
            uint32  VirtualRealmAddress;        ///< Offset 0x0030 Type _MJVTBL_UINT32
            uint32  NativeRealmAddress;         ///< Offset 0x0034 Type _MJVTBL_UINT32
        };

        struct JamCriteriaProgress
        {
            int32   Id;                    ///< Offset 0x0000 Type _MJVTBL_INT32
            uint64  Quantity;              ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64  Player;                ///< Offset 0x0010 Type _MJVTBL_UINT64
            int32   Flags;                 ///< Offset 0x0018 Type _MJVTBL_INT32
            uint8 * Date;                  ///< Offset 0x001C Type _MJVTBL_NOT_IMPLEMENTED
            uint32  TimeFromStart;         ///< Offset 0x0040 Type _MJVTBL_TIME_T
            uint32  TimeFromCreate;        ///< Offset 0x0048 Type _MJVTBL_TIME_T
        };

        std::vector<JamEarnedAchievement> Earned;                                   ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamEarnedAchievement>::MJVTBL
        std::vector<JamCriteriaProgress>  Progress;                                 ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamCriteriaProgress>::MJVTBL
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_ALL_ACCOUNT_CRITERIA
struct ClientAllAccountCriteria
{
    struct JamCriteriaProgress
    {
        int32   Id;                    ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64  Quantity;              ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint64  Player;                ///< Offset 0x0010 Type _MJVTBL_UINT64
        int32   Flags;                 ///< Offset 0x0018 Type _MJVTBL_INT32
        uint8 * Date;                  ///< Offset 0x001C Type _MJVTBL_NOT_IMPLEMENTED
        uint32  TimeFromStart;         ///< Offset 0x0040 Type _MJVTBL_TIME_T
        uint32  TimeFromCreate;        ///< Offset 0x0048 Type _MJVTBL_TIME_T
    };

    std::vector<JamCriteriaProgress> Progress;                                ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCriteriaProgress>::MJVTBL
};

///< SMSG_RESPOND_INSPECT_ACHIEVEMENTS
struct ClientRespondInspectAchievements
{
    struct Data_Struct
    {
        struct JamEarnedAchievement
        {
            int32   Id;                         ///< Offset 0x0000 Type _MJVTBL_INT32
            uint8 * Date;                       ///< Offset 0x0004 Type _MJVTBL_NOT_IMPLEMENTED
            uint64  Owner;                      ///< Offset 0x0028 Type _MJVTBL_UINT64
            uint32  VirtualRealmAddress;        ///< Offset 0x0030 Type _MJVTBL_UINT32
            uint32  NativeRealmAddress;         ///< Offset 0x0034 Type _MJVTBL_UINT32
        };

        struct JamCriteriaProgress
        {
            int32   Id;                    ///< Offset 0x0000 Type _MJVTBL_INT32
            uint64  Quantity;              ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64  Player;                ///< Offset 0x0010 Type _MJVTBL_UINT64
            int32   Flags;                 ///< Offset 0x0018 Type _MJVTBL_INT32
            uint8 * Date;                  ///< Offset 0x001C Type _MJVTBL_NOT_IMPLEMENTED
            uint32  TimeFromStart;         ///< Offset 0x0040 Type _MJVTBL_TIME_T
            uint32  TimeFromCreate;        ///< Offset 0x0048 Type _MJVTBL_TIME_T
        };

        std::vector<JamEarnedAchievement> Earned;                                   ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamEarnedAchievement>::MJVTBL
        std::vector<JamCriteriaProgress>  Progress;                                 ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamCriteriaProgress>::MJVTBL
    };

    uint64      Player;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    Data_Struct Data;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_SETUP_CURRENCY
struct ClientSetupCurrency
{
    struct ClientSetupCurrencyRecord
    {
        int32           Type;                     ///< Offset 0x0000 Type _MJVTBL_INT32
        int32           Quantity;                 ///< Offset 0x0004 Type _MJVTBL_INT32
        Optional<int32> WeeklyQuantity;           ///< Offset 0x0008 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        Optional<int32> MaxWeeklyQuantity;        ///< Offset 0x0010 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        Optional<int32> TrackedQuantity;          ///< Offset 0x0018 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        uint8           Flags;                    ///< Offset 0x0020 Type _MJVTBL_UINT8
    };

    std::vector<ClientSetupCurrencyRecord> Data;                                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientSetupCurrencyRecord>::MJVTBL
};

///< SMSG_SET_CURRENCY
struct ClientSetCurrency
{
    bool            SuppressChatLog;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    Optional<int32> TrackedQuantity;        ///< Offset 0x0004 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
    int32           Quantity;               ///< Offset 0x000C Type _MJVTBL_INT32
    uint32          Flags;                  ///< Offset 0x0010 Type _MJVTBL_UINT32
    int32           Type;                   ///< Offset 0x0014 Type _MJVTBL_INT32
    Optional<int32> WeeklyQuantity;         ///< Offset 0x0018 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_RESET_WEEKLY_CURRENCY
struct ClientResetWeeklyCurrency
{
};

///< SMSG_MESSAGE_BOX
struct ClientMessageBox
{
    uint8 * Text;           ///< Offset 0x0000 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_WARDEN_DATA
struct ClientWardenData
{
    uint8 * Packet;         ///< Offset 0x0000 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_PHASE_SHIFT_CHANGE
struct ClientPhaseShiftChange
{
    struct PhaseShift_Struct
    {
        struct PhaseShiftDataPhase
        {
            uint16 PhaseFlags;        ///< Offset 0x0000 Type _MJVTBL_UINT16
            uint16 Id;                ///< Offset 0x0002 Type _MJVTBL_UINT16
        };

        uint32                           PhaseShiftFlags;                         ///< Offset 0x0000 Type _MJVTBL_UINT32
        std::vector<PhaseShiftDataPhase> Phases;                                  ///< Offset 0x0004 Type MakeMJVTblForArrayOfStruct<PhaseShiftDataPhase>::MJVTBL
        uint64                           PersonalGUID;                            ///< Offset 0x0020 Type _MJVTBL_UINT64
    };

    uint64            Client;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8 *           PreloadMapIDs;                ///< Offset 0x0008 Type _MJVTBL_NOT_IMPLEMENTED
    PhaseShift_Struct PhaseShift;                   ///< Offset 0x0038 Type _MJVTBL_STRUCT
    uint8 *           UiWorldMapAreaIDSwaps;        ///< Offset 0x0060 Type _MJVTBL_NOT_IMPLEMENTED
    uint8 *           VisibleMapIDs;                ///< Offset 0x0090 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_MOUNT_RESULT
struct ClientMountResult
{
    uint32 Result;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_DISMOUNT_RESULT
struct ClientDismountResult
{
    uint32 Result;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_BIND_POINT_UPDATE
struct ClientBindPointUpdate
{
    uint32       BindMapID;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    G3D::Vector3 BindPosition;        ///< Offset 0x0004 Type _MJVTBL_V3
    uint32       BindAreaID;          ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< SMSG_PLAYER_BOUND
struct ClientPlayerBound
{
    uint64 BinderID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 AreaID;          ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_RESURRECT_REQUEST
struct ClientResurrectRequest
{
    uint64      ResurrectOffererGUID;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool        Sickness;                                   ///< Offset 0x0008 Type _MJVTBL_BOOL
    uint32      ResurrectOffererVirtualRealmAddress;        ///< Offset 0x000C Type _MJVTBL_UINT32
    std::string Name;                                       ///< Offset 0x0010 Type _MJVTBL_STRING
    uint32      PetNumber;                                  ///< Offset 0x0044 Type _MJVTBL_UINT32
    bool        UseTimer;                                   ///< Offset 0x0048 Type _MJVTBL_BOOL
    int32       SpellID;                                    ///< Offset 0x004C Type _MJVTBL_INT32
};

///< SMSG_INITIAL_SETUP
struct ClientInitialSetup
{
    uint8              ServerExpansionTier;         ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8              ServerExpansionLevel;        ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint32             RaidOrigin;                  ///< Offset 0x0008 Type _MJVTBL_TIME_T
    std::vector<uint8> QuestsCompleted;             ///< Offset 0x0010 Type MakeMJVTblForArrayOf<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
    int32              ServerRegionID;              ///< Offset 0x0028 Type _MJVTBL_INT32
};

///< SMSG_TRADE_UPDATED
struct ClientTradeUpdated
{
    struct JamTradeItem
    {
        struct JamUnwrappedTradeItem
        {
            struct Item_Struct
            {
                struct JamItemBonusInstanceData
                {
                    struct Context_Struct
                    {
                        uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                    };

                    struct Bonuses_Struct
                    {
                        std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                    };

                    Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                    Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
                };

                int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
                int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
                int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
                Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
                Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
            };

            Item_Struct Item;                      ///< Offset 0x0000 Type _MJVTBL_STRUCT
            int32       EnchantID;                 ///< Offset 0x0060 Type _MJVTBL_INT32
            int32       OnUseEnchantmentID;        ///< Offset 0x0064 Type _MJVTBL_INT32
            uint64      Creator;                   ///< Offset 0x0068 Type _MJVTBL_UINT64
            int32       Charges;                   ///< Offset 0x0070 Type _MJVTBL_INT32
            bool        Lock;                      ///< Offset 0x0074 Type _MJVTBL_BOOL
            uint32      MaxDurability;             ///< Offset 0x0078 Type _MJVTBL_UINT32
            uint32      Durability;                ///< Offset 0x007C Type _MJVTBL_UINT32
            int32       SocketEnchant[3];          ///< Offset 0x0080 Type MakeMJVTblForFixedArrayOf<int,3,&(MJVTBL_INT32)>::MJVTBL
        };

        uint8                           Slot;                                   ///< Offset 0x0000 Type _MJVTBL_UINT8
        int32                           EntryID;                                ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                           StackCount;                             ///< Offset 0x0008 Type _MJVTBL_INT32
        uint64                          GiftCreator;                            ///< Offset 0x0010 Type _MJVTBL_UINT64
        Optional<JamUnwrappedTradeItem> Unwrapped;                              ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<JamUnwrappedTradeItem>::MJVTBL
    };

    uint64                    Gold;                             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32                    CurrentStateIndex;                ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8                     WhichPlayer;                      ///< Offset 0x000C Type _MJVTBL_UINT8
    uint32                    ClientStateIndex;                 ///< Offset 0x0010 Type _MJVTBL_UINT32
    std::vector<JamTradeItem> Items;                            ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamTradeItem>::MJVTBL
    int32                     CurrencyType;                     ///< Offset 0x0030 Type _MJVTBL_INT32
    uint32                    ID;                               ///< Offset 0x0034 Type _MJVTBL_UINT32
    int32                     ProposedEnchantment;              ///< Offset 0x0038 Type _MJVTBL_INT32
    int32                     CurrencyQuantity;                 ///< Offset 0x003C Type _MJVTBL_INT32
};

///< SMSG_TRADE_STATUS
struct ClientTradeStatus
{
    TRADE_STATUS Status;                          ///< Offset 0x0000 Type _MJVTBL_TRADE_STATUS
    uint8        TradeSlot;                       ///< Offset 0x0004 Type _MJVTBL_UINT8
    uint64       Partner;                         ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32        CurrencyType;                    ///< Offset 0x0010 Type _MJVTBL_INT32
    int32        CurrencyQuantity;                ///< Offset 0x0014 Type _MJVTBL_INT32
    bool         FailureForYou;                   ///< Offset 0x0018 Type _MJVTBL_BOOL
    int32        BagResult;                       ///< Offset 0x001C Type _MJVTBL_INT32
    int32        ItemID;                          ///< Offset 0x0020 Type _MJVTBL_INT32
    uint32       ID;                              ///< Offset 0x0024 Type _MJVTBL_UINT32
    bool         PartnerIsSameBnetAccount;        ///< Offset 0x0028 Type _MJVTBL_BOOL
};

///< SMSG_ENUM_CHARACTERS_RESULT
struct ClientEnumCharactersResult
{
    struct JamClientCharacterListEntry
    {
        struct JamClientCharacterListItem
        {
            uint32 DisplayID;               ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint32 DisplayEnchantID;        ///< Offset 0x0004 Type _MJVTBL_UINT32
            uint8  InvType;                 ///< Offset 0x0008 Type _MJVTBL_UINT8
        };

        uint64                     Guid;                              ///< Offset 0x0000 Type _MJVTBL_UINT64
        std::string                Name;                              ///< Offset 0x0008 Type _MJVTBL_STRING
        uint8                      ListPosition;                      ///< Offset 0x0039 Type _MJVTBL_UINT8
        uint8                      RaceID;                            ///< Offset 0x003A Type _MJVTBL_UINT8
        uint8                      ClassID;                           ///< Offset 0x003B Type _MJVTBL_UINT8
        uint8                      SexID;                             ///< Offset 0x003C Type _MJVTBL_UINT8
        uint8                      SkinID;                            ///< Offset 0x003D Type _MJVTBL_UINT8
        uint8                      FaceID;                            ///< Offset 0x003E Type _MJVTBL_UINT8
        uint8                      HairStyle;                         ///< Offset 0x003F Type _MJVTBL_UINT8
        uint8                      HairColor;                         ///< Offset 0x0040 Type _MJVTBL_UINT8
        uint8                      FacialHairStyle;                   ///< Offset 0x0041 Type _MJVTBL_UINT8
        uint8                      ExperienceLevel;                   ///< Offset 0x0042 Type _MJVTBL_UINT8
        int32                      ZoneID;                            ///< Offset 0x0044 Type _MJVTBL_INT32
        int32                      MapID;                             ///< Offset 0x0048 Type _MJVTBL_INT32
        G3D::Vector3               PreloadPos;                        ///< Offset 0x004C Type _MJVTBL_V3
        uint64                     GuildGUID;                         ///< Offset 0x0058 Type _MJVTBL_UINT64
        uint32                     Flags;                             ///< Offset 0x0060 Type _MJVTBL_UINT32
        uint32                     Flags2;                            ///< Offset 0x0064 Type _MJVTBL_UINT32
        uint32                     Flags3;                            ///< Offset 0x0068 Type _MJVTBL_UINT32
        bool                       FirstLogin;                        ///< Offset 0x006C Type _MJVTBL_BOOL
        uint32                     PetCreatureDisplayID;              ///< Offset 0x0070 Type _MJVTBL_UINT32
        uint32                     PetExperienceLevel;                ///< Offset 0x0074 Type _MJVTBL_UINT32
        uint32                     PetCreatureFamilyID;               ///< Offset 0x0078 Type _MJVTBL_UINT32
        bool                       BoostInProgress;                   ///< Offset 0x007C Type _MJVTBL_BOOL
        int32                      ProfessionIDs[2];                  ///< Offset 0x0080 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
        JamClientCharacterListItem InventoryItems[23];                ///< Offset 0x0088 Type MakeMJVTblForFixedArrayOfStruct<JamClientCharacterListItem,23>::MJVTBL
    };

    struct JamClientRestrictedFactionChangeRule
    {
        int32 Mask;          ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8 RaceID;        ///< Offset 0x0004 Type _MJVTBL_UINT8
    };

    std::vector<JamClientCharacterListEntry>          Characters;                                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientCharacterListEntry>::MJVTBL
    bool                                              Success;                                                  ///< Offset 0x0018 Type _MJVTBL_BOOL
    std::vector<JamClientRestrictedFactionChangeRule> FactionChangeRestrictions;                                ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<JamClientRestrictedFactionChangeRule>::MJVTBL
    bool                                              IsDeletedCharacters;                                      ///< Offset 0x0038 Type _MJVTBL_BOOL
};

///< SMSG_GENERATE_RANDOM_CHARACTER_NAME_RESULT
struct ClientGenerateRandomCharacterNameResult
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    bool        Success;            ///< Offset 0x0031 Type _MJVTBL_BOOL
};

///< SMSG_SETUP_RESEARCH_HISTORY
struct ClientSetupResearchHistory
{
    struct JamResearchHistory
    {
        int32  ProjectID;              ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32 FirstCompleted;         ///< Offset 0x0008 Type _MJVTBL_TIME_T
        int32  CompletionCount;        ///< Offset 0x0010 Type _MJVTBL_INT32
    };

    std::vector<JamResearchHistory> History;                                ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamResearchHistory>::MJVTBL
};

///< SMSG_RESEARCH_COMPLETE
struct ClientResearchComplete
{
    struct Research_Struct
    {
        int32  ProjectID;              ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32 FirstCompleted;         ///< Offset 0x0008 Type _MJVTBL_TIME_T
        int32  CompletionCount;        ///< Offset 0x0010 Type _MJVTBL_INT32
    };

    Research_Struct Research;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_ARCHAEOLOGY_SURVERY_CAST
struct ClientArchaeologySurveryCast
{
    int32  ResearchBranchID;         ///< Offset 0x0000 Type _MJVTBL_INT32
    bool   SuccessfulFind;           ///< Offset 0x0004 Type _MJVTBL_BOOL
    uint32 NumFindsCompleted;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 TotalFinds;               ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_PET_SLOT_UPDATED
struct ClientPetSlotUpdated
{
    int32 PetSlotA;          ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 PetNumberB;        ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 PetNumberA;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 PetSlotB;          ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_PET_MODE
struct ClientPetMode
{
    uint64 PetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 PetMode;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_DIFFERENT_INSTANCE_FROM_PARTY
struct ClientDifferentInstanceFromParty
{
};

///< SMSG_UPDATE_SERVER_PLAYER_POSITION
struct ClientUpdateServerPlayerPosition
{
    G3D::Vector3 Position;            ///< Offset 0x0000 Type _MJVTBL_V3
};

///< SMSG_ROLE_CHANGED_INFORM
struct ClientRoleChangedInform
{
    uint64 ChangedUnit;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 From;               ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 NewRole;            ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint32 OldRole;            ///< Offset 0x0014 Type _MJVTBL_UINT32
    uint8  PartyIndex;         ///< Offset 0x0018 Type _MJVTBL_UINT8
};

///< SMSG_ROLE_POLL_INFORM
struct ClientRolePollInform
{
    uint64 From;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  PartyIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< SMSG_SUMMON_RAID_MEMBER_VALIDATE_FAILED
struct ClientSummonRaidMemberValidateFailed
{
    struct ClientSummonRaidMemberValidateReason
    {
        uint64 Member;            ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  ReasonCode;        ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    std::vector<ClientSummonRaidMemberValidateReason> Members;                                                  ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientSummonRaidMemberValidateReason>::MJVTBL
};

///< SMSG_BATTLEFIELD_STATUS_NEED_CONFIRMATION
struct ClientBattlefieldStatus_NeedConfirmation
{
    struct Hdr_Struct
    {
        struct Ticket_Struct
        {
            uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
        };

        Ticket_Struct Ticket;                 ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint64        QueueID;                ///< Offset 0x0018 Type _MJVTBL_UINT64
        uint8         RangeMin;               ///< Offset 0x0020 Type _MJVTBL_UINT8
        uint8         RangeMax;               ///< Offset 0x0021 Type _MJVTBL_UINT8
        uint8         TeamSize;               ///< Offset 0x0022 Type _MJVTBL_UINT8
        uint32        InstanceID;             ///< Offset 0x0024 Type _MJVTBL_UINT32
        bool          RegisteredMatch;        ///< Offset 0x0028 Type _MJVTBL_BOOL
        bool          TournamentRules;        ///< Offset 0x0029 Type _MJVTBL_BOOL
    };

    uint32     Timeout;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32     Mapid;             ///< Offset 0x0004 Type _MJVTBL_UINT32
    Hdr_Struct Hdr;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint8      Role;              ///< Offset 0x0038 Type _MJVTBL_UINT8
};

///< SMSG_BATTLEFIELD_STATUS_ACTIVE
struct ClientBattlefieldStatus_Active
{
    struct Hdr_Struct
    {
        struct Ticket_Struct
        {
            uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
        };

        Ticket_Struct Ticket;                 ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint64        QueueID;                ///< Offset 0x0018 Type _MJVTBL_UINT64
        uint8         RangeMin;               ///< Offset 0x0020 Type _MJVTBL_UINT8
        uint8         RangeMax;               ///< Offset 0x0021 Type _MJVTBL_UINT8
        uint8         TeamSize;               ///< Offset 0x0022 Type _MJVTBL_UINT8
        uint32        InstanceID;             ///< Offset 0x0024 Type _MJVTBL_UINT32
        bool          RegisteredMatch;        ///< Offset 0x0028 Type _MJVTBL_BOOL
        bool          TournamentRules;        ///< Offset 0x0029 Type _MJVTBL_BOOL
    };

    Hdr_Struct Hdr;                  ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint32     ShutdownTimer;        ///< Offset 0x0030 Type _MJVTBL_UINT32
    uint8      ArenaFaction;         ///< Offset 0x0034 Type _MJVTBL_UINT8
    bool       LeftEarly;            ///< Offset 0x0035 Type _MJVTBL_BOOL
    uint32     StartTimer;           ///< Offset 0x0038 Type _MJVTBL_UINT32
    uint32     Mapid;                ///< Offset 0x003C Type _MJVTBL_UINT32
};

///< SMSG_BATTLEFIELD_STATUS_QUEUED
struct ClientBattlefieldStatus_Queued
{
    struct Hdr_Struct
    {
        struct Ticket_Struct
        {
            uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
        };

        Ticket_Struct Ticket;                 ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint64        QueueID;                ///< Offset 0x0018 Type _MJVTBL_UINT64
        uint8         RangeMin;               ///< Offset 0x0020 Type _MJVTBL_UINT8
        uint8         RangeMax;               ///< Offset 0x0021 Type _MJVTBL_UINT8
        uint8         TeamSize;               ///< Offset 0x0022 Type _MJVTBL_UINT8
        uint32        InstanceID;             ///< Offset 0x0024 Type _MJVTBL_UINT32
        bool          RegisteredMatch;        ///< Offset 0x0028 Type _MJVTBL_BOOL
        bool          TournamentRules;        ///< Offset 0x0029 Type _MJVTBL_BOOL
    };

    uint32     AverageWaitTime;               ///< Offset 0x0000 Type _MJVTBL_UINT32
    Hdr_Struct Hdr;                           ///< Offset 0x0008 Type _MJVTBL_STRUCT
    bool       AsGroup;                       ///< Offset 0x0038 Type _MJVTBL_BOOL
    bool       SuspendedQueue;                ///< Offset 0x0039 Type _MJVTBL_BOOL
    bool       EligibleForMatchmaking;        ///< Offset 0x003A Type _MJVTBL_BOOL
    uint32     WaitTime;                      ///< Offset 0x003C Type _MJVTBL_UINT32
};

///< SMSG_BATTLEFIELD_STATUS_NONE
struct ClientBattlefieldStatus_None
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    Ticket_Struct Ticket;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_BATTLEFIELD_STATUS_FAILED
struct ClientBattlefieldStatus_Failed
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    uint64        QueueID;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64        ClientID;             ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32         Reason;               ///< Offset 0x0010 Type _MJVTBL_INT32
    Ticket_Struct Ticket;               ///< Offset 0x0018 Type _MJVTBL_STRUCT
};

///< SMSG_BATTLEFIELD_LIST
struct ClientBattlefieldList
{
    uint8              MaxLevel;                  ///< Offset 0x0000 Type _MJVTBL_UINT8
    bool               PvpAnywhere;               ///< Offset 0x0001 Type _MJVTBL_BOOL
    uint64             BattlemasterGuid;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool               IsRandomBG;                ///< Offset 0x0010 Type _MJVTBL_BOOL
    uint8              MinLevel;                  ///< Offset 0x0011 Type _MJVTBL_UINT8
    bool               HasHolidayWinToday;        ///< Offset 0x0012 Type _MJVTBL_BOOL
    int32              BattlemasterListID;        ///< Offset 0x0014 Type _MJVTBL_INT32
    bool               HasRandomWinToday;         ///< Offset 0x0018 Type _MJVTBL_BOOL
    std::vector<int32> Battlefields;              ///< Offset 0x0020 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_BATTLEGROUND_PLAYER_POSITIONS
struct ClientBattlegroundPlayerPositions
{
    struct BattlegroundPlayerPosition
    {
        uint64       Guid;                ///< Offset 0x0000 Type _MJVTBL_UINT64
        G3D::Vector2 Pos;                 ///< Offset 0x0008 Type _MJVTBL_V2
        int8         IconID;              ///< Offset 0x0010 Type _MJVTBL_INT8
        int8         ArenaSlot;           ///< Offset 0x0011 Type _MJVTBL_INT8
    };

    std::vector<BattlegroundPlayerPosition> FlagCarriers;                                   ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<BattlegroundPlayerPosition>::MJVTBL
};

///< SMSG_UPDATE_CAPTURE_POINT
struct ClientUpdateCapturePoint
{
    struct CapturePointInfo_Struct
    {
        uint64       Guid;                        ///< Offset 0x0000 Type _MJVTBL_UINT64
        G3D::Vector2 Pos;                         ///< Offset 0x0008 Type _MJVTBL_V2
        int8         State;                       ///< Offset 0x0010 Type _MJVTBL_INT8
        uint32       CaptureTime;                 ///< Offset 0x0018 Type _MJVTBL_TIME_T
        uint32       CaptureTotalDuration;        ///< Offset 0x0020 Type _MJVTBL_UINT32
    };

    CapturePointInfo_Struct CapturePointInfo;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_CAPTURE_POINT_REMOVED
struct ClientCapturePointRemoved
{
    uint64 CapturePointGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_BATTLEGROUND_PLAYER_JOINED
struct ClientBattlegroundPlayerJoined
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_BATTLEGROUND_PLAYER_LEFT
struct ClientBattlegroundPlayerLeft
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_BATTLEFIELD_PORT_DENIED
struct ClientBattlefieldPortDenied
{
};

///< SMSG_BFMGR_ENTRY_INVITE
struct ClientBFMgrEntryInvite
{
    int32  AreaID;            ///< Offset 0x0000 Type _MJVTBL_INT32
    uint32 ExpireTime;        ///< Offset 0x0008 Type _MJVTBL_TIME_T
    uint64 QueueID;           ///< Offset 0x0010 Type _MJVTBL_UINT64
};

///< SMSG_BFMGR_ENTERING
struct ClientBFMgrEntering
{
    bool   Relocated;         ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool   ClearedAFK;        ///< Offset 0x0001 Type _MJVTBL_BOOL
    bool   OnOffense;         ///< Offset 0x0002 Type _MJVTBL_BOOL
    uint64 QueueID;           ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_BFMGR_QUEUE_REQUEST_RESPONSE
struct ClientBFMgrQueueRequestResponse
{
    int8   Result;                  ///< Offset 0x0000 Type _MJVTBL_INT8
    int8   BattleState;             ///< Offset 0x0001 Type _MJVTBL_INT8
    uint64 FailedPlayerGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 QueueID;                 ///< Offset 0x0010 Type _MJVTBL_UINT64
    bool   LoggingIn;               ///< Offset 0x0018 Type _MJVTBL_BOOL
    int32  AreaID;                  ///< Offset 0x001C Type _MJVTBL_INT32
};

///< SMSG_BFMGR_EJECT_PENDING
struct ClientBFMgrEjectPending
{
    uint64 QueueID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   Remote;         ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< SMSG_BFMGR_EJECTED
struct ClientBFMgrEjected
{
    uint64 QueueID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   Relocated;          ///< Offset 0x0008 Type _MJVTBL_BOOL
    int8   Reason;             ///< Offset 0x0009 Type _MJVTBL_INT8
    int8   BattleState;        ///< Offset 0x000A Type _MJVTBL_INT8
};

///< SMSG_BFMGR_QUEUE_INVITE
struct ClientBFMgrQueueInvite
{
    uint64 QueueID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 InstanceID;         ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 Timeout;            ///< Offset 0x000C Type _MJVTBL_UINT32
    int32  MapID;              ///< Offset 0x0010 Type _MJVTBL_INT32
    int32  MaxLevel;           ///< Offset 0x0014 Type _MJVTBL_INT32
    int32  MinLevel;           ///< Offset 0x0018 Type _MJVTBL_INT32
    int8   BattleState;        ///< Offset 0x001C Type _MJVTBL_INT8
    int8   Index;              ///< Offset 0x001D Type _MJVTBL_INT8
};

///< SMSG_BFMGR_EXIT_REQUEST
struct ClientBFMgrExitRequest
{
};

///< SMSG_BFMGR_STATE_CHANGED
struct ClientBFMgrStateChanged
{
    uint64 QueueID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  State;          ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_BATTLEGROUND_INFO_THROTTLED
struct ClientBattlegroundInfoThrottled
{
};

///< SMSG_GROUP_ACTION_THROTTLED
struct ClientGroupActionThrottled
{
};

///< SMSG_REQUEST_CEMETERY_LIST_RESPONSE
struct ClientRequestCemeteryListResponse
{
    bool                IsGossipTriggered;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<uint32> CemeteryID;                 ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
};

///< SMSG_CHECK_WARGAME_ENTRY
struct ClientCheckWargameEntry
{
    uint64     QueueID;                           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64     OpposingPartyBnetAccountID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    ServerSpec OpposingPartyUserServer;           ///< Offset 0x0010 Type _MJVTBL_JAMSERVERSPEC
    uint64     OpposingPartyMember;               ///< Offset 0x0020 Type _MJVTBL_UINT64
    uint32     TimeoutSeconds;                    ///< Offset 0x0028 Type _MJVTBL_TIME_T
    bool       TournamentRules;                   ///< Offset 0x0030 Type _MJVTBL_BOOL
};

///< SMSG_SHOW_RATINGS
struct ClientShowRatings
{
    int32 PersonalRating[6];        ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
    float GdfRating[6];             ///< Offset 0x0018 Type MakeMJVTblForFixedArrayOf<float,6,&(MJVTBL_FLOAT)>::MJVTBL
    float GdfVariance[6];           ///< Offset 0x0030 Type MakeMJVTblForFixedArrayOf<float,6,&(MJVTBL_FLOAT)>::MJVTBL
};

///< SMSG_DBREPLY
struct ClientDBReply
{
    uint32  TableHash;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32  Timestamp;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    int32   RecordID;         ///< Offset 0x0008 Type _MJVTBL_INT32
    uint8 * Data;             ///< Offset 0x0010 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_HOTFIX_NOTIFY
struct ClientHotfixNotify
{
    uint32 TableHash;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 Timestamp;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    int32  RecordID;         ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_HOTFIX_NOTIFY_BLOB
struct ClientHotfixNotifyBlob
{
    struct HotfixNotify
    {
        uint32 TableHash;        ///< Offset 0x0000 Type _MJVTBL_UINT32
        int32  RecordID;         ///< Offset 0x0004 Type _MJVTBL_INT32
        uint32 Timestamp;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    };

    std::vector<HotfixNotify> Hotfixes;                         ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<HotfixNotify>::MJVTBL
};

///< SMSG_BATTLEFIELD_STATUS_WAIT_FOR_GROUPS
struct ClientBattlefieldStatus_WaitForGroups
{
    struct Hdr_Struct
    {
        struct Ticket_Struct
        {
            uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
        };

        Ticket_Struct Ticket;                 ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint64        QueueID;                ///< Offset 0x0018 Type _MJVTBL_UINT64
        uint8         RangeMin;               ///< Offset 0x0020 Type _MJVTBL_UINT8
        uint8         RangeMax;               ///< Offset 0x0021 Type _MJVTBL_UINT8
        uint8         TeamSize;               ///< Offset 0x0022 Type _MJVTBL_UINT8
        uint32        InstanceID;             ///< Offset 0x0024 Type _MJVTBL_UINT32
        bool          RegisteredMatch;        ///< Offset 0x0028 Type _MJVTBL_BOOL
        bool          TournamentRules;        ///< Offset 0x0029 Type _MJVTBL_BOOL
    };

    uint32     Timeout;                   ///< Offset 0x0000 Type _MJVTBL_UINT32
    Hdr_Struct Hdr;                       ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint32     Mapid;                     ///< Offset 0x0038 Type _MJVTBL_UINT32
    uint8      TotalPlayers[2];           ///< Offset 0x003C Type MakeMJVTblForFixedArrayOf<unsignedchar,2,&(MJVTBL_UINT8)>::MJVTBL
    uint8      AwaitingPlayers[2];        ///< Offset 0x003E Type MakeMJVTblForFixedArrayOf<unsignedchar,2,&(MJVTBL_UINT8)>::MJVTBL
};

///< SMSG_RATED_BATTLEFIELD_INFO
struct ClientRatedBattlefieldInfo
{
    struct ClientBracketInfo
    {
        int32 PersonalRating;          ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 Ranking;                 ///< Offset 0x0004 Type _MJVTBL_INT32
        int32 SeasonPlayed;            ///< Offset 0x0008 Type _MJVTBL_INT32
        int32 SeasonWon;               ///< Offset 0x000C Type _MJVTBL_INT32
        int32 WeeklyPlayed;            ///< Offset 0x0010 Type _MJVTBL_INT32
        int32 WeeklyWon;               ///< Offset 0x0014 Type _MJVTBL_INT32
        int32 BestWeeklyRating;        ///< Offset 0x0018 Type _MJVTBL_INT32
        int32 BestSeasonRating;        ///< Offset 0x001C Type _MJVTBL_INT32
    };

    ClientBracketInfo Bracket[6];               ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOfStruct<ClientBracketInfo,6>::MJVTBL
};

///< SMSG_AVERAGE_ITEM_LEVEL_INFORM
struct ClientAverageItemLevelInform
{
    float AvgItemLevel;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_PET_ADDED
struct ClientPetAdded
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       CreatureID;         ///< Offset 0x0084 Type _MJVTBL_INT32
    int32       Level;              ///< Offset 0x0088 Type _MJVTBL_INT32
    uint32      PetNumber;          ///< Offset 0x008C Type _MJVTBL_UINT32
    int32       DisplayID;          ///< Offset 0x0090 Type _MJVTBL_INT32
    uint8       Flags;              ///< Offset 0x0094 Type _MJVTBL_UINT8
    int32       PetSlot;            ///< Offset 0x0098 Type _MJVTBL_INT32
};

///< SMSG_PET_STABLE_LIST
struct ClientPetStableList
{
    struct ClientPetStableInfo
    {
        uint32      PetSlot;                ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32      PetNumber;              ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint32      CreatureID;             ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32      DisplayID;              ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32      ExperienceLevel;        ///< Offset 0x0010 Type _MJVTBL_UINT32
        std::string PetName;                ///< Offset 0x0014 Type _MJVTBL_STRING
        uint8       PetFlags;               ///< Offset 0x0095 Type _MJVTBL_UINT8
    };

    std::vector<ClientPetStableInfo> Pets;                                    ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientPetStableInfo>::MJVTBL
    uint64                           StableMaster;                            ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< SMSG_PET_STABLE_RESULT
struct ClientPetStableResult
{
    uint8 Result;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_NEW_WORLD
struct ClientNewWorld
{
    int32        MapID;               ///< Offset 0x0000 Type _MJVTBL_INT32
    uint32       Reason;              ///< Offset 0x0004 Type _MJVTBL_UINT32
    float        Facing;              ///< Offset 0x0008 Type _MJVTBL_FLOAT
    G3D::Vector3 Position;            ///< Offset 0x000C Type _MJVTBL_V3
};

///< SMSG_LOGIN_VERIFY_WORLD
struct ClientLoginVerifyWorld
{
    float        Facing;              ///< Offset 0x0000 Type _MJVTBL_FLOAT
    int32        MapID;               ///< Offset 0x0004 Type _MJVTBL_INT32
    uint32       Reason;              ///< Offset 0x0008 Type _MJVTBL_UINT32
    G3D::Vector3 Position;            ///< Offset 0x000C Type _MJVTBL_V3
};

///< SMSG_ABORT_NEW_WORLD
struct ClientAbortNewWorld
{
};

///< SMSG_NOTIFY_MONEY
struct ClientNotifyMoney
{
    uint64 Money;         ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_ITEM_PURCHASE_REFUND_RESULT
struct ClientItemPurchaseRefundResult
{
    struct ClientItemPurchaseContents
    {
        struct ClientItemPurchaseRefundItem
        {
            int32 ItemID;           ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 ItemCount;        ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        struct ClientItemPurchaseRefundCurrency
        {
            int32 CurrencyID;           ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 CurrencyCount;        ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        uint32                           Money;                                   ///< Offset 0x0000 Type _MJVTBL_UINT32
        ClientItemPurchaseRefundItem     Items[5];                                ///< Offset 0x0004 Type MakeMJVTblForFixedArrayOfStruct<ClientItemPurchaseRefundItem,5>::MJVTBL
        ClientItemPurchaseRefundCurrency Currencies[5];                           ///< Offset 0x002C Type MakeMJVTblForFixedArrayOfStruct<ClientItemPurchaseRefundCurrency,5>::MJVTBL
    };

    uint8                                Result;                                      ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint64                               ItemGUID;                                    ///< Offset 0x0008 Type _MJVTBL_UINT64
    Optional<ClientItemPurchaseContents> Contents;                                    ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<ClientItemPurchaseContents>::MJVTBL
};

///< SMSG_SET_ITEM_PURCHASE_DATA
struct ClientSetItemPurchaseData
{
    struct Contents_Struct
    {
        struct ClientItemPurchaseRefundItem
        {
            int32 ItemID;           ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 ItemCount;        ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        struct ClientItemPurchaseRefundCurrency
        {
            int32 CurrencyID;           ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 CurrencyCount;        ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        uint32                           Money;                                   ///< Offset 0x0000 Type _MJVTBL_UINT32
        ClientItemPurchaseRefundItem     Items[5];                                ///< Offset 0x0004 Type MakeMJVTblForFixedArrayOfStruct<ClientItemPurchaseRefundItem,5>::MJVTBL
        ClientItemPurchaseRefundCurrency Currencies[5];                           ///< Offset 0x002C Type MakeMJVTblForFixedArrayOfStruct<ClientItemPurchaseRefundCurrency,5>::MJVTBL
    };

    uint32          PurchaseTime;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32          Flags;                  ///< Offset 0x0004 Type _MJVTBL_UINT32
    Contents_Struct Contents;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint64          ItemGUID;               ///< Offset 0x0060 Type _MJVTBL_UINT64
};

///< SMSG_ITEM_EXPIRE_PURCHASE_REFUND
struct ClientItemExpirePurchaseRefund
{
    uint64 ItemGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_INSPECT_HONOR_STATS
struct ClientInspectHonorStats
{
    uint64 PlayerGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 LifetimeHK;             ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint16 YesterdayHK;            ///< Offset 0x000C Type _MJVTBL_UINT16
    uint16 TodayHK;                ///< Offset 0x000E Type _MJVTBL_UINT16
    uint8  LifetimeMaxRank;        ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< SMSG_PVPLOG_DATA
struct ClientPVPLogData
{
    struct ClientPVPLogData_Player
    {
        struct ClientPVPLogData_Honor
        {
            uint32 HonorKills;                ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint32 Deaths;                    ///< Offset 0x0004 Type _MJVTBL_UINT32
            uint32 ContributionPoints;        ///< Offset 0x0008 Type _MJVTBL_UINT32
        };

        uint64                           PlayerGUID;                              ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                           Kills;                                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8                            Faction;                                 ///< Offset 0x000C Type _MJVTBL_UINT8
        bool                             IsInWorld;                               ///< Offset 0x000D Type _MJVTBL_BOOL
        Optional<ClientPVPLogData_Honor> Honor;                                   ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<ClientPVPLogData_Honor>::MJVTBL
        uint32                           DamageDone;                              ///< Offset 0x0020 Type _MJVTBL_UINT32
        uint32                           HealingDone;                             ///< Offset 0x0024 Type _MJVTBL_UINT32
        Optional<uint32>                 PreMatchRating;                          ///< Offset 0x0028 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        Optional<int32>                  RatingChange;                            ///< Offset 0x0030 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        Optional<uint32>                 PreMatchMMR;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        Optional<int32>                  MmrChange;                               ///< Offset 0x0040 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        std::vector<int32>               Stats;                                   ///< Offset 0x0048 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
        int32                            PrimaryTalentTree;                       ///< Offset 0x0060 Type _MJVTBL_INT32
    };

    struct ClientPVPLogData_RatingData
    {
        int32 Prematch[2];           ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
        int32 Postmatch[2];          ///< Offset 0x0008 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
        int32 PrematchMMR[2];        ///< Offset 0x0010 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
    };

    Optional<uint8>                       Winner;                                       ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
    std::vector<ClientPVPLogData_Player>  Players;                                      ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientPVPLogData_Player>::MJVTBL
    Optional<ClientPVPLogData_RatingData> Ratings;                                      ///< Offset 0x0020 Type MakeMJVTblForOptionalStruct<ClientPVPLogData_RatingData>::MJVTBL
    int8                                  PlayerCount[2];                               ///< Offset 0x003C Type MakeMJVTblForFixedArrayOf<signedchar,2,&(MJVTBL_INT8)>::MJVTBL
};

///< SMSG_WARGAME_REQUEST_SUCCESSFULLY_SENT_TO_OPPONENT
struct ClientWargameRequestSuccessfullySentToOpponent
{
    uint64 Opponent;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_DISPLAY_GAME_ERROR
struct ClientDisplayGameError
{
    Optional<int32> Arg2;                   ///< Offset 0x0000 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
    Optional<int32> Arg;                    ///< Offset 0x0008 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
    uint32          Error;                  ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< SMSG_PVPOPTIONS_ENABLED
struct ClientPVPOptionsEnabled
{
    bool WargameArenas;               ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool RatedArenas;                 ///< Offset 0x0001 Type _MJVTBL_BOOL
    bool WargameBattlegrounds;        ///< Offset 0x0002 Type _MJVTBL_BOOL
    bool ArenaSkirmish;               ///< Offset 0x0003 Type _MJVTBL_BOOL
    bool PugBattlegrounds;            ///< Offset 0x0004 Type _MJVTBL_BOOL
    bool RatedBattlegrounds;          ///< Offset 0x0005 Type _MJVTBL_BOOL
};

///< SMSG_SET_MAX_WEEKLY_QUANTITY
struct ClientSetMaxWeeklyQuantity
{
    int32 MaxWeeklyQuantity;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Type;                     ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_PETITION_ALREADY_SIGNED
struct ClientPetitionAlreadySigned
{
    uint64 SignerGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_RAID_MARKERS_CHANGED
struct ClientRaidMarkersChanged
{
    struct JamCliRaidMarkerData
    {
        uint64       TransportGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32        MapID;                ///< Offset 0x0008 Type _MJVTBL_INT32
        G3D::Vector3 Position;             ///< Offset 0x000C Type _MJVTBL_V3
    };

    uint32                            ActiveMarkers;                            ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8                             PartyIndex;                               ///< Offset 0x0004 Type _MJVTBL_UINT8
    std::vector<JamCliRaidMarkerData> MarkerData;                               ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliRaidMarkerData>::MJVTBL
};

///< SMSG_STREAMING_MOVIES
struct ClientStreamingMovies
{
    std::vector<uint16> MovieIDs;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
};

///< SMSG_TIME_SYNC_REQUEST
struct ClientTimeSyncRequest
{
    uint32 SequenceIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_TIME_ADJUSTMENT
struct ClientTimeAdjustment
{
    uint32 SequenceIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    float  TimeScale;            ///< Offset 0x0004 Type _MJVTBL_FLOAT
};

///< SMSG_START_TIMER
struct ClientStartTimer
{
    uint32 TimeRemaining;        ///< Offset 0x0000 Type _MJVTBL_TIME_T
    uint32 TotalTime;            ///< Offset 0x0008 Type _MJVTBL_TIME_T
    int32  Type;                 ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_DISENCHANT_CREDIT
struct ClientDisenchantCredit
{
    struct Item_Struct
    {
        struct JamItemBonusInstanceData
        {
            struct Context_Struct
            {
                uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            };

            struct Bonuses_Struct
            {
                std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
            };

            Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        };

        int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
        Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
        Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
    };

    uint64      Disenchanter;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    Item_Struct Item;                ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_SUSPEND_TOKEN
struct ClientSuspendToken
{
    CLIENT_SUSPEND_REASON Reason;                       ///< Offset 0x0000 Type _MJVTBL_CLIENT_SUSPEND_REASON
    uint32                Sequence;                     ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_RESUME_TOKEN
struct ClientResumeToken
{
    uint32                Sequence;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
    CLIENT_SUSPEND_REASON Reason;                       ///< Offset 0x0004 Type _MJVTBL_CLIENT_SUSPEND_REASON
};

///< SMSG_CANCEL_SPELL_VISUAL
struct ClientCancelSpellVisual
{
    uint64 Source;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellVisualID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_PLAY_SPELL_VISUAL
struct ClientPlaySpellVisual
{
    uint64       Source;                ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64       Target;                ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint16       MissReason;            ///< Offset 0x0010 Type _MJVTBL_UINT16
    int32        SpellVisualID;         ///< Offset 0x0014 Type _MJVTBL_INT32
    bool         SpeedAsTime;           ///< Offset 0x0018 Type _MJVTBL_BOOL
    uint16       ReflectStatus;         ///< Offset 0x001A Type _MJVTBL_UINT16
    float        TravelSpeed;           ///< Offset 0x001C Type _MJVTBL_FLOAT
    G3D::Vector3 TargetPosition;        ///< Offset 0x0020 Type _MJVTBL_V3
};

///< SMSG_CANCEL_ORPHAN_SPELL_VISUAL
struct ClientCancelOrphanSpellVisual
{
    int32 SpellVisualID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_PLAY_ORPHAN_SPELL_VISUAL
struct ClientPlayOrphanSpellVisual
{
    uint64       Target;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
    G3D::Vector3 SourceLocation;           ///< Offset 0x0008 Type _MJVTBL_V3
    int32        SpellVisualID;            ///< Offset 0x0014 Type _MJVTBL_INT32
    bool         SpeedAsTime;              ///< Offset 0x0018 Type _MJVTBL_BOOL
    float        TravelSpeed;              ///< Offset 0x001C Type _MJVTBL_FLOAT
    G3D::Vector3 SourceOrientation;        ///< Offset 0x0020 Type _MJVTBL_V3
    G3D::Vector3 TargetLocation;           ///< Offset 0x002C Type _MJVTBL_V3
};

///< SMSG_CANCEL_SPELL_VISUAL_KIT
struct ClientCancelSpellVisualKit
{
    uint64 Source;                  ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellVisualKitID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_PLAY_SPELL_VISUAL_KIT
struct ClientPlaySpellVisualKit
{
    uint64 Unit;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  KitType;         ///< Offset 0x0008 Type _MJVTBL_INT32
    uint32 Duration;        ///< Offset 0x000C Type _MJVTBL_UINT32
    int32  KitRecID;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_GAME_OBJECT_PLAY_SPELL_VISUAL_KIT
struct ClientGameObjectPlaySpellVisualKit
{
    uint64 Object;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  KitRecID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  KitType;         ///< Offset 0x000C Type _MJVTBL_INT32
    uint32 Duration;        ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< SMSG_ADD_ITEM_PASSIVE
struct ClientAddItemPassive
{
    int32 SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_REMOVE_ITEM_PASSIVE
struct ClientRemoveItemPassive
{
    int32 SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_SEND_ITEM_PASSIVES
struct ClientSendItemPassives
{
    std::vector<int32> SpellID;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_WORLD_SERVER_INFO
struct ClientWorldServerInfo
{
    Optional<uint32> IneligibleForLootMask;            ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    uint32           WeeklyReset;                      ///< Offset 0x0008 Type _MJVTBL_TIME_T
    Optional<uint32> InstanceGroupSize;                ///< Offset 0x0010 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    uint8            IsTournamentRealm;                ///< Offset 0x0018 Type _MJVTBL_UINT8
    Optional<uint32> RestrictedAccountMaxLevel;        ///< Offset 0x001C Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    Optional<uint32> RestrictedAccountMaxMoney;        ///< Offset 0x0024 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    uint32           DifficultyID;                     ///< Offset 0x002C Type _MJVTBL_UINT32
};

///< SMSG_ACCOUNT_MOUNT_UPDATE
struct ClientAccountMountUpdate
{
    std::vector<int32> MountSpellIDs;             ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    std::vector<bool>  MountIsFavorite;           ///< Offset 0x0018 Type MakeMJVTblForArrayOf<bool,&(MJVTBL_BOOL)>::MJVTBL
    bool               IsFullUpdate;              ///< Offset 0x0030 Type _MJVTBL_BOOL
};

///< SMSG_LAST_WEEKLY_RESET
struct ClientLastWeeklyReset
{
    uint32 Reset;         ///< Offset 0x0000 Type _MJVTBL_TIME_T
};

///< SMSG_RUNE_REGEN_DEBUG
struct ClientRuneRegenDebug
{
    uint32 Time;                ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 Interval;            ///< Offset 0x0004 Type _MJVTBL_UINT32
    int32  RuneStart[6];        ///< Offset 0x0008 Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
    int32  RuneEnd[6];          ///< Offset 0x0020 Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
    float  RegenRate[4];        ///< Offset 0x0038 Type MakeMJVTblForFixedArrayOf<float,4,&(MJVTBL_FLOAT)>::MJVTBL
};

///< SMSG_GMACCOUNT_ONLINE_RESPONSE
struct ClientGMAccountOnlineResponse
{
    uint64 PlayerGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 AccountID;         ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_VENDOR_INVENTORY
struct ClientVendorInventory
{
    struct JamCliVendorItem
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        uint32      M_muid;                         ///< Offset 0x0000 Type _MJVTBL_UINT32
        int32       M_type;                         ///< Offset 0x0004 Type _MJVTBL_INT32
        Item_Struct Item;                           ///< Offset 0x0008 Type _MJVTBL_STRUCT
        int32       M_quantity;                     ///< Offset 0x0068 Type _MJVTBL_INT32
        int32       M_price;                        ///< Offset 0x006C Type _MJVTBL_INT32
        int32       M_durability;                   ///< Offset 0x0070 Type _MJVTBL_INT32
        int32       M_stackCount;                   ///< Offset 0x0074 Type _MJVTBL_INT32
        int32       M_extendedCostID;               ///< Offset 0x0078 Type _MJVTBL_INT32
        int32       M_playerConditionFailed;        ///< Offset 0x007C Type _MJVTBL_INT32
        bool        M_doNotFilterOnVendor;          ///< Offset 0x0080 Type _MJVTBL_BOOL
    };

    uint8                         Reason;                               ///< Offset 0x0000 Type _MJVTBL_UINT8
    std::vector<JamCliVendorItem> Items;                                ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliVendorItem>::MJVTBL
    uint64                        Vendor;                               ///< Offset 0x0020 Type _MJVTBL_UINT64
};

///< SMSG_RESTRICTED_ACCOUNT_WARNING
struct ClientRestrictedAccountWarning
{
    uint32 Arg;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8  Type;          ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< SMSG_SET_PLAY_HOVER_ANIM
struct ClientSetPlayHoverAnim
{
    uint64 UnitGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   PlayHoverAnim;        ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< SMSG_CLEAR_BOSS_EMOTES
struct ClientClearBossEmotes
{
};

///< SMSG_LOAD_CUFPROFILES
struct ClientLoadCUFProfiles
{
    struct JamCliCUFProfile
    {
        std::string Name;                                 ///< Offset 0x0000 Type _MJVTBL_STRING
        uint16      FrameHeight;                          ///< Offset 0x0080 Type _MJVTBL_UINT16
        uint16      FrameWidth;                           ///< Offset 0x0082 Type _MJVTBL_UINT16
        uint8       SortBy;                               ///< Offset 0x0084 Type _MJVTBL_UINT8
        uint8       HealthText;                           ///< Offset 0x0085 Type _MJVTBL_UINT8
        bool        KeepGroupsTogether;                   ///< Offset 0x0086 Type _MJVTBL_BOOL
        bool        DisplayPets;                          ///< Offset 0x0087 Type _MJVTBL_BOOL
        bool        DisplayMainTankAndAssist;             ///< Offset 0x0088 Type _MJVTBL_BOOL
        bool        DisplayHealPrediction;                ///< Offset 0x0089 Type _MJVTBL_BOOL
        bool        DisplayAggroHighlight;                ///< Offset 0x008A Type _MJVTBL_BOOL
        bool        DisplayOnlyDispellableDebuffs;        ///< Offset 0x008B Type _MJVTBL_BOOL
        bool        DisplayPowerBar;                      ///< Offset 0x008C Type _MJVTBL_BOOL
        bool        DisplayBorder;                        ///< Offset 0x008D Type _MJVTBL_BOOL
        bool        UseClassColors;                       ///< Offset 0x008E Type _MJVTBL_BOOL
        bool        HorizontalGroups;                     ///< Offset 0x008F Type _MJVTBL_BOOL
        bool        DisplayNonBossDebuffs;                ///< Offset 0x0090 Type _MJVTBL_BOOL
        bool        DynamicPosition;                      ///< Offset 0x0091 Type _MJVTBL_BOOL
        uint8       TopPoint;                             ///< Offset 0x0092 Type _MJVTBL_UINT8
        uint8       BottomPoint;                          ///< Offset 0x0093 Type _MJVTBL_UINT8
        uint8       LeftPoint;                            ///< Offset 0x0094 Type _MJVTBL_UINT8
        uint16      TopOffset;                            ///< Offset 0x0096 Type _MJVTBL_UINT16
        uint16      BottomOffset;                         ///< Offset 0x0098 Type _MJVTBL_UINT16
        uint16      LeftOffset;                           ///< Offset 0x009A Type _MJVTBL_UINT16
        bool        Locked;                               ///< Offset 0x009C Type _MJVTBL_BOOL
        bool        Shown;                                ///< Offset 0x009D Type _MJVTBL_BOOL
        bool        AutoActivate2Players;                 ///< Offset 0x009E Type _MJVTBL_BOOL
        bool        AutoActivate3Players;                 ///< Offset 0x009F Type _MJVTBL_BOOL
        bool        AutoActivate5Players;                 ///< Offset 0x00A0 Type _MJVTBL_BOOL
        bool        AutoActivate10Players;                ///< Offset 0x00A1 Type _MJVTBL_BOOL
        bool        AutoActivate15Players;                ///< Offset 0x00A2 Type _MJVTBL_BOOL
        bool        AutoActivate25Players;                ///< Offset 0x00A3 Type _MJVTBL_BOOL
        bool        AutoActivate40Players;                ///< Offset 0x00A4 Type _MJVTBL_BOOL
        bool        AutoActivateSpec1;                    ///< Offset 0x00A5 Type _MJVTBL_BOOL
        bool        AutoActivateSpec2;                    ///< Offset 0x00A6 Type _MJVTBL_BOOL
        bool        AutoActivatePvP;                      ///< Offset 0x00A7 Type _MJVTBL_BOOL
        bool        AutoActivatePvE;                      ///< Offset 0x00A8 Type _MJVTBL_BOOL
    };

    std::vector<JamCliCUFProfile> Profiles;                             ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliCUFProfile>::MJVTBL
};

///< SMSG_SUPPRESS_NPCGREETINGS
struct ClientSuppressNPCGreetings
{
    bool   SuppressNPCGreetings;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 UnitGUID;                    ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_DESTROY_OBJECT
struct ClientDestroyObject
{
    bool   IsDead;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 Guid;          ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_PARTY_INVITE
struct ClientPartyInvite
{
    bool                AllowMultipleRoles;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32              InviterCfgRealmID;           ///< Offset 0x0004 Type _MJVTBL_UINT32
    bool                MightCRZYou;                 ///< Offset 0x0008 Type _MJVTBL_BOOL
    bool                CanAccept;                   ///< Offset 0x0009 Type _MJVTBL_BOOL
    uint64              InviterGuid;                 ///< Offset 0x0010 Type _MJVTBL_UINT64
    bool                MustBeBNetFriend;            ///< Offset 0x0018 Type _MJVTBL_BOOL
    uint32              LfgCompletedMask;            ///< Offset 0x001C Type _MJVTBL_UINT32
    uint32              ProposedRoles;               ///< Offset 0x0020 Type _MJVTBL_UINT32
    std::vector<uint32> LfgSlots;                    ///< Offset 0x0028 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    bool                IsXRealm;                    ///< Offset 0x0040 Type _MJVTBL_BOOL
    std::string         InviterRealmName;            ///< Offset 0x0041 Type _MJVTBL_STRING
    std::string         InviterName;                 ///< Offset 0x0142 Type _MJVTBL_STRING
    uint64              InviterBNetAccountID;        ///< Offset 0x0178 Type _MJVTBL_UINT64
};

///< SMSG_DUMP_RIDE_TICKETS_RESPONSE
struct ClientDumpRideTicketsResponse
{
    struct ClientDumpRideTicket
    {
        std::string Description;        ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    std::vector<ClientDumpRideTicket> Ticket;                                   ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientDumpRideTicket>::MJVTBL
};

///< SMSG_FEATURE_SYSTEM_STATUS
struct ClientFeatureSystemStatus
{
    struct JamClientSessionAlertConfig
    {
        int32 Delay;              ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 Period;             ///< Offset 0x0004 Type _MJVTBL_INT32
        int32 DisplayTime;        ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    struct JamCliEuropaTicketConfig
    {
        struct ThrottleState_Struct
        {
            uint32 MaxTries;                      ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint32 PerMilliseconds;               ///< Offset 0x0004 Type _MJVTBL_UINT32
            uint32 TryCount;                      ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 LastResetTimeBeforeNow;        ///< Offset 0x000C Type _MJVTBL_UINT32
        };

        ThrottleState_Struct ThrottleState;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    };

    bool                                  VoiceEnabled;                                 ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool                                  BrowserEnabled;                               ///< Offset 0x0001 Type _MJVTBL_BOOL
    bool                                  BpayStoreAvailable;                           ///< Offset 0x0002 Type _MJVTBL_BOOL
    bool                                  RecruitAFriendSendingEnabled;                 ///< Offset 0x0003 Type _MJVTBL_BOOL
    bool                                  BpayStoreEnabled;                             ///< Offset 0x0004 Type _MJVTBL_BOOL
    Optional<JamClientSessionAlertConfig> SessionAlert;                                 ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamClientSessionAlertConfig>::MJVTBL
    uint32                                ScrollOfResurrectionMaxRequestsPerDay;        ///< Offset 0x0018 Type _MJVTBL_UINT32
    bool                                  ScrollOfResurrectionEnabled;                  ///< Offset 0x001C Type _MJVTBL_BOOL
    Optional<JamCliEuropaTicketConfig>    EuropaTicketSystemStatus;                     ///< Offset 0x0020 Type MakeMJVTblForOptionalStruct<JamCliEuropaTicketConfig>::MJVTBL
    uint32                                ScrollOfResurrectionRequestsRemaining;        ///< Offset 0x0034 Type _MJVTBL_UINT32
    uint32                                CfgRealmID;                                   ///< Offset 0x0038 Type _MJVTBL_UINT32
    uint8                                 ComplaintStatus;                              ///< Offset 0x003C Type _MJVTBL_UINT8
    int32                                 CfgRealmRecID;                                ///< Offset 0x0040 Type _MJVTBL_INT32
    bool                                  ItemRestorationButtonEnabled;                 ///< Offset 0x0044 Type _MJVTBL_BOOL
    bool                                  CharUndeleteEnabled;                          ///< Offset 0x0045 Type _MJVTBL_BOOL
    bool                                  BpayStoreDisabledByParentalControls;          ///< Offset 0x0046 Type _MJVTBL_BOOL
};

///< SMSG_FEATURE_SYSTEM_STATUS_GLUE_SCREEN
struct ClientFeatureSystemStatusGlueScreen
{
    bool BpayStoreAvailable;                         ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool BpayStoreDisabledByParentalControls;        ///< Offset 0x0001 Type _MJVTBL_BOOL
    bool CharUndeleteEnabled;                        ///< Offset 0x0002 Type _MJVTBL_BOOL
    bool BpayStoreEnabled;                           ///< Offset 0x0003 Type _MJVTBL_BOOL
};

///< SMSG_PVPSEASON
struct ClientPVPSeason
{
    int32 PreviousSeason;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 CurrentSeason;         ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_REQUEST_PVPREWARDS_RESPONSE
struct ClientRequestPVPRewardsResponse
{
    int32 RatedRewardPointsThisWeek;            ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 ArenaRewardPointsThisWeek;            ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 RatedMaxRewardPointsThisWeek;         ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 ArenaRewardPoints;                    ///< Offset 0x000C Type _MJVTBL_INT32
    int32 RandomRewardPointsThisWeek;           ///< Offset 0x0010 Type _MJVTBL_INT32
    int32 ArenaMaxRewardPointsThisWeek;         ///< Offset 0x0014 Type _MJVTBL_INT32
    int32 RatedRewardPoints;                    ///< Offset 0x0018 Type _MJVTBL_INT32
    int32 MaxRewardPointsThisWeek;              ///< Offset 0x001C Type _MJVTBL_INT32
    int32 RewardPointsThisWeek;                 ///< Offset 0x0020 Type _MJVTBL_INT32
    int32 RandomMaxRewardPointsThisWeek;        ///< Offset 0x0024 Type _MJVTBL_INT32
};

///< SMSG_GAME_OBJECT_ACTIVATE_ANIM_KIT
struct ClientGameObjectActivateAnimKit
{
    bool   Maintain;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 ObjectGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  AnimKitID;         ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_GAME_OBJECT_CUSTOM_ANIM
struct ClientGameObjectCustomAnim
{
    uint64 ObjectGUID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 CustomAnim;           ///< Offset 0x0008 Type _MJVTBL_UINT32
    bool   PlayAsDespawn;        ///< Offset 0x000C Type _MJVTBL_BOOL
};

///< SMSG_GAME_OBJECT_DESPAWN
struct ClientGameObjectDespawn
{
    uint64 ObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_GAME_OBJECT_PLAY_SPELL_VISUAL
struct ClientGameObjectPlaySpellVisual
{
    uint64 ObjectGUID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 ActivatorGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  SpellVisualID;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_MAP_OBJ_EVENTS
struct ClientMapObjEvents
{
    uint32  UniqueID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8 * Events;          ///< Offset 0x0008 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_MISSILE_CANCEL
struct ClientMissileCancel
{
    uint64 OwnerGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   Reverse;          ///< Offset 0x0008 Type _MJVTBL_BOOL
    int32  SpellID;          ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_VOID_STORAGE_FAILED
struct ClientVoidStorageFailed
{
    uint8 Reason;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_VOID_STORAGE_CONTENTS
struct ClientVoidStorageContents
{
    struct JamVoidItem
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        uint64      Guid;               ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64      Creator;            ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint32      Slot;               ///< Offset 0x0010 Type _MJVTBL_UINT32
        Item_Struct Item;               ///< Offset 0x0018 Type _MJVTBL_STRUCT
    };

    std::vector<JamVoidItem> Items;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamVoidItem>::MJVTBL
};

///< SMSG_VOID_STORAGE_TRANSFER_CHANGES
struct ClientVoidStorageTransferChanges
{
    struct JamVoidItem
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        uint64      Guid;               ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64      Creator;            ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint32      Slot;               ///< Offset 0x0010 Type _MJVTBL_UINT32
        Item_Struct Item;               ///< Offset 0x0018 Type _MJVTBL_STRUCT
    };

    std::vector<uint64>      RemovedItems;                    ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    std::vector<JamVoidItem> AddedItems;                      ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamVoidItem>::MJVTBL
};

///< SMSG_VOID_TRANSFER_RESULT
struct ClientVoidTransferResult
{
    int32 Result;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_VOID_ITEM_SWAP_RESPONSE
struct ClientVoidItemSwapResponse
{
    uint64 VoidItemB;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 VoidItemA;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 VoidItemSlotB;        ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint32 VoidItemSlotA;        ///< Offset 0x0014 Type _MJVTBL_UINT32
};

///< SMSG_XPGAIN_ABORTED
struct ClientXPGainAborted
{
    uint64 Victim;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  XpToAdd;              ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  XpGainReason;         ///< Offset 0x000C Type _MJVTBL_INT32
    int32  XpAbortReason;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_PRINT_NOTIFICATION
struct ClientPrintNotification
{
    std::string NotifyText;         ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_FAILED_PLAYER_CONDITION
struct ClientFailedPlayerCondition
{
    int32 ConditionID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_CUSTOM_LOAD_SCREEN
struct ClientCustomLoadScreen
{
    int32 TeleportSpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_TRANSFER_PENDING
struct ClientTransferPending
{
    struct ShipTransferPending
    {
        uint32 ID;                 ///< Offset 0x0000 Type _MJVTBL_UINT32
        int32  OriginMapID;        ///< Offset 0x0004 Type _MJVTBL_INT32
    };

    int32                         MapID;                                ///< Offset 0x0000 Type _MJVTBL_INT32
    Optional<ShipTransferPending> Ship;                                 ///< Offset 0x0004 Type MakeMJVTblForOptionalStruct<ShipTransferPending>::MJVTBL
    Optional<int32>               TransferSpellID;                      ///< Offset 0x0010 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_GAME_EVENT_DEBUG_LOG
struct ClientGameEventDebugLog
{
    uint64      TriggeredBy;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32       EventID;                ///< Offset 0x0008 Type _MJVTBL_INT32
    int32       EventType;              ///< Offset 0x000C Type _MJVTBL_INT32
    std::string Reason;                 ///< Offset 0x0010 Type _MJVTBL_STRING
    std::string TriggeredByName;        ///< Offset 0x0090 Type _MJVTBL_STRING
    std::string EventName;              ///< Offset 0x0110 Type _MJVTBL_STRING
};

///< SMSG_SERVER_PERF
struct ClientServerPerf
{
    struct ClientServerPerfStat
    {
        std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    std::vector<ClientServerPerfStat> Stats;                                    ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientServerPerfStat>::MJVTBL
};

///< SMSG_AREA_TRIGGER_MOVEMENT_UPDATE
struct ClientAreaTriggerMovementUpdate
{
    G3D::Vector3 Start;               ///< Offset 0x0000 Type _MJVTBL_V3
    G3D::Vector3 End;                 ///< Offset 0x000C Type _MJVTBL_V3
};

///< SMSG_ADJUST_SPLINE_DURATION
struct ClientAdjustSplineDuration
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Scale;         ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_LEARN_TALENT_FAILED
struct ClientLearnTalentFailed
{
    int32 Reason;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_UPDATE_TALENT_DATA
struct ClientUpdateTalentData
{
    struct Info_Struct
    {
        struct JamTalentGroupInfo
        {
            int32               SpecID;                     ///< Offset 0x0000 Type _MJVTBL_INT32
            std::vector<uint16> TalentIDs;                  ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
            uint16              GlyphIDs[6];                ///< Offset 0x0020 Type MakeMJVTblForFixedArrayOf<unsignedshort,6,&(MJVTBL_UINT16)>::MJVTBL
        };

        uint8                           ActiveGroup;                            ///< Offset 0x0000 Type _MJVTBL_UINT8
        std::vector<JamTalentGroupInfo> TalentGroups;                           ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamTalentGroupInfo>::MJVTBL
    };

    Info_Struct Info;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_GMREQUEST_PLAYER_INFO
struct ClientGMRequestPlayerInfo
{
    bool        Success;            ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::string Name;               ///< Offset 0x0001 Type _MJVTBL_STRING
};

///< SMSG_GMSUMMON
struct ClientGMSummon
{
    bool Success;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_GHOST
struct ClientGhost
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_LFGJOIN_RESULT
struct ClientLFGJoinResult
{
    struct ClientLFGBlackList
    {
        struct ClientLFGBlackListSlot
        {
            int32 Slot;              ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Reason;            ///< Offset 0x0004 Type _MJVTBL_INT32
            int32 SubReason1;        ///< Offset 0x0008 Type _MJVTBL_INT32
            int32 SubReason2;        ///< Offset 0x000C Type _MJVTBL_INT32
        };

        uint64                              Guid;                                       ///< Offset 0x0000 Type _MJVTBL_UINT64
        std::vector<ClientLFGBlackListSlot> Slots;                                      ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientLFGBlackListSlot>::MJVTBL
    };

    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    uint8                           Result;                                 ///< Offset 0x0000 Type _MJVTBL_UINT8
    std::vector<ClientLFGBlackList> BlackList;                              ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientLFGBlackList>::MJVTBL
    uint8                           ResultDetail;                           ///< Offset 0x0020 Type _MJVTBL_UINT8
    Ticket_Struct                   Ticket;                                 ///< Offset 0x0028 Type _MJVTBL_STRUCT
};

///< SMSG_LFGLIST_JOIN_RESULT
struct ClientLFGListJoinResult
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    Ticket_Struct Ticket;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint8         ResultDetail;         ///< Offset 0x0018 Type _MJVTBL_UINT8
    uint8         Result;               ///< Offset 0x0019 Type _MJVTBL_UINT8
};

///< SMSG_LFGQUEUE_STATUS
struct ClientLFGQueueStatus
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    Ticket_Struct Ticket;                      ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint32        QueuedTime;                  ///< Offset 0x0018 Type _MJVTBL_UINT32
    uint32        AvgWaitTime;                 ///< Offset 0x001C Type _MJVTBL_UINT32
    uint32        Slot;                        ///< Offset 0x0020 Type _MJVTBL_UINT32
    uint32        AvgWaitTimeMe;               ///< Offset 0x0024 Type _MJVTBL_UINT32
    uint8         LastNeeded[3];               ///< Offset 0x0028 Type MakeMJVTblForFixedArrayOf<unsignedchar,3,&(MJVTBL_UINT8)>::MJVTBL
    uint32        AvgWaitTimeByRole[3];        ///< Offset 0x002C Type MakeMJVTblForFixedArrayOf<unsignedint,3,&(MJVTBL_UINT32)>::MJVTBL
};

///< SMSG_LFGROLE_CHECK_UPDATE
struct ClientLFGRoleCheckUpdate
{
    struct ClientLFGRoleCheckUpdateMember
    {
        uint64 Guid;                     ///< Offset 0x0000 Type _MJVTBL_UINT64
        bool   RoleCheckComplete;        ///< Offset 0x0008 Type _MJVTBL_BOOL
        uint32 RolesDesired;             ///< Offset 0x000C Type _MJVTBL_UINT32
        uint8  Level;                    ///< Offset 0x0010 Type _MJVTBL_UINT8
    };

    bool                                        IsBeginning;                                        ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<uint32>                         JoinSlots;                                          ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    uint64                                      BgQueueID;                                          ///< Offset 0x0020 Type _MJVTBL_UINT64
    uint8                                       PartyIndex;                                         ///< Offset 0x0028 Type _MJVTBL_UINT8
    uint8                                       RoleCheckStatus;                                    ///< Offset 0x0029 Type _MJVTBL_UINT8
    std::vector<ClientLFGRoleCheckUpdateMember> Members;                                            ///< Offset 0x0030 Type MakeMJVTblForArrayOfStruct<ClientLFGRoleCheckUpdateMember>::MJVTBL
};

///< SMSG_LFGUPDATE_STATUS_NONE
struct ClientLFGUpdateStatusNone
{
};

///< SMSG_LFGUPDATE_STATUS
struct ClientLFGUpdateStatus
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    uint32              RequestedRoles;             ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool                NotifyUI;                   ///< Offset 0x0004 Type _MJVTBL_BOOL
    std::vector<uint32> Slots;                      ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    bool                LfgJoined;                  ///< Offset 0x0020 Type _MJVTBL_BOOL
    uint8               Reason;                     ///< Offset 0x0021 Type _MJVTBL_UINT8
    std::vector<uint64> SuspendedPlayers;           ///< Offset 0x0028 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    uint8               SubType;                    ///< Offset 0x0040 Type _MJVTBL_UINT8
    bool                Queued;                     ///< Offset 0x0041 Type _MJVTBL_BOOL
    std::string         Comment;                    ///< Offset 0x0042 Type _MJVTBL_STRING
    Ticket_Struct       Ticket;                     ///< Offset 0x0148 Type _MJVTBL_STRUCT
    bool                Joined;                     ///< Offset 0x0160 Type _MJVTBL_BOOL
    bool                IsParty;                    ///< Offset 0x0161 Type _MJVTBL_BOOL
    uint8               Needs[3];                   ///< Offset 0x0162 Type MakeMJVTblForFixedArrayOf<unsignedchar,3,&(MJVTBL_UINT8)>::MJVTBL
};

///< SMSG_LFGLIST_UPDATE_STATUS
struct ClientLFGListUpdateStatus
{
    struct Request_Struct
    {
        uint32      ActivityID;               ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32      RequiredItemLevel;        ///< Offset 0x0004 Type _MJVTBL_UINT32
        std::string Name;                     ///< Offset 0x0008 Type _MJVTBL_STRING
        std::string Comment;                  ///< Offset 0x0088 Type _MJVTBL_STRING
        std::string VoiceChat;                ///< Offset 0x0488 Type _MJVTBL_STRING
    };

    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    bool           Listed;                ///< Offset 0x0000 Type _MJVTBL_BOOL
    Request_Struct Request;               ///< Offset 0x0004 Type _MJVTBL_STRUCT
    uint8          Reason;                ///< Offset 0x050C Type _MJVTBL_UINT8
    Ticket_Struct  Ticket;                ///< Offset 0x0510 Type _MJVTBL_STRUCT
};

///< SMSG_LFGLIST_UPDATE_BLACKLIST
struct ClientLFGListUpdateBlacklist
{
    struct Blacklist_Struct
    {
        struct JamLFGListBlacklistEntry
        {
            uint32 ActivityID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint32 Reason;            ///< Offset 0x0004 Type _MJVTBL_UINT32
        };

        std::vector<JamLFGListBlacklistEntry> Entries;                                      ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamLFGListBlacklistEntry>::MJVTBL
    };

    Blacklist_Struct Blacklist;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_LFGPROPOSAL_UPDATE
struct ClientLFGProposalUpdate
{
    struct ClientLFGProposalUpdatePlayer
    {
        uint32 Roles;            ///< Offset 0x0000 Type _MJVTBL_UINT32
        bool   Me;               ///< Offset 0x0004 Type _MJVTBL_BOOL
        bool   SameParty;        ///< Offset 0x0005 Type _MJVTBL_BOOL
        bool   MyParty;          ///< Offset 0x0006 Type _MJVTBL_BOOL
        bool   Responded;        ///< Offset 0x0007 Type _MJVTBL_BOOL
        bool   Accepted;         ///< Offset 0x0008 Type _MJVTBL_BOOL
    };

    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    bool                                       ProposalSilent;                                    ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<ClientLFGProposalUpdatePlayer> Players;                                           ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientLFGProposalUpdatePlayer>::MJVTBL
    uint32                                     CompletedMask;                                     ///< Offset 0x0020 Type _MJVTBL_UINT32
    uint64                                     InstanceID;                                        ///< Offset 0x0028 Type _MJVTBL_UINT64
    bool                                       ValidCompletedMask;                                ///< Offset 0x0030 Type _MJVTBL_BOOL
    uint32                                     Slot;                                              ///< Offset 0x0034 Type _MJVTBL_UINT32
    Ticket_Struct                              Ticket;                                            ///< Offset 0x0038 Type _MJVTBL_STRUCT
    int8                                       State;                                             ///< Offset 0x0050 Type _MJVTBL_INT8
    uint32                                     ProposalID;                                        ///< Offset 0x0054 Type _MJVTBL_UINT32
};

///< SMSG_LFGSEARCH_RESULTS
struct ClientLFGSearchResults
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    struct ClientLFGSearchResultParty
    {
        uint64      Guid;                         ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32      ChangeMask;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        std::string Comment;                      ///< Offset 0x000C Type _MJVTBL_STRING
        uint64      InstanceID;                   ///< Offset 0x0110 Type _MJVTBL_UINT64
        uint32      InstanceCompletedMask;        ///< Offset 0x0118 Type _MJVTBL_UINT32
        uint8       Needs[3];                     ///< Offset 0x011C Type MakeMJVTblForFixedArrayOf<unsignedchar,3,&(MJVTBL_UINT8)>::MJVTBL
    };

    struct ClientLFGSearchResultPlayer
    {
        uint64      Guid;                         ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32      ChangeMask;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8       Level;                        ///< Offset 0x000C Type _MJVTBL_UINT8
        uint8       ChrClass;                     ///< Offset 0x000D Type _MJVTBL_UINT8
        uint8       Race;                         ///< Offset 0x000E Type _MJVTBL_UINT8
        uint32      Armor;                        ///< Offset 0x0010 Type _MJVTBL_UINT32
        uint32      SpellDamage;                  ///< Offset 0x0014 Type _MJVTBL_UINT32
        uint32      PlusHealing;                  ///< Offset 0x0018 Type _MJVTBL_UINT32
        uint32      CritMelee;                    ///< Offset 0x001C Type _MJVTBL_UINT32
        uint32      CritRanged;                   ///< Offset 0x0020 Type _MJVTBL_UINT32
        uint32      CritSpell;                    ///< Offset 0x0024 Type _MJVTBL_UINT32
        float       Mp5;                          ///< Offset 0x0028 Type _MJVTBL_FLOAT
        float       Mp5InCombat;                  ///< Offset 0x002C Type _MJVTBL_FLOAT
        uint32      AttackPower;                  ///< Offset 0x0030 Type _MJVTBL_UINT32
        uint32      Agility;                      ///< Offset 0x0034 Type _MJVTBL_UINT32
        uint32      MaxHealth;                    ///< Offset 0x0038 Type _MJVTBL_UINT32
        uint32      MaxMana;                      ///< Offset 0x003C Type _MJVTBL_UINT32
        uint32      BossKills;                    ///< Offset 0x0040 Type _MJVTBL_UINT32
        float       GearRating;                   ///< Offset 0x0044 Type _MJVTBL_FLOAT
        float       AvgItemLevel;                 ///< Offset 0x0048 Type _MJVTBL_FLOAT
        uint32      DefenseRating;                ///< Offset 0x004C Type _MJVTBL_UINT32
        uint32      DodgeRating;                  ///< Offset 0x0050 Type _MJVTBL_UINT32
        uint32      BlockRating;                  ///< Offset 0x0054 Type _MJVTBL_UINT32
        uint32      ParryRating;                  ///< Offset 0x0058 Type _MJVTBL_UINT32
        uint32      HasteRating;                  ///< Offset 0x005C Type _MJVTBL_UINT32
        float       Expertise;                    ///< Offset 0x0060 Type _MJVTBL_FLOAT
        uint32      SpecID;                       ///< Offset 0x0064 Type _MJVTBL_UINT32
        uint32      VirtualRealmAddress;          ///< Offset 0x0068 Type _MJVTBL_UINT32
        uint32      NativeRealmAddress;           ///< Offset 0x006C Type _MJVTBL_UINT32
        std::string Comment;                      ///< Offset 0x0070 Type _MJVTBL_STRING
        bool        IsLeader;                     ///< Offset 0x0170 Type _MJVTBL_BOOL
        uint64      PartyGuid;                    ///< Offset 0x0178 Type _MJVTBL_UINT64
        uint8       RolesDesired;                 ///< Offset 0x0180 Type _MJVTBL_UINT8
        uint32      Area;                         ///< Offset 0x0184 Type _MJVTBL_UINT32
        uint8       Status;                       ///< Offset 0x0188 Type _MJVTBL_UINT8
        uint64      InstanceID;                   ///< Offset 0x0190 Type _MJVTBL_UINT64
        uint32      InstanceCompletedMask;        ///< Offset 0x0198 Type _MJVTBL_UINT32
    };

    bool                                     Incremental;                                     ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<uint64>                      Removes;                                         ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    Ticket_Struct                            Ticket;                                          ///< Offset 0x0020 Type _MJVTBL_STRUCT
    uint32                                   SlotID;                                          ///< Offset 0x0038 Type _MJVTBL_UINT32
    uint32                                   CountTotalParties;                               ///< Offset 0x003C Type _MJVTBL_UINT32
    uint32                                   CountTotalPlayers;                               ///< Offset 0x0040 Type _MJVTBL_UINT32
    uint32                                   SlotType;                                        ///< Offset 0x0044 Type _MJVTBL_UINT32
    std::vector<ClientLFGSearchResultParty>  Parties;                                         ///< Offset 0x0048 Type MakeMJVTblForArrayOfStruct<ClientLFGSearchResultParty>::MJVTBL
    std::vector<ClientLFGSearchResultPlayer> Players;                                         ///< Offset 0x0060 Type MakeMJVTblForArrayOfStruct<ClientLFGSearchResultPlayer>::MJVTBL
};

///< SMSG_SERVER_INFO_RESPONSE
struct ClientServerInfoResponse
{
    struct JamCliServerInfoLine
    {
        std::string Label;              ///< Offset 0x0000 Type _MJVTBL_STRING
        std::string Data;               ///< Offset 0x0020 Type _MJVTBL_STRING
    };

    std::vector<JamCliServerInfoLine> UserServerInfo;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliServerInfoLine>::MJVTBL
    std::vector<JamCliServerInfoLine> WorldServerInfo;                          ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamCliServerInfoLine>::MJVTBL
};

///< SMSG_LOOT_CONTENTS
struct ClientLootContents
{
    struct JamLootItem
    {
        struct Loot_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        LOOT_LIST_ITEM_TYPE Type;                       ///< Offset 0x0000 Type _MJVTBL_LOOT_LIST_ITEM_TYPE
        LOOT_ITEM_UI_TYPE   UiType;                     ///< Offset 0x0004 Type _MJVTBL_LOOT_ITEM_UI_TYPE
        uint32              Quantity;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8               LootItemType;               ///< Offset 0x000C Type _MJVTBL_UINT8
        uint8               LootListID;                 ///< Offset 0x000D Type _MJVTBL_UINT8
        bool                CanTradeToTapList;          ///< Offset 0x000E Type _MJVTBL_BOOL
        Loot_Struct         Loot;                       ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    uint64                   LootObj;                         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64                   Owner;                           ///< Offset 0x0008 Type _MJVTBL_UINT64
    std::vector<JamLootItem> Items;                           ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamLootItem>::MJVTBL
};

///< SMSG_SHOW_NEUTRAL_PLAYER_FACTION_SELECT_UI
struct ClientShowNeutralPlayerFactionSelectUI
{
};

///< SMSG_NEUTRAL_PLAYER_FACTION_SELECT_RESULT
struct ClientNeutralPlayerFactionSelectResult
{
    bool  Success;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 NewRaceID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_SORSTART_EXPERIENCE_INCOMPLETE
struct ClientSORStartExperienceIncomplete
{
};

///< SMSG_ACCOUNT_INFO_RESPONSE
struct ClientAccountInfoResponse
{
    struct JamCliBnetLicense
    {
        int32  LicenseID;         ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32 Expiration;        ///< Offset 0x0008 Type _MJVTBL_TIME_T
    };

    int32                          BnetAccountID;                         ///< Offset 0x0000 Type _MJVTBL_INT32
    std::vector<JamCliBnetLicense> GameAccountLicenses;                   ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliBnetLicense>::MJVTBL
    std::vector<JamCliBnetLicense> BnetAccountLicenses;                   ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<JamCliBnetLicense>::MJVTBL
    int32                          GameAccountFlags;                      ///< Offset 0x0038 Type _MJVTBL_INT32
    int32                          LocalAccountFlags;                     ///< Offset 0x003C Type _MJVTBL_INT32
    std::string                    BnetAccountName;                       ///< Offset 0x0040 Type _MJVTBL_STRING
    int32                          BnetAccountFlags;                      ///< Offset 0x0544 Type _MJVTBL_INT32
    int32                          GameAccountID;                         ///< Offset 0x0548 Type _MJVTBL_INT32
    std::string                    GameAccountName;                       ///< Offset 0x054C Type _MJVTBL_STRING
};

///< SMSG_SET_DFFAST_LAUNCH_RESULT
struct ClientSetDFFastLaunchResult
{
    bool Set;         ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_SET_LFGTIME_WALKER
struct ClientSetLFGTimeWalker
{
    int32 LfgDungeonID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_SUPERCEDED_SPELLS
struct ClientSupercededSpells
{
    std::vector<int32> SpellID;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    std::vector<int32> Superceded;                ///< Offset 0x0018 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_LEARNED_SPELLS
struct ClientLearnedSpells
{
    std::vector<int32> SpellID;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    bool               SuppressMessaging;         ///< Offset 0x0018 Type _MJVTBL_BOOL
};

///< SMSG_UNLEARNED_SPELLS
struct ClientUnlearnedSpells
{
    std::vector<int32> SpellID;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_PET_LEARNED_SPELLS
struct ClientPetLearnedSpells
{
    std::vector<int32> SpellID;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_PET_UNLEARNED_SPELLS
struct ClientPetUnlearnedSpells
{
    std::vector<int32> SpellID;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_UPDATE_ACTION_BUTTONS
struct ClientUpdateActionButtons
{
    uint64 ActionButtons[132];        ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<unsignedlonglong,132,&(MJVTBL_UINT64)>::MJVTBL
    uint8  Reason;                    ///< Offset 0x0420 Type _MJVTBL_UINT8
};

///< SMSG_DONT_AUTO_PUSH_SPELLS_TO_ACTION_BAR
struct ClientDontAutoPushSpellsToActionBar
{
};

///< SMSG_LFGSLOT_INVALID
struct ClientLFGSlotInvalid
{
    int32  SubReason1;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32  SubReason2;        ///< Offset 0x0004 Type _MJVTBL_INT32
    uint32 Reason;            ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_UPDATE_DUNGEON_ENCOUNTER_FOR_LOOT
struct ClientUpdateDungeonEncounterForLoot
{
};

///< SMSG_SCENE_OBJECT_EVENT
struct ClientSceneObjectEvent
{
    struct SceneEvent_Struct
    {
        std::string EventScript;        ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    SceneEvent_Struct SceneEvent;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64            SceneObjectGUID;          ///< Offset 0x0100 Type _MJVTBL_UINT64
};

///< SMSG_SCENE_OBJECT_PET_BATTLE_INITIAL_UPDATE
struct ClientSceneObjectPetBattleInitialUpdate
{
    struct MsgData_Struct
    {
        struct JamPetBattlePlayerUpdate
        {
            struct JamPetBattlePetUpdate
            {
                struct JamPetBattleActiveAbility
                {
                    int32 AbilityID;                ///< Offset 0x0000 Type _MJVTBL_INT32
                    int16 CooldownRemaining;        ///< Offset 0x0004 Type _MJVTBL_INT16
                    int16 LockdownRemaining;        ///< Offset 0x0006 Type _MJVTBL_INT16
                    int8  AbilityIndex;             ///< Offset 0x0008 Type _MJVTBL_INT8
                    uint8 Pboid;                    ///< Offset 0x0009 Type _MJVTBL_UINT8
                };

                struct JamPetBattleActiveAura
                {
                    int32  AbilityID;              ///< Offset 0x0000 Type _MJVTBL_INT32
                    uint32 InstanceID;             ///< Offset 0x0004 Type _MJVTBL_UINT32
                    int32  RoundsRemaining;        ///< Offset 0x0008 Type _MJVTBL_INT32
                    int32  CurrentRound;           ///< Offset 0x000C Type _MJVTBL_INT32
                    uint8  CasterPBOID;            ///< Offset 0x0010 Type _MJVTBL_UINT8
                };

                struct JamPetBattleActiveState
                {
                    uint32 StateID;           ///< Offset 0x0000 Type _MJVTBL_UINT32
                    int32  StateValue;        ///< Offset 0x0004 Type _MJVTBL_INT32
                };

                uint64                                 BattlePetGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                int32                                  SpeciesID;                                     ///< Offset 0x0008 Type _MJVTBL_INT32
                int32                                  DisplayID;                                     ///< Offset 0x000C Type _MJVTBL_INT32
                int32                                  CollarID;                                      ///< Offset 0x0010 Type _MJVTBL_INT32
                int16                                  Level;                                         ///< Offset 0x0014 Type _MJVTBL_INT16
                int16                                  Xp;                                            ///< Offset 0x0016 Type _MJVTBL_INT16
                int32                                  CurHealth;                                     ///< Offset 0x0018 Type _MJVTBL_INT32
                int32                                  MaxHealth;                                     ///< Offset 0x001C Type _MJVTBL_INT32
                int32                                  Power;                                         ///< Offset 0x0020 Type _MJVTBL_INT32
                int32                                  Speed;                                         ///< Offset 0x0024 Type _MJVTBL_INT32
                int32                                  NpcTeamMemberID;                               ///< Offset 0x0028 Type _MJVTBL_INT32
                uint16                                 BreedQuality;                                  ///< Offset 0x002C Type _MJVTBL_UINT16
                uint16                                 StatusFlags;                                   ///< Offset 0x002E Type _MJVTBL_UINT16
                int8                                   Slot;                                          ///< Offset 0x0030 Type _MJVTBL_INT8
                std::string                            CustomName;                                    ///< Offset 0x0031 Type _MJVTBL_STRING
                std::vector<JamPetBattleActiveAbility> Abilities;                                     ///< Offset 0x0078 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAbility>::MJVTBL
                std::vector<JamPetBattleActiveAura>    Auras;                                         ///< Offset 0x0090 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAura>::MJVTBL
                std::vector<JamPetBattleActiveState>   States;                                        ///< Offset 0x00A8 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveState>::MJVTBL
            };

            uint64                             CharacterID;                               ///< Offset 0x0000 Type _MJVTBL_UINT64
            int32                              TrapAbilityID;                             ///< Offset 0x0008 Type _MJVTBL_INT32
            int32                              TrapStatus;                                ///< Offset 0x000C Type _MJVTBL_INT32
            uint16                             RoundTimeSecs;                             ///< Offset 0x0010 Type _MJVTBL_UINT16
            std::vector<JamPetBattlePetUpdate> Pets;                                      ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamPetBattlePetUpdate>::MJVTBL
            int8                               FrontPet;                                  ///< Offset 0x0030 Type _MJVTBL_INT8
            uint8                              InputFlags;                                ///< Offset 0x0031 Type _MJVTBL_UINT8
        };

        struct JamPetBattleEnviroUpdate
        {
            struct JamPetBattleActiveAura
            {
                int32  AbilityID;              ///< Offset 0x0000 Type _MJVTBL_INT32
                uint32 InstanceID;             ///< Offset 0x0004 Type _MJVTBL_UINT32
                int32  RoundsRemaining;        ///< Offset 0x0008 Type _MJVTBL_INT32
                int32  CurrentRound;           ///< Offset 0x000C Type _MJVTBL_INT32
                uint8  CasterPBOID;            ///< Offset 0x0010 Type _MJVTBL_UINT8
            };

            struct JamPetBattleActiveState
            {
                uint32 StateID;           ///< Offset 0x0000 Type _MJVTBL_UINT32
                int32  StateValue;        ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            std::vector<JamPetBattleActiveAura>  Auras;                                       ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAura>::MJVTBL
            std::vector<JamPetBattleActiveState> States;                                      ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveState>::MJVTBL
        };

        uint16                   WaitingForFrontPetsMaxSecs;        ///< Offset 0x0000 Type _MJVTBL_UINT16
        uint16                   PvpMaxRoundTime;                   ///< Offset 0x0002 Type _MJVTBL_UINT16
        int32                    CurRound;                          ///< Offset 0x0004 Type _MJVTBL_INT32
        uint32                   NpcCreatureID;                     ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                   NpcDisplayID;                      ///< Offset 0x000C Type _MJVTBL_UINT32
        int8                     CurPetBattleState;                 ///< Offset 0x0010 Type _MJVTBL_INT8
        uint8                    ForfeitPenalty;                    ///< Offset 0x0011 Type _MJVTBL_UINT8
        uint64                   InitialWildPetGUID;                ///< Offset 0x0018 Type _MJVTBL_UINT64
        bool                     IsPVP;                             ///< Offset 0x0020 Type _MJVTBL_BOOL
        bool                     CanAwardXP;                        ///< Offset 0x0021 Type _MJVTBL_BOOL
        JamPetBattlePlayerUpdate Players[2];                        ///< Offset 0x0028 Type MakeMJVTblForFixedArrayOfStruct<JamPetBattlePlayerUpdate,2>::MJVTBL
        JamPetBattleEnviroUpdate Enviros[3];                        ///< Offset 0x0098 Type MakeMJVTblForFixedArrayOfStruct<JamPetBattleEnviroUpdate,3>::MJVTBL
    };

    MsgData_Struct MsgData;                ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64         SceneObjectGUID;        ///< Offset 0x0128 Type _MJVTBL_UINT64
};

///< SMSG_SCENE_OBJECT_PET_BATTLE_FIRST_ROUND
struct ClientSceneObjectPetBattleFirstRound
{
    struct MsgData_Struct
    {
        struct JamPetBattleEffect
        {
            struct JamPetBattleEffectTarget
            {
                JAM_PET_BATTLE_EFFECT_TARGET_EX Type;                                   ///< Offset 0x0000 Type _MJVTBL_JAM_PET_BATTLE_EFFECT_TARGET_EX
                uint8                           Petx;                                   ///< Offset 0x0004 Type _MJVTBL_UINT8
                uint32                          AuraInstanceID;                         ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                          AuraAbilityID;                          ///< Offset 0x000C Type _MJVTBL_UINT32
                int32                           RoundsRemaining;                        ///< Offset 0x0010 Type _MJVTBL_INT32
                int32                           CurrentRound;                           ///< Offset 0x0014 Type _MJVTBL_INT32
                uint32                          StateID;                                ///< Offset 0x0018 Type _MJVTBL_UINT32
                int32                           StateValue;                             ///< Offset 0x001C Type _MJVTBL_INT32
                int32                           Health;                                 ///< Offset 0x0020 Type _MJVTBL_INT32
                int32                           NewStatValue;                           ///< Offset 0x0024 Type _MJVTBL_INT32
                int32                           TriggerAbilityID;                       ///< Offset 0x0028 Type _MJVTBL_INT32
                int32                           ChangedAbilityID;                       ///< Offset 0x002C Type _MJVTBL_INT32
                int32                           CooldownRemaining;                      ///< Offset 0x0030 Type _MJVTBL_INT32
                int32                           LockdownRemaining;                      ///< Offset 0x0034 Type _MJVTBL_INT32
                int32                           BroadcastTextID;                        ///< Offset 0x0038 Type _MJVTBL_INT32
            };

            uint32                                AbilityEffectID;                              ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint16                                Flags;                                        ///< Offset 0x0004 Type _MJVTBL_UINT16
            uint16                                SourceAuraInstanceID;                         ///< Offset 0x0006 Type _MJVTBL_UINT16
            uint16                                TurnInstanceID;                               ///< Offset 0x0008 Type _MJVTBL_UINT16
            int8                                  PetBattleEffectType;                          ///< Offset 0x000A Type _MJVTBL_INT8
            uint8                                 CasterPBOID;                                  ///< Offset 0x000B Type _MJVTBL_UINT8
            uint8                                 StackDepth;                                   ///< Offset 0x000C Type _MJVTBL_UINT8
            std::vector<JamPetBattleEffectTarget> Targets;                                      ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffectTarget>::MJVTBL
        };

        struct JamPetBattleActiveAbility
        {
            int32 AbilityID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            int16 CooldownRemaining;        ///< Offset 0x0004 Type _MJVTBL_INT16
            int16 LockdownRemaining;        ///< Offset 0x0006 Type _MJVTBL_INT16
            int8  AbilityIndex;             ///< Offset 0x0008 Type _MJVTBL_INT8
            uint8 Pboid;                    ///< Offset 0x0009 Type _MJVTBL_UINT8
        };

        int32                                  CurRound;                                      ///< Offset 0x0000 Type _MJVTBL_INT32
        int8                                   NextPetBattleState;                            ///< Offset 0x0004 Type _MJVTBL_INT8
        std::vector<JamPetBattleEffect>        Effects;                                       ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffect>::MJVTBL
        std::vector<int8>                      PetXDied;                                      ///< Offset 0x0020 Type MakeMJVTblForArrayOf<signedchar,&(MJVTBL_INT8)>::MJVTBL
        std::vector<JamPetBattleActiveAbility> Cooldowns;                                     ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAbility>::MJVTBL
        uint8                                  NextInputFlags[2];                             ///< Offset 0x0050 Type MakeMJVTblForFixedArrayOf<unsignedchar,2,&(MJVTBL_UINT8)>::MJVTBL
        int8                                   NextTrapStatus[2];                             ///< Offset 0x0052 Type MakeMJVTblForFixedArrayOf<signedchar,2,&(MJVTBL_INT8)>::MJVTBL
        uint16                                 RoundTimeSecs[2];                              ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOf<unsignedshort,2,&(MJVTBL_UINT16)>::MJVTBL
    };

    MsgData_Struct MsgData;                ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64         SceneObjectGUID;        ///< Offset 0x0058 Type _MJVTBL_UINT64
};

///< SMSG_SCENE_OBJECT_PET_BATTLE_ROUND_RESULT
struct ClientSceneObjectPetBattleRoundResult
{
    struct MsgData_Struct
    {
        struct JamPetBattleEffect
        {
            struct JamPetBattleEffectTarget
            {
                JAM_PET_BATTLE_EFFECT_TARGET_EX Type;                                   ///< Offset 0x0000 Type _MJVTBL_JAM_PET_BATTLE_EFFECT_TARGET_EX
                uint8                           Petx;                                   ///< Offset 0x0004 Type _MJVTBL_UINT8
                uint32                          AuraInstanceID;                         ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                          AuraAbilityID;                          ///< Offset 0x000C Type _MJVTBL_UINT32
                int32                           RoundsRemaining;                        ///< Offset 0x0010 Type _MJVTBL_INT32
                int32                           CurrentRound;                           ///< Offset 0x0014 Type _MJVTBL_INT32
                uint32                          StateID;                                ///< Offset 0x0018 Type _MJVTBL_UINT32
                int32                           StateValue;                             ///< Offset 0x001C Type _MJVTBL_INT32
                int32                           Health;                                 ///< Offset 0x0020 Type _MJVTBL_INT32
                int32                           NewStatValue;                           ///< Offset 0x0024 Type _MJVTBL_INT32
                int32                           TriggerAbilityID;                       ///< Offset 0x0028 Type _MJVTBL_INT32
                int32                           ChangedAbilityID;                       ///< Offset 0x002C Type _MJVTBL_INT32
                int32                           CooldownRemaining;                      ///< Offset 0x0030 Type _MJVTBL_INT32
                int32                           LockdownRemaining;                      ///< Offset 0x0034 Type _MJVTBL_INT32
                int32                           BroadcastTextID;                        ///< Offset 0x0038 Type _MJVTBL_INT32
            };

            uint32                                AbilityEffectID;                              ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint16                                Flags;                                        ///< Offset 0x0004 Type _MJVTBL_UINT16
            uint16                                SourceAuraInstanceID;                         ///< Offset 0x0006 Type _MJVTBL_UINT16
            uint16                                TurnInstanceID;                               ///< Offset 0x0008 Type _MJVTBL_UINT16
            int8                                  PetBattleEffectType;                          ///< Offset 0x000A Type _MJVTBL_INT8
            uint8                                 CasterPBOID;                                  ///< Offset 0x000B Type _MJVTBL_UINT8
            uint8                                 StackDepth;                                   ///< Offset 0x000C Type _MJVTBL_UINT8
            std::vector<JamPetBattleEffectTarget> Targets;                                      ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffectTarget>::MJVTBL
        };

        struct JamPetBattleActiveAbility
        {
            int32 AbilityID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            int16 CooldownRemaining;        ///< Offset 0x0004 Type _MJVTBL_INT16
            int16 LockdownRemaining;        ///< Offset 0x0006 Type _MJVTBL_INT16
            int8  AbilityIndex;             ///< Offset 0x0008 Type _MJVTBL_INT8
            uint8 Pboid;                    ///< Offset 0x0009 Type _MJVTBL_UINT8
        };

        int32                                  CurRound;                                      ///< Offset 0x0000 Type _MJVTBL_INT32
        int8                                   NextPetBattleState;                            ///< Offset 0x0004 Type _MJVTBL_INT8
        std::vector<JamPetBattleEffect>        Effects;                                       ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffect>::MJVTBL
        std::vector<int8>                      PetXDied;                                      ///< Offset 0x0020 Type MakeMJVTblForArrayOf<signedchar,&(MJVTBL_INT8)>::MJVTBL
        std::vector<JamPetBattleActiveAbility> Cooldowns;                                     ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAbility>::MJVTBL
        uint8                                  NextInputFlags[2];                             ///< Offset 0x0050 Type MakeMJVTblForFixedArrayOf<unsignedchar,2,&(MJVTBL_UINT8)>::MJVTBL
        int8                                   NextTrapStatus[2];                             ///< Offset 0x0052 Type MakeMJVTblForFixedArrayOf<signedchar,2,&(MJVTBL_INT8)>::MJVTBL
        uint16                                 RoundTimeSecs[2];                              ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOf<unsignedshort,2,&(MJVTBL_UINT16)>::MJVTBL
    };

    MsgData_Struct MsgData;                ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64         SceneObjectGUID;        ///< Offset 0x0058 Type _MJVTBL_UINT64
};

///< SMSG_SCENE_OBJECT_PET_BATTLE_REPLACEMENTS_MADE
struct ClientSceneObjectPetBattleReplacementsMade
{
    struct MsgData_Struct
    {
        struct JamPetBattleEffect
        {
            struct JamPetBattleEffectTarget
            {
                JAM_PET_BATTLE_EFFECT_TARGET_EX Type;                                   ///< Offset 0x0000 Type _MJVTBL_JAM_PET_BATTLE_EFFECT_TARGET_EX
                uint8                           Petx;                                   ///< Offset 0x0004 Type _MJVTBL_UINT8
                uint32                          AuraInstanceID;                         ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                          AuraAbilityID;                          ///< Offset 0x000C Type _MJVTBL_UINT32
                int32                           RoundsRemaining;                        ///< Offset 0x0010 Type _MJVTBL_INT32
                int32                           CurrentRound;                           ///< Offset 0x0014 Type _MJVTBL_INT32
                uint32                          StateID;                                ///< Offset 0x0018 Type _MJVTBL_UINT32
                int32                           StateValue;                             ///< Offset 0x001C Type _MJVTBL_INT32
                int32                           Health;                                 ///< Offset 0x0020 Type _MJVTBL_INT32
                int32                           NewStatValue;                           ///< Offset 0x0024 Type _MJVTBL_INT32
                int32                           TriggerAbilityID;                       ///< Offset 0x0028 Type _MJVTBL_INT32
                int32                           ChangedAbilityID;                       ///< Offset 0x002C Type _MJVTBL_INT32
                int32                           CooldownRemaining;                      ///< Offset 0x0030 Type _MJVTBL_INT32
                int32                           LockdownRemaining;                      ///< Offset 0x0034 Type _MJVTBL_INT32
                int32                           BroadcastTextID;                        ///< Offset 0x0038 Type _MJVTBL_INT32
            };

            uint32                                AbilityEffectID;                              ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint16                                Flags;                                        ///< Offset 0x0004 Type _MJVTBL_UINT16
            uint16                                SourceAuraInstanceID;                         ///< Offset 0x0006 Type _MJVTBL_UINT16
            uint16                                TurnInstanceID;                               ///< Offset 0x0008 Type _MJVTBL_UINT16
            int8                                  PetBattleEffectType;                          ///< Offset 0x000A Type _MJVTBL_INT8
            uint8                                 CasterPBOID;                                  ///< Offset 0x000B Type _MJVTBL_UINT8
            uint8                                 StackDepth;                                   ///< Offset 0x000C Type _MJVTBL_UINT8
            std::vector<JamPetBattleEffectTarget> Targets;                                      ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffectTarget>::MJVTBL
        };

        struct JamPetBattleActiveAbility
        {
            int32 AbilityID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            int16 CooldownRemaining;        ///< Offset 0x0004 Type _MJVTBL_INT16
            int16 LockdownRemaining;        ///< Offset 0x0006 Type _MJVTBL_INT16
            int8  AbilityIndex;             ///< Offset 0x0008 Type _MJVTBL_INT8
            uint8 Pboid;                    ///< Offset 0x0009 Type _MJVTBL_UINT8
        };

        int32                                  CurRound;                                      ///< Offset 0x0000 Type _MJVTBL_INT32
        int8                                   NextPetBattleState;                            ///< Offset 0x0004 Type _MJVTBL_INT8
        std::vector<JamPetBattleEffect>        Effects;                                       ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffect>::MJVTBL
        std::vector<int8>                      PetXDied;                                      ///< Offset 0x0020 Type MakeMJVTblForArrayOf<signedchar,&(MJVTBL_INT8)>::MJVTBL
        std::vector<JamPetBattleActiveAbility> Cooldowns;                                     ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAbility>::MJVTBL
        uint8                                  NextInputFlags[2];                             ///< Offset 0x0050 Type MakeMJVTblForFixedArrayOf<unsignedchar,2,&(MJVTBL_UINT8)>::MJVTBL
        int8                                   NextTrapStatus[2];                             ///< Offset 0x0052 Type MakeMJVTblForFixedArrayOf<signedchar,2,&(MJVTBL_INT8)>::MJVTBL
        uint16                                 RoundTimeSecs[2];                              ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOf<unsignedshort,2,&(MJVTBL_UINT16)>::MJVTBL
    };

    MsgData_Struct MsgData;                ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64         SceneObjectGUID;        ///< Offset 0x0058 Type _MJVTBL_UINT64
};

///< SMSG_SCENE_OBJECT_PET_BATTLE_FINAL_ROUND
struct ClientSceneObjectPetBattleFinalRound
{
    struct MsgData_Struct
    {
        struct JamPetBattleFinalPet
        {
            bool   Captured;            ///< Offset 0x0000 Type _MJVTBL_BOOL
            bool   Caged;               ///< Offset 0x0001 Type _MJVTBL_BOOL
            bool   AwardedXP;           ///< Offset 0x0002 Type _MJVTBL_BOOL
            bool   SeenAction;          ///< Offset 0x0003 Type _MJVTBL_BOOL
            uint16 Level;               ///< Offset 0x0004 Type _MJVTBL_UINT16
            uint16 Xp;                  ///< Offset 0x0006 Type _MJVTBL_UINT16
            int32  Health;              ///< Offset 0x0008 Type _MJVTBL_INT32
            int32  MaxHealth;           ///< Offset 0x000C Type _MJVTBL_INT32
            uint16 InitialLevel;        ///< Offset 0x0010 Type _MJVTBL_UINT16
            uint8  Pboid;               ///< Offset 0x0012 Type _MJVTBL_UINT8
        };

        bool                              Abandoned;                                ///< Offset 0x0000 Type _MJVTBL_BOOL
        bool                              PvpBattle;                                ///< Offset 0x0001 Type _MJVTBL_BOOL
        std::vector<JamPetBattleFinalPet> Pets;                                     ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamPetBattleFinalPet>::MJVTBL
        bool                              Winners[2];                               ///< Offset 0x0020 Type MakeMJVTblForFixedArrayOf<bool,2,&(MJVTBL_BOOL)>::MJVTBL
        int32                             NpcCreatureID[2];                         ///< Offset 0x0024 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
    };

    uint64         SceneObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    MsgData_Struct MsgData;                ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_SCENE_OBJECT_PET_BATTLE_FINISHED
struct ClientSceneObjectPetBattleFinished
{
    uint64 SceneObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_SEND_ALL_ITEM_DURABILITY
struct ClientSendAllItemDurability
{
    std::vector<int32> MaxDurability;             ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_BATTLE_PET_UPDATES
struct ClientBattlePetUpdates
{
    struct JamClientBattlePet
    {
        struct JamClientBattlePetOwnerInfo
        {
            uint64 Guid;                      ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 PlayerVirtualRealm;        ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 PlayerNativeRealm;         ///< Offset 0x000C Type _MJVTBL_UINT32
        };

        uint64                                BattlePetGUID;                                ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32                                 SpeciesID;                                    ///< Offset 0x0008 Type _MJVTBL_INT32
        int32                                 CreatureID;                                   ///< Offset 0x000C Type _MJVTBL_INT32
        int32                                 DisplayID;                                    ///< Offset 0x0010 Type _MJVTBL_INT32
        uint16                                BreedID;                                      ///< Offset 0x0014 Type _MJVTBL_UINT16
        uint16                                Level;                                        ///< Offset 0x0016 Type _MJVTBL_UINT16
        uint16                                Xp;                                           ///< Offset 0x0018 Type _MJVTBL_UINT16
        uint16                                BattlePetDBFlags;                             ///< Offset 0x001A Type _MJVTBL_UINT16
        int32                                 Power;                                        ///< Offset 0x001C Type _MJVTBL_INT32
        int32                                 Health;                                       ///< Offset 0x0020 Type _MJVTBL_INT32
        int32                                 MaxHealth;                                    ///< Offset 0x0024 Type _MJVTBL_INT32
        int32                                 Speed;                                        ///< Offset 0x0028 Type _MJVTBL_INT32
        std::string                           CustomName;                                   ///< Offset 0x002C Type _MJVTBL_STRING
        Optional<JamClientBattlePetOwnerInfo> OwnerInfo;                                    ///< Offset 0x0070 Type MakeMJVTblForOptionalStruct<JamClientBattlePetOwnerInfo>::MJVTBL
        bool                                  NoRename;                                     ///< Offset 0x0088 Type _MJVTBL_BOOL
        uint8                                 BreedQuality;                                 ///< Offset 0x0089 Type _MJVTBL_UINT8
    };

    bool                            AddedPet;                               ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<JamClientBattlePet> Pets;                                   ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamClientBattlePet>::MJVTBL
};

///< SMSG_BATTLE_PET_TRAP_LEVEL
struct ClientBattlePetTrapLevel
{
    int16 TrapLevel;        ///< Offset 0x0000 Type _MJVTBL_INT16
};

///< SMSG_PET_BATTLE_SLOT_UPDATES
struct ClientPetBattleSlotUpdates
{
    struct JamClientPetBattleSlot
    {
        uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  CollarID;             ///< Offset 0x0008 Type _MJVTBL_INT32
        uint8  SlotIndex;            ///< Offset 0x000C Type _MJVTBL_UINT8
        bool   Locked;               ///< Offset 0x000D Type _MJVTBL_BOOL
    };

    bool                                NewSlotUnlocked;                            ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool                                AutoSlotted;                                ///< Offset 0x0001 Type _MJVTBL_BOOL
    std::vector<JamClientPetBattleSlot> Slots;                                      ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamClientPetBattleSlot>::MJVTBL
};

///< SMSG_BATTLE_PET_JOURNAL_LOCK_ACQUIRED
struct ClientBattlePetJournalLockAcquired
{
};

///< SMSG_BATTLE_PET_JOURNAL_LOCK_DENIED
struct ClientBattlePetJournalLockDenied
{
};

///< SMSG_BATTLE_PET_JOURNAL
struct ClientBattlePetJournal
{
    struct JamClientBattlePet
    {
        struct JamClientBattlePetOwnerInfo
        {
            uint64 Guid;                      ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 PlayerVirtualRealm;        ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 PlayerNativeRealm;         ///< Offset 0x000C Type _MJVTBL_UINT32
        };

        uint64                                BattlePetGUID;                                ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32                                 SpeciesID;                                    ///< Offset 0x0008 Type _MJVTBL_INT32
        int32                                 CreatureID;                                   ///< Offset 0x000C Type _MJVTBL_INT32
        int32                                 DisplayID;                                    ///< Offset 0x0010 Type _MJVTBL_INT32
        uint16                                BreedID;                                      ///< Offset 0x0014 Type _MJVTBL_UINT16
        uint16                                Level;                                        ///< Offset 0x0016 Type _MJVTBL_UINT16
        uint16                                Xp;                                           ///< Offset 0x0018 Type _MJVTBL_UINT16
        uint16                                BattlePetDBFlags;                             ///< Offset 0x001A Type _MJVTBL_UINT16
        int32                                 Power;                                        ///< Offset 0x001C Type _MJVTBL_INT32
        int32                                 Health;                                       ///< Offset 0x0020 Type _MJVTBL_INT32
        int32                                 MaxHealth;                                    ///< Offset 0x0024 Type _MJVTBL_INT32
        int32                                 Speed;                                        ///< Offset 0x0028 Type _MJVTBL_INT32
        std::string                           CustomName;                                   ///< Offset 0x002C Type _MJVTBL_STRING
        Optional<JamClientBattlePetOwnerInfo> OwnerInfo;                                    ///< Offset 0x0070 Type MakeMJVTblForOptionalStruct<JamClientBattlePetOwnerInfo>::MJVTBL
        bool                                  NoRename;                                     ///< Offset 0x0088 Type _MJVTBL_BOOL
        uint8                                 BreedQuality;                                 ///< Offset 0x0089 Type _MJVTBL_UINT8
    };

    struct JamClientPetBattleSlot
    {
        uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  CollarID;             ///< Offset 0x0008 Type _MJVTBL_INT32
        uint8  SlotIndex;            ///< Offset 0x000C Type _MJVTBL_UINT8
        bool   Locked;               ///< Offset 0x000D Type _MJVTBL_BOOL
    };

    bool                                HasJournalLock;                             ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<JamClientBattlePet>     Pets;                                       ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamClientBattlePet>::MJVTBL
    int16                               TrapLevel;                                  ///< Offset 0x0020 Type _MJVTBL_INT16
    std::vector<JamClientPetBattleSlot> Slots;                                      ///< Offset 0x0028 Type MakeMJVTblForArrayOfStruct<JamClientPetBattleSlot>::MJVTBL
};

///< SMSG_BATTLE_PET_DELETED
struct ClientBattlePetDeleted
{
    uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_BATTLE_PET_REVOKED
struct ClientBattlePetRevoked
{
    uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_BATTLE_PET_RESTORED
struct ClientBattlePetRestored
{
    uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_BATTLE_PETS_HEALED
struct ClientBattlePetsHealed
{
};

///< SMSG_BATTLE_PET_LICENSE_CHANGED
struct ClientBattlePetLicenseChanged
{
};

///< SMSG_PARTY_UPDATE
struct ClientPartyUpdate
{
    struct JamCliPartyLootSettings
    {
        uint64 LootMaster;           ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint8  LootMethod;           ///< Offset 0x0008 Type _MJVTBL_UINT8
        uint8  LootThreshold;        ///< Offset 0x0009 Type _MJVTBL_UINT8
    };

    struct JamCliPartyLFGInfo
    {
        uint8  MyLfgFlags;                ///< Offset 0x0000 Type _MJVTBL_UINT8
        uint32 LfgSlot;                   ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint32 MyLfgRandomSlot;           ///< Offset 0x0008 Type _MJVTBL_UINT32
        bool   LfgAborted;                ///< Offset 0x000C Type _MJVTBL_BOOL
        uint8  MyLfgPartialClear;         ///< Offset 0x000D Type _MJVTBL_UINT8
        float  MyLfgGearDiff;             ///< Offset 0x0010 Type _MJVTBL_FLOAT
        uint8  MyLfgStrangerCount;        ///< Offset 0x0014 Type _MJVTBL_UINT8
        uint8  MyLfgKickVoteCount;        ///< Offset 0x0015 Type _MJVTBL_UINT8
        uint8  LfgBootCount;              ///< Offset 0x0016 Type _MJVTBL_UINT8
        bool   MyLfgFirstReward;          ///< Offset 0x0017 Type _MJVTBL_BOOL
    };

    struct JamCliPartyPlayerInfo
    {
        std::string Name;                 ///< Offset 0x0000 Type _MJVTBL_STRING
        uint64      Guid;                 ///< Offset 0x0038 Type _MJVTBL_UINT64
        uint8       Connected;            ///< Offset 0x0040 Type _MJVTBL_UINT8
        uint8       Subgroup;             ///< Offset 0x0041 Type _MJVTBL_UINT8
        uint8       Flags;                ///< Offset 0x0042 Type _MJVTBL_UINT8
        uint8       RolesAssigned;        ///< Offset 0x0043 Type _MJVTBL_UINT8
    };

    struct JamCliPartyDifficultySettings
    {
        uint32 DungeonDifficultyID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32 RaidDifficultyID;           ///< Offset 0x0004 Type _MJVTBL_UINT32
    };

    uint8                                   PartyFlags;                                     ///< Offset 0x0000 Type _MJVTBL_UINT8
    Optional<JamCliPartyLootSettings>       LootSettings;                                   ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliPartyLootSettings>::MJVTBL
    Optional<JamCliPartyLFGInfo>            LfgInfo;                                        ///< Offset 0x0020 Type MakeMJVTblForOptionalStruct<JamCliPartyLFGInfo>::MJVTBL
    uint64                                  LeaderGUID;                                     ///< Offset 0x0040 Type _MJVTBL_UINT64
    uint8                                   PartyType;                                      ///< Offset 0x0048 Type _MJVTBL_UINT8
    uint64                                  PartyGUID;                                      ///< Offset 0x0050 Type _MJVTBL_UINT64
    uint8                                   PartyIndex;                                     ///< Offset 0x0058 Type _MJVTBL_UINT8
    std::vector<JamCliPartyPlayerInfo>      PlayerList;                                     ///< Offset 0x0060 Type MakeMJVTblForArrayOfStruct<JamCliPartyPlayerInfo>::MJVTBL
    uint32                                  SequenceNum;                                    ///< Offset 0x0078 Type _MJVTBL_UINT32
    Optional<JamCliPartyDifficultySettings> DifficultySettings;                             ///< Offset 0x007C Type MakeMJVTblForOptionalStruct<JamCliPartyDifficultySettings>::MJVTBL
    int32                                   MyIndex;                                        ///< Offset 0x0088 Type _MJVTBL_INT32
};

///< SMSG_READY_CHECK_STARTED
struct ClientReadyCheckStarted
{
    uint8  PartyIndex;           ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint64 InitiatorGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 PartyGUID;            ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint32 Duration;             ///< Offset 0x0018 Type _MJVTBL_TIME_T
};

///< SMSG_READY_CHECK_RESPONSE
struct ClientReadyCheckResponse
{
    bool   IsReady;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 Player;           ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 PartyGUID;        ///< Offset 0x0010 Type _MJVTBL_UINT64
};

///< SMSG_READY_CHECK_COMPLETED
struct ClientReadyCheckCompleted
{
    uint64 PartyGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  PartyIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< SMSG_PET_BATTLE_REQUEST_FAILED
struct ClientPetBattleRequestFailed
{
    uint8 Reason;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_PET_BATTLE_PVPCHALLENGE
struct ClientPetBattlePVPChallenge
{
    struct Location_Struct
    {
        int32        LocationResult;            ///< Offset 0x0000 Type _MJVTBL_INT32
        G3D::Vector3 BattleOrigin;              ///< Offset 0x0004 Type _MJVTBL_V3
        float        BattleFacing;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
        G3D::Vector3 PlayerPositions[2];        ///< Offset 0x0014 Type MakeMJVTblForFixedArrayOf<C3Vector,2,&(MJVTBL_V3)>::MJVTBL
    };

    uint64          ChallengerGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    Location_Struct Location;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_PET_BATTLE_FINALIZE_LOCATION
struct ClientPetBattleFinalizeLocation
{
    struct Location_Struct
    {
        int32        LocationResult;            ///< Offset 0x0000 Type _MJVTBL_INT32
        G3D::Vector3 BattleOrigin;              ///< Offset 0x0004 Type _MJVTBL_V3
        float        BattleFacing;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
        G3D::Vector3 PlayerPositions[2];        ///< Offset 0x0014 Type MakeMJVTblForFixedArrayOf<C3Vector,2,&(MJVTBL_V3)>::MJVTBL
    };

    Location_Struct Location;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_PET_BATTLE_INITIAL_UPDATE
struct ClientPetBattleInitialUpdate
{
    struct MsgData_Struct
    {
        struct JamPetBattlePlayerUpdate
        {
            struct JamPetBattlePetUpdate
            {
                struct JamPetBattleActiveAbility
                {
                    int32 AbilityID;                ///< Offset 0x0000 Type _MJVTBL_INT32
                    int16 CooldownRemaining;        ///< Offset 0x0004 Type _MJVTBL_INT16
                    int16 LockdownRemaining;        ///< Offset 0x0006 Type _MJVTBL_INT16
                    int8  AbilityIndex;             ///< Offset 0x0008 Type _MJVTBL_INT8
                    uint8 Pboid;                    ///< Offset 0x0009 Type _MJVTBL_UINT8
                };

                struct JamPetBattleActiveAura
                {
                    int32  AbilityID;              ///< Offset 0x0000 Type _MJVTBL_INT32
                    uint32 InstanceID;             ///< Offset 0x0004 Type _MJVTBL_UINT32
                    int32  RoundsRemaining;        ///< Offset 0x0008 Type _MJVTBL_INT32
                    int32  CurrentRound;           ///< Offset 0x000C Type _MJVTBL_INT32
                    uint8  CasterPBOID;            ///< Offset 0x0010 Type _MJVTBL_UINT8
                };

                struct JamPetBattleActiveState
                {
                    uint32 StateID;           ///< Offset 0x0000 Type _MJVTBL_UINT32
                    int32  StateValue;        ///< Offset 0x0004 Type _MJVTBL_INT32
                };

                uint64                                 BattlePetGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                int32                                  SpeciesID;                                     ///< Offset 0x0008 Type _MJVTBL_INT32
                int32                                  DisplayID;                                     ///< Offset 0x000C Type _MJVTBL_INT32
                int32                                  CollarID;                                      ///< Offset 0x0010 Type _MJVTBL_INT32
                int16                                  Level;                                         ///< Offset 0x0014 Type _MJVTBL_INT16
                int16                                  Xp;                                            ///< Offset 0x0016 Type _MJVTBL_INT16
                int32                                  CurHealth;                                     ///< Offset 0x0018 Type _MJVTBL_INT32
                int32                                  MaxHealth;                                     ///< Offset 0x001C Type _MJVTBL_INT32
                int32                                  Power;                                         ///< Offset 0x0020 Type _MJVTBL_INT32
                int32                                  Speed;                                         ///< Offset 0x0024 Type _MJVTBL_INT32
                int32                                  NpcTeamMemberID;                               ///< Offset 0x0028 Type _MJVTBL_INT32
                uint16                                 BreedQuality;                                  ///< Offset 0x002C Type _MJVTBL_UINT16
                uint16                                 StatusFlags;                                   ///< Offset 0x002E Type _MJVTBL_UINT16
                int8                                   Slot;                                          ///< Offset 0x0030 Type _MJVTBL_INT8
                std::string                            CustomName;                                    ///< Offset 0x0031 Type _MJVTBL_STRING
                std::vector<JamPetBattleActiveAbility> Abilities;                                     ///< Offset 0x0078 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAbility>::MJVTBL
                std::vector<JamPetBattleActiveAura>    Auras;                                         ///< Offset 0x0090 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAura>::MJVTBL
                std::vector<JamPetBattleActiveState>   States;                                        ///< Offset 0x00A8 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveState>::MJVTBL
            };

            uint64                             CharacterID;                               ///< Offset 0x0000 Type _MJVTBL_UINT64
            int32                              TrapAbilityID;                             ///< Offset 0x0008 Type _MJVTBL_INT32
            int32                              TrapStatus;                                ///< Offset 0x000C Type _MJVTBL_INT32
            uint16                             RoundTimeSecs;                             ///< Offset 0x0010 Type _MJVTBL_UINT16
            std::vector<JamPetBattlePetUpdate> Pets;                                      ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamPetBattlePetUpdate>::MJVTBL
            int8                               FrontPet;                                  ///< Offset 0x0030 Type _MJVTBL_INT8
            uint8                              InputFlags;                                ///< Offset 0x0031 Type _MJVTBL_UINT8
        };

        struct JamPetBattleEnviroUpdate
        {
            struct JamPetBattleActiveAura
            {
                int32  AbilityID;              ///< Offset 0x0000 Type _MJVTBL_INT32
                uint32 InstanceID;             ///< Offset 0x0004 Type _MJVTBL_UINT32
                int32  RoundsRemaining;        ///< Offset 0x0008 Type _MJVTBL_INT32
                int32  CurrentRound;           ///< Offset 0x000C Type _MJVTBL_INT32
                uint8  CasterPBOID;            ///< Offset 0x0010 Type _MJVTBL_UINT8
            };

            struct JamPetBattleActiveState
            {
                uint32 StateID;           ///< Offset 0x0000 Type _MJVTBL_UINT32
                int32  StateValue;        ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            std::vector<JamPetBattleActiveAura>  Auras;                                       ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAura>::MJVTBL
            std::vector<JamPetBattleActiveState> States;                                      ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveState>::MJVTBL
        };

        uint16                   WaitingForFrontPetsMaxSecs;        ///< Offset 0x0000 Type _MJVTBL_UINT16
        uint16                   PvpMaxRoundTime;                   ///< Offset 0x0002 Type _MJVTBL_UINT16
        int32                    CurRound;                          ///< Offset 0x0004 Type _MJVTBL_INT32
        uint32                   NpcCreatureID;                     ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                   NpcDisplayID;                      ///< Offset 0x000C Type _MJVTBL_UINT32
        int8                     CurPetBattleState;                 ///< Offset 0x0010 Type _MJVTBL_INT8
        uint8                    ForfeitPenalty;                    ///< Offset 0x0011 Type _MJVTBL_UINT8
        uint64                   InitialWildPetGUID;                ///< Offset 0x0018 Type _MJVTBL_UINT64
        bool                     IsPVP;                             ///< Offset 0x0020 Type _MJVTBL_BOOL
        bool                     CanAwardXP;                        ///< Offset 0x0021 Type _MJVTBL_BOOL
        JamPetBattlePlayerUpdate Players[2];                        ///< Offset 0x0028 Type MakeMJVTblForFixedArrayOfStruct<JamPetBattlePlayerUpdate,2>::MJVTBL
        JamPetBattleEnviroUpdate Enviros[3];                        ///< Offset 0x0098 Type MakeMJVTblForFixedArrayOfStruct<JamPetBattleEnviroUpdate,3>::MJVTBL
    };

    MsgData_Struct MsgData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_PET_BATTLE_FIRST_ROUND
struct ClientPetBattleFirstRound
{
    struct MsgData_Struct
    {
        struct JamPetBattleEffect
        {
            struct JamPetBattleEffectTarget
            {
                JAM_PET_BATTLE_EFFECT_TARGET_EX Type;                                   ///< Offset 0x0000 Type _MJVTBL_JAM_PET_BATTLE_EFFECT_TARGET_EX
                uint8                           Petx;                                   ///< Offset 0x0004 Type _MJVTBL_UINT8
                uint32                          AuraInstanceID;                         ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                          AuraAbilityID;                          ///< Offset 0x000C Type _MJVTBL_UINT32
                int32                           RoundsRemaining;                        ///< Offset 0x0010 Type _MJVTBL_INT32
                int32                           CurrentRound;                           ///< Offset 0x0014 Type _MJVTBL_INT32
                uint32                          StateID;                                ///< Offset 0x0018 Type _MJVTBL_UINT32
                int32                           StateValue;                             ///< Offset 0x001C Type _MJVTBL_INT32
                int32                           Health;                                 ///< Offset 0x0020 Type _MJVTBL_INT32
                int32                           NewStatValue;                           ///< Offset 0x0024 Type _MJVTBL_INT32
                int32                           TriggerAbilityID;                       ///< Offset 0x0028 Type _MJVTBL_INT32
                int32                           ChangedAbilityID;                       ///< Offset 0x002C Type _MJVTBL_INT32
                int32                           CooldownRemaining;                      ///< Offset 0x0030 Type _MJVTBL_INT32
                int32                           LockdownRemaining;                      ///< Offset 0x0034 Type _MJVTBL_INT32
                int32                           BroadcastTextID;                        ///< Offset 0x0038 Type _MJVTBL_INT32
            };

            uint32                                AbilityEffectID;                              ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint16                                Flags;                                        ///< Offset 0x0004 Type _MJVTBL_UINT16
            uint16                                SourceAuraInstanceID;                         ///< Offset 0x0006 Type _MJVTBL_UINT16
            uint16                                TurnInstanceID;                               ///< Offset 0x0008 Type _MJVTBL_UINT16
            int8                                  PetBattleEffectType;                          ///< Offset 0x000A Type _MJVTBL_INT8
            uint8                                 CasterPBOID;                                  ///< Offset 0x000B Type _MJVTBL_UINT8
            uint8                                 StackDepth;                                   ///< Offset 0x000C Type _MJVTBL_UINT8
            std::vector<JamPetBattleEffectTarget> Targets;                                      ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffectTarget>::MJVTBL
        };

        struct JamPetBattleActiveAbility
        {
            int32 AbilityID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            int16 CooldownRemaining;        ///< Offset 0x0004 Type _MJVTBL_INT16
            int16 LockdownRemaining;        ///< Offset 0x0006 Type _MJVTBL_INT16
            int8  AbilityIndex;             ///< Offset 0x0008 Type _MJVTBL_INT8
            uint8 Pboid;                    ///< Offset 0x0009 Type _MJVTBL_UINT8
        };

        int32                                  CurRound;                                      ///< Offset 0x0000 Type _MJVTBL_INT32
        int8                                   NextPetBattleState;                            ///< Offset 0x0004 Type _MJVTBL_INT8
        std::vector<JamPetBattleEffect>        Effects;                                       ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffect>::MJVTBL
        std::vector<int8>                      PetXDied;                                      ///< Offset 0x0020 Type MakeMJVTblForArrayOf<signedchar,&(MJVTBL_INT8)>::MJVTBL
        std::vector<JamPetBattleActiveAbility> Cooldowns;                                     ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAbility>::MJVTBL
        uint8                                  NextInputFlags[2];                             ///< Offset 0x0050 Type MakeMJVTblForFixedArrayOf<unsignedchar,2,&(MJVTBL_UINT8)>::MJVTBL
        int8                                   NextTrapStatus[2];                             ///< Offset 0x0052 Type MakeMJVTblForFixedArrayOf<signedchar,2,&(MJVTBL_INT8)>::MJVTBL
        uint16                                 RoundTimeSecs[2];                              ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOf<unsignedshort,2,&(MJVTBL_UINT16)>::MJVTBL
    };

    MsgData_Struct MsgData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_PET_BATTLE_ROUND_RESULT
struct ClientPetBattleRoundResult
{
    struct MsgData_Struct
    {
        struct JamPetBattleEffect
        {
            struct JamPetBattleEffectTarget
            {
                JAM_PET_BATTLE_EFFECT_TARGET_EX Type;                                   ///< Offset 0x0000 Type _MJVTBL_JAM_PET_BATTLE_EFFECT_TARGET_EX
                uint8                           Petx;                                   ///< Offset 0x0004 Type _MJVTBL_UINT8
                uint32                          AuraInstanceID;                         ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                          AuraAbilityID;                          ///< Offset 0x000C Type _MJVTBL_UINT32
                int32                           RoundsRemaining;                        ///< Offset 0x0010 Type _MJVTBL_INT32
                int32                           CurrentRound;                           ///< Offset 0x0014 Type _MJVTBL_INT32
                uint32                          StateID;                                ///< Offset 0x0018 Type _MJVTBL_UINT32
                int32                           StateValue;                             ///< Offset 0x001C Type _MJVTBL_INT32
                int32                           Health;                                 ///< Offset 0x0020 Type _MJVTBL_INT32
                int32                           NewStatValue;                           ///< Offset 0x0024 Type _MJVTBL_INT32
                int32                           TriggerAbilityID;                       ///< Offset 0x0028 Type _MJVTBL_INT32
                int32                           ChangedAbilityID;                       ///< Offset 0x002C Type _MJVTBL_INT32
                int32                           CooldownRemaining;                      ///< Offset 0x0030 Type _MJVTBL_INT32
                int32                           LockdownRemaining;                      ///< Offset 0x0034 Type _MJVTBL_INT32
                int32                           BroadcastTextID;                        ///< Offset 0x0038 Type _MJVTBL_INT32
            };

            uint32                                AbilityEffectID;                              ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint16                                Flags;                                        ///< Offset 0x0004 Type _MJVTBL_UINT16
            uint16                                SourceAuraInstanceID;                         ///< Offset 0x0006 Type _MJVTBL_UINT16
            uint16                                TurnInstanceID;                               ///< Offset 0x0008 Type _MJVTBL_UINT16
            int8                                  PetBattleEffectType;                          ///< Offset 0x000A Type _MJVTBL_INT8
            uint8                                 CasterPBOID;                                  ///< Offset 0x000B Type _MJVTBL_UINT8
            uint8                                 StackDepth;                                   ///< Offset 0x000C Type _MJVTBL_UINT8
            std::vector<JamPetBattleEffectTarget> Targets;                                      ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffectTarget>::MJVTBL
        };

        struct JamPetBattleActiveAbility
        {
            int32 AbilityID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            int16 CooldownRemaining;        ///< Offset 0x0004 Type _MJVTBL_INT16
            int16 LockdownRemaining;        ///< Offset 0x0006 Type _MJVTBL_INT16
            int8  AbilityIndex;             ///< Offset 0x0008 Type _MJVTBL_INT8
            uint8 Pboid;                    ///< Offset 0x0009 Type _MJVTBL_UINT8
        };

        int32                                  CurRound;                                      ///< Offset 0x0000 Type _MJVTBL_INT32
        int8                                   NextPetBattleState;                            ///< Offset 0x0004 Type _MJVTBL_INT8
        std::vector<JamPetBattleEffect>        Effects;                                       ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffect>::MJVTBL
        std::vector<int8>                      PetXDied;                                      ///< Offset 0x0020 Type MakeMJVTblForArrayOf<signedchar,&(MJVTBL_INT8)>::MJVTBL
        std::vector<JamPetBattleActiveAbility> Cooldowns;                                     ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAbility>::MJVTBL
        uint8                                  NextInputFlags[2];                             ///< Offset 0x0050 Type MakeMJVTblForFixedArrayOf<unsignedchar,2,&(MJVTBL_UINT8)>::MJVTBL
        int8                                   NextTrapStatus[2];                             ///< Offset 0x0052 Type MakeMJVTblForFixedArrayOf<signedchar,2,&(MJVTBL_INT8)>::MJVTBL
        uint16                                 RoundTimeSecs[2];                              ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOf<unsignedshort,2,&(MJVTBL_UINT16)>::MJVTBL
    };

    MsgData_Struct MsgData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_PET_BATTLE_REPLACEMENTS_MADE
struct ClientPetBattleReplacementsMade
{
    struct MsgData_Struct
    {
        struct JamPetBattleEffect
        {
            struct JamPetBattleEffectTarget
            {
                JAM_PET_BATTLE_EFFECT_TARGET_EX Type;                                   ///< Offset 0x0000 Type _MJVTBL_JAM_PET_BATTLE_EFFECT_TARGET_EX
                uint8                           Petx;                                   ///< Offset 0x0004 Type _MJVTBL_UINT8
                uint32                          AuraInstanceID;                         ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                          AuraAbilityID;                          ///< Offset 0x000C Type _MJVTBL_UINT32
                int32                           RoundsRemaining;                        ///< Offset 0x0010 Type _MJVTBL_INT32
                int32                           CurrentRound;                           ///< Offset 0x0014 Type _MJVTBL_INT32
                uint32                          StateID;                                ///< Offset 0x0018 Type _MJVTBL_UINT32
                int32                           StateValue;                             ///< Offset 0x001C Type _MJVTBL_INT32
                int32                           Health;                                 ///< Offset 0x0020 Type _MJVTBL_INT32
                int32                           NewStatValue;                           ///< Offset 0x0024 Type _MJVTBL_INT32
                int32                           TriggerAbilityID;                       ///< Offset 0x0028 Type _MJVTBL_INT32
                int32                           ChangedAbilityID;                       ///< Offset 0x002C Type _MJVTBL_INT32
                int32                           CooldownRemaining;                      ///< Offset 0x0030 Type _MJVTBL_INT32
                int32                           LockdownRemaining;                      ///< Offset 0x0034 Type _MJVTBL_INT32
                int32                           BroadcastTextID;                        ///< Offset 0x0038 Type _MJVTBL_INT32
            };

            uint32                                AbilityEffectID;                              ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint16                                Flags;                                        ///< Offset 0x0004 Type _MJVTBL_UINT16
            uint16                                SourceAuraInstanceID;                         ///< Offset 0x0006 Type _MJVTBL_UINT16
            uint16                                TurnInstanceID;                               ///< Offset 0x0008 Type _MJVTBL_UINT16
            int8                                  PetBattleEffectType;                          ///< Offset 0x000A Type _MJVTBL_INT8
            uint8                                 CasterPBOID;                                  ///< Offset 0x000B Type _MJVTBL_UINT8
            uint8                                 StackDepth;                                   ///< Offset 0x000C Type _MJVTBL_UINT8
            std::vector<JamPetBattleEffectTarget> Targets;                                      ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffectTarget>::MJVTBL
        };

        struct JamPetBattleActiveAbility
        {
            int32 AbilityID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            int16 CooldownRemaining;        ///< Offset 0x0004 Type _MJVTBL_INT16
            int16 LockdownRemaining;        ///< Offset 0x0006 Type _MJVTBL_INT16
            int8  AbilityIndex;             ///< Offset 0x0008 Type _MJVTBL_INT8
            uint8 Pboid;                    ///< Offset 0x0009 Type _MJVTBL_UINT8
        };

        int32                                  CurRound;                                      ///< Offset 0x0000 Type _MJVTBL_INT32
        int8                                   NextPetBattleState;                            ///< Offset 0x0004 Type _MJVTBL_INT8
        std::vector<JamPetBattleEffect>        Effects;                                       ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamPetBattleEffect>::MJVTBL
        std::vector<int8>                      PetXDied;                                      ///< Offset 0x0020 Type MakeMJVTblForArrayOf<signedchar,&(MJVTBL_INT8)>::MJVTBL
        std::vector<JamPetBattleActiveAbility> Cooldowns;                                     ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamPetBattleActiveAbility>::MJVTBL
        uint8                                  NextInputFlags[2];                             ///< Offset 0x0050 Type MakeMJVTblForFixedArrayOf<unsignedchar,2,&(MJVTBL_UINT8)>::MJVTBL
        int8                                   NextTrapStatus[2];                             ///< Offset 0x0052 Type MakeMJVTblForFixedArrayOf<signedchar,2,&(MJVTBL_INT8)>::MJVTBL
        uint16                                 RoundTimeSecs[2];                              ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOf<unsignedshort,2,&(MJVTBL_UINT16)>::MJVTBL
    };

    MsgData_Struct MsgData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_PET_BATTLE_FINAL_ROUND
struct ClientPetBattleFinalRound
{
    struct MsgData_Struct
    {
        struct JamPetBattleFinalPet
        {
            bool   Captured;            ///< Offset 0x0000 Type _MJVTBL_BOOL
            bool   Caged;               ///< Offset 0x0001 Type _MJVTBL_BOOL
            bool   AwardedXP;           ///< Offset 0x0002 Type _MJVTBL_BOOL
            bool   SeenAction;          ///< Offset 0x0003 Type _MJVTBL_BOOL
            uint16 Level;               ///< Offset 0x0004 Type _MJVTBL_UINT16
            uint16 Xp;                  ///< Offset 0x0006 Type _MJVTBL_UINT16
            int32  Health;              ///< Offset 0x0008 Type _MJVTBL_INT32
            int32  MaxHealth;           ///< Offset 0x000C Type _MJVTBL_INT32
            uint16 InitialLevel;        ///< Offset 0x0010 Type _MJVTBL_UINT16
            uint8  Pboid;               ///< Offset 0x0012 Type _MJVTBL_UINT8
        };

        bool                              Abandoned;                                ///< Offset 0x0000 Type _MJVTBL_BOOL
        bool                              PvpBattle;                                ///< Offset 0x0001 Type _MJVTBL_BOOL
        std::vector<JamPetBattleFinalPet> Pets;                                     ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamPetBattleFinalPet>::MJVTBL
        bool                              Winners[2];                               ///< Offset 0x0020 Type MakeMJVTblForFixedArrayOf<bool,2,&(MJVTBL_BOOL)>::MJVTBL
        int32                             NpcCreatureID[2];                         ///< Offset 0x0024 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
    };

    MsgData_Struct MsgData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_PET_BATTLE_FINISHED
struct ClientPetBattleFinished
{
};

///< SMSG_PET_BATTLE_CHAT_RESTRICTED
struct ClientPetBattleChatRestricted
{
};

///< SMSG_PET_BATTLE_MAX_GAME_LENGTH_WARNING
struct ClientPetBattleMaxGameLengthWarning
{
    struct MsgData_Struct
    {
        uint32 TimeRemaining;          ///< Offset 0x0000 Type _MJVTBL_TIME_T
        int32  RoundsRemaining;        ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    MsgData_Struct MsgData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_START_ELAPSED_TIMER
struct ClientStartElapsedTimer
{
    struct Timer_Struct
    {
        uint32 TimerID;                ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32 CurrentDuration;        ///< Offset 0x0008 Type _MJVTBL_TIME_T
    };

    Timer_Struct Timer;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_STOP_ELAPSED_TIMER
struct ClientStopElapsedTimer
{
    uint32 TimerID;          ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool   KeepTimer;        ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< SMSG_START_ELAPSED_TIMERS
struct ClientStartElapsedTimers
{
    struct JamElaspedTimer
    {
        uint32 TimerID;                ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32 CurrentDuration;        ///< Offset 0x0008 Type _MJVTBL_TIME_T
    };

    std::vector<JamElaspedTimer> Timers;                              ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamElaspedTimer>::MJVTBL
};

///< SMSG_CHALLENGE_MODE_COMPLETE
struct ClientChallengeModeComplete
{
    struct Reward_Struct
    {
        struct JamItemReward
        {
            int32  ItemID;               ///< Offset 0x0000 Type _MJVTBL_INT32
            int32  ItemDisplayID;        ///< Offset 0x0004 Type _MJVTBL_INT32
            uint32 Quantity;             ///< Offset 0x0008 Type _MJVTBL_UINT32
        };

        struct JamCurrencyReward
        {
            uint32 CurrencyID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint32 Quantity;          ///< Offset 0x0004 Type _MJVTBL_UINT32
        };

        std::vector<JamItemReward>     ItemRewards;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamItemReward>::MJVTBL
        std::vector<JamCurrencyReward> CurrencyRewards;                       ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamCurrencyReward>::MJVTBL
        uint32                         Money;                                 ///< Offset 0x0030 Type _MJVTBL_UINT32
    };

    uint32        MapID;                ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32        Time;                 ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32        MedalEarned;          ///< Offset 0x0008 Type _MJVTBL_UINT32
    Reward_Struct Reward;               ///< Offset 0x0010 Type _MJVTBL_STRUCT
};

///< SMSG_CHALLEGE_MODE_REWARDS
struct ClientChallegeModeRewards
{
    struct JamMapChallengeModeReward
    {
        struct JamChallengeModeReward
        {
            struct JamItemReward
            {
                int32  ItemID;               ///< Offset 0x0000 Type _MJVTBL_INT32
                int32  ItemDisplayID;        ///< Offset 0x0004 Type _MJVTBL_INT32
                uint32 Quantity;             ///< Offset 0x0008 Type _MJVTBL_UINT32
            };

            struct JamCurrencyReward
            {
                uint32 CurrencyID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
                uint32 Quantity;          ///< Offset 0x0004 Type _MJVTBL_UINT32
            };

            std::vector<JamItemReward>     ItemRewards;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamItemReward>::MJVTBL
            std::vector<JamCurrencyReward> CurrencyRewards;                       ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamCurrencyReward>::MJVTBL
            uint32                         Money;                                 ///< Offset 0x0030 Type _MJVTBL_UINT32
        };

        int32                               MapID;                                      ///< Offset 0x0000 Type _MJVTBL_INT32
        std::vector<JamChallengeModeReward> RewardsPerMedal;                            ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamChallengeModeReward>::MJVTBL
    };

    struct JamItemReward
    {
        int32  ItemID;               ///< Offset 0x0000 Type _MJVTBL_INT32
        int32  ItemDisplayID;        ///< Offset 0x0004 Type _MJVTBL_INT32
        uint32 Quantity;             ///< Offset 0x0008 Type _MJVTBL_UINT32
    };

    std::vector<JamMapChallengeModeReward> Rewards;                                       ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamMapChallengeModeReward>::MJVTBL
    std::vector<JamItemReward>             TierRewards;                                   ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamItemReward>::MJVTBL
};

///< SMSG_CHALLENGE_MODE_ALL_MAP_STATS
struct ClientChallengeModeAllMapStats
{
    struct ClientChallengeModeMap
    {
        int32              MapID;                             ///< Offset 0x0000 Type _MJVTBL_INT32
        int32              BestCompletionMilliseconds;        ///< Offset 0x0004 Type _MJVTBL_INT32
        int32              LastCompletionMilliseconds;        ///< Offset 0x0008 Type _MJVTBL_INT32
        int32              BestMedal;                         ///< Offset 0x000C Type _MJVTBL_INT32
        uint8 *            BestMedalDate;                     ///< Offset 0x0010 Type _MJVTBL_NOT_IMPLEMENTED
        std::vector<int16> BestSpecID;                        ///< Offset 0x0030 Type MakeMJVTblForArrayOf<short,&(MJVTBL_INT16)>::MJVTBL
    };

    std::vector<ClientChallengeModeMap> Maps;                                       ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientChallengeModeMap>::MJVTBL
};

///< SMSG_CHALLENGE_MODE_MAP_STATS_UPDATE
struct ClientChallengeModeMapStatsUpdate
{
    struct MapData_Struct
    {
        int32              MapID;                             ///< Offset 0x0000 Type _MJVTBL_INT32
        int32              BestCompletionMilliseconds;        ///< Offset 0x0004 Type _MJVTBL_INT32
        int32              LastCompletionMilliseconds;        ///< Offset 0x0008 Type _MJVTBL_INT32
        int32              BestMedal;                         ///< Offset 0x000C Type _MJVTBL_INT32
        uint8 *            BestMedalDate;                     ///< Offset 0x0010 Type _MJVTBL_NOT_IMPLEMENTED
        std::vector<int16> BestSpecID;                        ///< Offset 0x0030 Type MakeMJVTblForArrayOf<short,&(MJVTBL_INT16)>::MJVTBL
    };

    MapData_Struct MapData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_CHALLENGE_MODE_REQUEST_LEADERS_RESULT
struct ClientChallengeModeRequestLeadersResult
{
    struct ClientChallengeModeAttempt
    {
        struct ClientChallengeModeMember
        {
            uint64 Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 VirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 NativeRealmAddress;         ///< Offset 0x000C Type _MJVTBL_UINT32
            int32  SpecializationID;           ///< Offset 0x0010 Type _MJVTBL_INT32
        };

        uint32                                 InstanceRealmAddress;                          ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32                                 AttemptID;                                     ///< Offset 0x0004 Type _MJVTBL_UINT32
        int32                                  CompletionTime;                                ///< Offset 0x0008 Type _MJVTBL_INT32
        uint8 *                                CompletionDate;                                ///< Offset 0x000C Type _MJVTBL_NOT_IMPLEMENTED
        int32                                  MedalEarned;                                   ///< Offset 0x002C Type _MJVTBL_INT32
        std::vector<ClientChallengeModeMember> Members;                                       ///< Offset 0x0030 Type MakeMJVTblForArrayOfStruct<ClientChallengeModeMember>::MJVTBL
    };

    uint32                                  LastRealmUpdate;                                ///< Offset 0x0000 Type _MJVTBL_TIME_T
    std::vector<ClientChallengeModeAttempt> GuildLeaders;                                   ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientChallengeModeAttempt>::MJVTBL
    int32                                   MapID;                                          ///< Offset 0x0020 Type _MJVTBL_INT32
    uint32                                  LastGuildUpdate;                                ///< Offset 0x0028 Type _MJVTBL_TIME_T
    std::vector<ClientChallengeModeAttempt> RealmLeaders;                                   ///< Offset 0x0030 Type MakeMJVTblForArrayOfStruct<ClientChallengeModeAttempt>::MJVTBL
};

///< SMSG_CHALLENGE_MODE_NEW_PLAYER_RECORD
struct ClientChallengeModeNewPlayerRecord
{
    int32 Medal;                         ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 CompletionMilliseconds;        ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 MapID;                         ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_RESPEC_WIPE_CONFIRM
struct ClientRespecWipeConfirm
{
    uint64 RespecMaster;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Cost;                ///< Offset 0x0008 Type _MJVTBL_UINT32
    int8   RespecType;          ///< Offset 0x000C Type _MJVTBL_INT8
};

///< SMSG_GMCHARACTER_RESTORE_RESPONSE
struct ClientGMCharacterRestoreResponse
{
    struct JamClientGMCharacterRestoreResponseWarning
    {
        std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    uint32                                                  SrcAccount;                                                     ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<JamClientGMCharacterRestoreResponseWarning> WarningStrings;                                                 ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamClientGMCharacterRestoreResponseWarning>::MJVTBL
    std::string                                             ResultDescription;                                              ///< Offset 0x0020 Type _MJVTBL_STRING
    uint32                                                  DstAccount;                                                     ///< Offset 0x0120 Type _MJVTBL_UINT32
    bool                                                    Success;                                                        ///< Offset 0x0124 Type _MJVTBL_BOOL
    uint32                                                  ResultCode;                                                     ///< Offset 0x0128 Type _MJVTBL_UINT32
    uint32                                                  Token;                                                          ///< Offset 0x012C Type _MJVTBL_UINT32
    uint64                                                  NewCharacterGUID;                                               ///< Offset 0x0130 Type _MJVTBL_UINT64
    uint64                                                  OldCharacterGUID;                                               ///< Offset 0x0138 Type _MJVTBL_UINT64
};

///< SMSG_LOOT_RESPONSE
struct ClientLootResponse
{
    struct JamLootCurrency
    {
        uint32            CurrencyID;               ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32            Quantity;                 ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint8             LootListID;               ///< Offset 0x0008 Type _MJVTBL_UINT8
        LOOT_ITEM_UI_TYPE UiType;                   ///< Offset 0x000C Type _MJVTBL_LOOT_ITEM_UI_TYPE
    };

    struct JamLootItem
    {
        struct Loot_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        LOOT_LIST_ITEM_TYPE Type;                       ///< Offset 0x0000 Type _MJVTBL_LOOT_LIST_ITEM_TYPE
        LOOT_ITEM_UI_TYPE   UiType;                     ///< Offset 0x0004 Type _MJVTBL_LOOT_ITEM_UI_TYPE
        uint32              Quantity;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8               LootItemType;               ///< Offset 0x000C Type _MJVTBL_UINT8
        uint8               LootListID;                 ///< Offset 0x000D Type _MJVTBL_UINT8
        bool                CanTradeToTapList;          ///< Offset 0x000E Type _MJVTBL_BOOL
        Loot_Struct         Loot;                       ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    uint32                       Coins;                               ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8                        LootMethod;                          ///< Offset 0x0004 Type _MJVTBL_UINT8
    uint8                        Threshold;                           ///< Offset 0x0005 Type _MJVTBL_UINT8
    uint64                       LootObj;                             ///< Offset 0x0008 Type _MJVTBL_UINT64
    std::vector<JamLootCurrency> Currencies;                          ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamLootCurrency>::MJVTBL
    bool                         PersonalLooting;                     ///< Offset 0x0028 Type _MJVTBL_BOOL
    uint8                        AcquireReason;                       ///< Offset 0x0029 Type _MJVTBL_UINT8
    bool                         Acquired;                            ///< Offset 0x002A Type _MJVTBL_BOOL
    bool                         AELooting;                           ///< Offset 0x002B Type _MJVTBL_BOOL
    uint64                       Owner;                               ///< Offset 0x0030 Type _MJVTBL_UINT64
    uint8                        FailureReason;                       ///< Offset 0x0038 Type _MJVTBL_UINT8
    std::vector<JamLootItem>     Items;                               ///< Offset 0x0040 Type MakeMJVTblForArrayOfStruct<JamLootItem>::MJVTBL
};

///< SMSG_LOOT_REMOVED
struct ClientLootRemoved
{
    uint64 LootObj;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Owner;             ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8  LootListID;        ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< SMSG_LOOT_UPDATED
struct ClientLootUpdated
{
    struct Item_Struct
    {
        struct Loot_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        LOOT_LIST_ITEM_TYPE Type;                       ///< Offset 0x0000 Type _MJVTBL_LOOT_LIST_ITEM_TYPE
        LOOT_ITEM_UI_TYPE   UiType;                     ///< Offset 0x0004 Type _MJVTBL_LOOT_ITEM_UI_TYPE
        uint32              Quantity;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8               LootItemType;               ///< Offset 0x000C Type _MJVTBL_UINT8
        uint8               LootListID;                 ///< Offset 0x000D Type _MJVTBL_UINT8
        bool                CanTradeToTapList;          ///< Offset 0x000E Type _MJVTBL_BOOL
        Loot_Struct         Loot;                       ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    Item_Struct Item;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64      LootObj;            ///< Offset 0x0070 Type _MJVTBL_UINT64
};

///< SMSG_COIN_REMOVED
struct ClientCoinRemoved
{
    uint64 LootObj;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_AELOOT_TARGETS
struct ClientAELootTargets
{
    uint32 Count;         ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_AELOOT_TARGET_ACK
struct ClientAELootTargetAck
{
};

///< SMSG_LOOT_RELEASE_ALL
struct ClientLootReleaseAll
{
};

///< SMSG_LOOT_RELEASE
struct ClientLootRelease
{
    uint64 LootObj;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Owner;          ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_LOOT_MONEY_NOTIFY
struct ClientLootMoneyNotify
{
    uint32 Money;             ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool   SoleLooter;        ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< SMSG_START_LOOT_ROLL
struct ClientStartLootRoll
{
    struct Item_Struct
    {
        struct Loot_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        LOOT_LIST_ITEM_TYPE Type;                       ///< Offset 0x0000 Type _MJVTBL_LOOT_LIST_ITEM_TYPE
        LOOT_ITEM_UI_TYPE   UiType;                     ///< Offset 0x0004 Type _MJVTBL_LOOT_ITEM_UI_TYPE
        uint32              Quantity;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8               LootItemType;               ///< Offset 0x000C Type _MJVTBL_UINT8
        uint8               LootListID;                 ///< Offset 0x000D Type _MJVTBL_UINT8
        bool                CanTradeToTapList;          ///< Offset 0x000E Type _MJVTBL_BOOL
        Loot_Struct         Loot;                       ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    uint32      RollTime;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8       Method;             ///< Offset 0x0004 Type _MJVTBL_UINT8
    Item_Struct Item;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    int32       MapID;              ///< Offset 0x0078 Type _MJVTBL_INT32
    uint64      LootObj;            ///< Offset 0x0080 Type _MJVTBL_UINT64
    uint8       ValidRolls;         ///< Offset 0x0088 Type _MJVTBL_UINT8
};

///< SMSG_LOOT_ROLL
struct ClientLootRoll
{
    struct Item_Struct
    {
        struct Loot_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        LOOT_LIST_ITEM_TYPE Type;                       ///< Offset 0x0000 Type _MJVTBL_LOOT_LIST_ITEM_TYPE
        LOOT_ITEM_UI_TYPE   UiType;                     ///< Offset 0x0004 Type _MJVTBL_LOOT_ITEM_UI_TYPE
        uint32              Quantity;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8               LootItemType;               ///< Offset 0x000C Type _MJVTBL_UINT8
        uint8               LootListID;                 ///< Offset 0x000D Type _MJVTBL_UINT8
        bool                CanTradeToTapList;          ///< Offset 0x000E Type _MJVTBL_BOOL
        Loot_Struct         Loot;                       ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    uint64      Player;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32       Roll;               ///< Offset 0x0008 Type _MJVTBL_INT32
    Item_Struct Item;               ///< Offset 0x0010 Type _MJVTBL_STRUCT
    uint8       RollType;           ///< Offset 0x0080 Type _MJVTBL_UINT8
    uint64      LootObj;            ///< Offset 0x0088 Type _MJVTBL_UINT64
    bool        Autopassed;         ///< Offset 0x0090 Type _MJVTBL_BOOL
};

///< SMSG_MASTER_LOOT_CANDIDATE_LIST
struct ClientMasterLootCandidateList
{
    std::vector<uint64> Players;                    ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    uint64              LootObj;                    ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< SMSG_LOOT_ITEM_LIST
struct ClientLootItemList
{
    struct JamLootItem
    {
        struct Loot_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        LOOT_LIST_ITEM_TYPE Type;                       ///< Offset 0x0000 Type _MJVTBL_LOOT_LIST_ITEM_TYPE
        LOOT_ITEM_UI_TYPE   UiType;                     ///< Offset 0x0004 Type _MJVTBL_LOOT_ITEM_UI_TYPE
        uint32              Quantity;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8               LootItemType;               ///< Offset 0x000C Type _MJVTBL_UINT8
        uint8               LootListID;                 ///< Offset 0x000D Type _MJVTBL_UINT8
        bool                CanTradeToTapList;          ///< Offset 0x000E Type _MJVTBL_BOOL
        Loot_Struct         Loot;                       ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    std::vector<JamLootItem> Items;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamLootItem>::MJVTBL
    uint64                   LootObj;                         ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< SMSG_LOOT_ROLLS_COMPLETE
struct ClientLootRollsComplete
{
    uint64 LootObj;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  LootListID;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< SMSG_LOOT_ALL_PASSED
struct ClientLootAllPassed
{
    struct Item_Struct
    {
        struct Loot_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        LOOT_LIST_ITEM_TYPE Type;                       ///< Offset 0x0000 Type _MJVTBL_LOOT_LIST_ITEM_TYPE
        LOOT_ITEM_UI_TYPE   UiType;                     ///< Offset 0x0004 Type _MJVTBL_LOOT_ITEM_UI_TYPE
        uint32              Quantity;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8               LootItemType;               ///< Offset 0x000C Type _MJVTBL_UINT8
        uint8               LootListID;                 ///< Offset 0x000D Type _MJVTBL_UINT8
        bool                CanTradeToTapList;          ///< Offset 0x000E Type _MJVTBL_BOOL
        Loot_Struct         Loot;                       ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    uint64      LootObj;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    Item_Struct Item;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_LOOT_ROLL_WON
struct ClientLootRollWon
{
    struct Item_Struct
    {
        struct Loot_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        LOOT_LIST_ITEM_TYPE Type;                       ///< Offset 0x0000 Type _MJVTBL_LOOT_LIST_ITEM_TYPE
        LOOT_ITEM_UI_TYPE   UiType;                     ///< Offset 0x0004 Type _MJVTBL_LOOT_ITEM_UI_TYPE
        uint32              Quantity;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8               LootItemType;               ///< Offset 0x000C Type _MJVTBL_UINT8
        uint8               LootListID;                 ///< Offset 0x000D Type _MJVTBL_UINT8
        bool                CanTradeToTapList;          ///< Offset 0x000E Type _MJVTBL_BOOL
        Loot_Struct         Loot;                       ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    uint64      Winner;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64      LootObj;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8       RollType;           ///< Offset 0x0010 Type _MJVTBL_UINT8
    int32       Roll;               ///< Offset 0x0014 Type _MJVTBL_INT32
    Item_Struct Item;               ///< Offset 0x0018 Type _MJVTBL_STRUCT
};

///< SMSG_SET_ITEM_CHALLENGE_MODE_DATA
struct ClientSetItemChallengeModeData
{
    uint64 ItemGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Stats[6];        ///< Offset 0x0008 Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_CLEAR_ITEM_CHALLENGE_MODE_DATA
struct ClientClearItemChallengeModeData
{
    uint64 ItemGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_ITEM_PUSH_RESULT
struct ClientItemPushResult
{
    struct Item_Struct
    {
        struct JamItemBonusInstanceData
        {
            struct Context_Struct
            {
                uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            };

            struct Bonuses_Struct
            {
                std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
            };

            Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        };

        int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
        Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
        Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
    };

    uint32      BattlePetBreedQuality;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint64      ItemGUID;                     ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32       SlotInBag;                    ///< Offset 0x0010 Type _MJVTBL_INT32
    int32       QuantityInInventory;          ///< Offset 0x0014 Type _MJVTBL_INT32
    int32       Quantity;                     ///< Offset 0x0018 Type _MJVTBL_INT32
    bool        Pushed;                       ///< Offset 0x001C Type _MJVTBL_BOOL
    bool        DisplayText;                  ///< Offset 0x001D Type _MJVTBL_BOOL
    int32       BattlePetLevel;               ///< Offset 0x0020 Type _MJVTBL_INT32
    uint8       Slot;                         ///< Offset 0x0024 Type _MJVTBL_UINT8
    bool        Created;                      ///< Offset 0x0025 Type _MJVTBL_BOOL
    int32       BattlePetBreedID;             ///< Offset 0x0028 Type _MJVTBL_INT32
    bool        IsBonusRoll;                  ///< Offset 0x002C Type _MJVTBL_BOOL
    uint64      PlayerGUID;                   ///< Offset 0x0030 Type _MJVTBL_UINT64
    Item_Struct Item;                         ///< Offset 0x0038 Type _MJVTBL_STRUCT
    int32       BattlePetSpeciesID;           ///< Offset 0x0098 Type _MJVTBL_INT32
};

///< SMSG_DISPLAY_TOAST
struct ClientDisplayToast
{
    struct Item_Struct
    {
        struct JamItemBonusInstanceData
        {
            struct Context_Struct
            {
                uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            };

            struct Bonuses_Struct
            {
                std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
            };

            Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        };

        int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
        Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
        Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
    };

    bool        BonusRoll;                 ///< Offset 0x0000 Type _MJVTBL_BOOL
    TOAST_TYPE  Type;                      ///< Offset 0x0004 Type _MJVTBL_TOAST_TYPE
    uint32      CurrencyID;                ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8       DisplayToastMethod;        ///< Offset 0x000C Type _MJVTBL_UINT8
    bool        Mailed;                    ///< Offset 0x000D Type _MJVTBL_BOOL
    Item_Struct Item;                      ///< Offset 0x0010 Type _MJVTBL_STRUCT
    int32       LootSpec;                  ///< Offset 0x0070 Type _MJVTBL_INT32
    uint32      Quantity;                  ///< Offset 0x0074 Type _MJVTBL_UINT32
};

///< SMSG_AREA_TRIGGER_DEBUG_SWEEP
struct ClientAreaTriggerDebugSweep
{
    uint64 TriggerGUID;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 TimeFromCreation1;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 TimeFromCreation0;        ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_AREA_TRIGGER_DEBUG_PLAYER_INSIDE
struct ClientAreaTriggerDebugPlayerInside
{
    uint64 TriggerGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   Inside;             ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< SMSG_RESET_AREA_TRIGGER
struct ClientResetAreaTrigger
{
    struct AreaTrigger_Struct
    {
        struct JamCliAreaTriggerSphere
        {
            float Radius;              ///< Offset 0x0000 Type _MJVTBL_FLOAT
            float RadiusTarget;        ///< Offset 0x0004 Type _MJVTBL_FLOAT
        };

        struct JamCliAreaTriggerBox
        {
            G3D::Vector3 Extents;              ///< Offset 0x0000 Type _MJVTBL_V3
            G3D::Vector3 ExtentsTarget;        ///< Offset 0x000C Type _MJVTBL_V3
        };

        struct JamCliAreaTriggerPolygon
        {
            std::vector<G3D::Vector2> Vertices;                         ///< Offset 0x0000 Type MakeMJVTblForArrayOf<C2Vector,&(MJVTBL_V2)>::MJVTBL
            std::vector<G3D::Vector2> VerticesTarget;                   ///< Offset 0x0018 Type MakeMJVTblForArrayOf<C2Vector,&(MJVTBL_V2)>::MJVTBL
            float                     Height;                           ///< Offset 0x0030 Type _MJVTBL_FLOAT
            float                     HeightTarget;                     ///< Offset 0x0034 Type _MJVTBL_FLOAT
        };

        struct JamCliAreaTriggerCylinder
        {
            float Radius;              ///< Offset 0x0000 Type _MJVTBL_FLOAT
            float RadiusTarget;        ///< Offset 0x0004 Type _MJVTBL_FLOAT
            float Height;              ///< Offset 0x0008 Type _MJVTBL_FLOAT
            float HeightTarget;        ///< Offset 0x000C Type _MJVTBL_FLOAT
        };

        struct JamCliAreaTriggerSpline
        {
            uint32                    TimeToTarget;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint32                    ElapsedTimeForMovement;           ///< Offset 0x0004 Type _MJVTBL_UINT32
            std::vector<G3D::Vector3> Points;                           ///< Offset 0x0008 Type MakeMJVTblForArrayOf<C3Vector,&(MJVTBL_V3)>::MJVTBL
        };

        uint32                              ElapsedMs;                                  ///< Offset 0x0000 Type _MJVTBL_UINT32
        bool                                AbsoluteOrientation;                        ///< Offset 0x0004 Type _MJVTBL_BOOL
        bool                                DynamicShape;                               ///< Offset 0x0005 Type _MJVTBL_BOOL
        bool                                Attached;                                   ///< Offset 0x0006 Type _MJVTBL_BOOL
        bool                                FaceMovementDir;                            ///< Offset 0x0007 Type _MJVTBL_BOOL
        bool                                FollowsTerrain;                             ///< Offset 0x0008 Type _MJVTBL_BOOL
        G3D::Vector3                        RollPitchYaw;                               ///< Offset 0x000C Type _MJVTBL_V3
        Optional<G3D::Vector3>              TargetRollPitchYaw;                         ///< Offset 0x0018 Type MakeMJVTblForOptional<C3Vector,&(MJVTBL_V3)>::MJVTBL
        Optional<uint32>                    ScaleCurveID;                               ///< Offset 0x0028 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        Optional<uint32>                    MorphCurveID;                               ///< Offset 0x0030 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        Optional<uint32>                    FacingCurveID;                              ///< Offset 0x0038 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        Optional<uint32>                    MoveCurveID;                                ///< Offset 0x0040 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        Optional<JamCliAreaTriggerSphere>   AreaTriggerSphere;                          ///< Offset 0x0048 Type MakeMJVTblForOptionalStruct<JamCliAreaTriggerSphere>::MJVTBL
        Optional<JamCliAreaTriggerBox>      AreaTriggerBox;                             ///< Offset 0x0054 Type MakeMJVTblForOptionalStruct<JamCliAreaTriggerBox>::MJVTBL
        Optional<JamCliAreaTriggerPolygon>  AreaTriggerPolygon;                         ///< Offset 0x0070 Type MakeMJVTblForOptionalStruct<JamCliAreaTriggerPolygon>::MJVTBL
        Optional<JamCliAreaTriggerCylinder> AreaTriggerCylinder;                        ///< Offset 0x00B0 Type MakeMJVTblForOptionalStruct<JamCliAreaTriggerCylinder>::MJVTBL
        Optional<JamCliAreaTriggerSpline>   AreaTriggerSpline;                          ///< Offset 0x00C8 Type MakeMJVTblForOptionalStruct<JamCliAreaTriggerSpline>::MJVTBL
    };

    uint64             TriggerGUID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    AreaTrigger_Struct AreaTrigger;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_AREA_TRIGGER_RE_PATH
struct ClientAreaTriggerRePath
{
    struct AreaTriggerSpline_Struct
    {
        uint32                    TimeToTarget;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32                    ElapsedTimeForMovement;           ///< Offset 0x0004 Type _MJVTBL_UINT32
        std::vector<G3D::Vector3> Points;                           ///< Offset 0x0008 Type MakeMJVTblForArrayOf<C3Vector,&(MJVTBL_V3)>::MJVTBL
    };

    AreaTriggerSpline_Struct AreaTriggerSpline;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64                   TriggerGUID;                     ///< Offset 0x0020 Type _MJVTBL_UINT64
};

///< SMSG_AREA_TRIGGER_RE_SHAPE
struct ClientAreaTriggerReShape
{
    struct AreaTriggerPolygon_Struct
    {
        std::vector<G3D::Vector2> Vertices;                         ///< Offset 0x0000 Type MakeMJVTblForArrayOf<C2Vector,&(MJVTBL_V2)>::MJVTBL
        std::vector<G3D::Vector2> VerticesTarget;                   ///< Offset 0x0018 Type MakeMJVTblForArrayOf<C2Vector,&(MJVTBL_V2)>::MJVTBL
        float                     Height;                           ///< Offset 0x0030 Type _MJVTBL_FLOAT
        float                     HeightTarget;                     ///< Offset 0x0034 Type _MJVTBL_FLOAT
    };

    AreaTriggerPolygon_Struct AreaTriggerPolygon;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64                    TriggerGUID;                      ///< Offset 0x0038 Type _MJVTBL_UINT64
};

///< SMSG_SET_PET_SPECIALIZATION
struct ClientSetPetSpecialization
{
    uint16 SpecID;        ///< Offset 0x0000 Type _MJVTBL_UINT16
};

///< SMSG_BLACK_MARKET_OPEN_RESULT
struct ClientBlackMarketOpenResult
{
    uint64 NpcGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   Open;           ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< SMSG_BLACK_MARKET_REQUEST_ITEMS_RESULT
struct ClientBlackMarketRequestItemsResult
{
    struct ClientBlackMarketItem
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        int32       MarketID;                ///< Offset 0x0000 Type _MJVTBL_INT32
        int32       SellerNPC;               ///< Offset 0x0004 Type _MJVTBL_INT32
        Item_Struct Item;                    ///< Offset 0x0008 Type _MJVTBL_STRUCT
        int32       Quantity;                ///< Offset 0x0068 Type _MJVTBL_INT32
        uint64      MinBid;                  ///< Offset 0x0070 Type _MJVTBL_UINT64
        uint64      MinIncrement;            ///< Offset 0x0078 Type _MJVTBL_UINT64
        uint64      CurrentBid;              ///< Offset 0x0080 Type _MJVTBL_UINT64
        int32       SecondsRemaining;        ///< Offset 0x0088 Type _MJVTBL_INT32
        bool        HighBid;                 ///< Offset 0x008C Type _MJVTBL_BOOL
        int32       NumBids;                 ///< Offset 0x0090 Type _MJVTBL_INT32
    };

    uint32                             LastUpdateID;                              ///< Offset 0x0000 Type _MJVTBL_TIME_T
    std::vector<ClientBlackMarketItem> Items;                                     ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientBlackMarketItem>::MJVTBL
};

///< SMSG_BLACK_MARKET_BID_ON_ITEM_RESULT
struct ClientBlackMarketBidOnItemResult
{
    struct Item_Struct
    {
        struct JamItemBonusInstanceData
        {
            struct Context_Struct
            {
                uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            };

            struct Bonuses_Struct
            {
                std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
            };

            Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        };

        int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
        Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
        Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
    };

    int32       MarketID;           ///< Offset 0x0000 Type _MJVTBL_INT32
    Item_Struct Item;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    int32       Result;             ///< Offset 0x0068 Type _MJVTBL_INT32
};

///< SMSG_BLACK_MARKET_OUTBID
struct ClientBlackMarketOutbid
{
    struct Item_Struct
    {
        struct JamItemBonusInstanceData
        {
            struct Context_Struct
            {
                uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            };

            struct Bonuses_Struct
            {
                std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
            };

            Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        };

        int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
        Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
        Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
    };

    Item_Struct Item;                      ///< Offset 0x0000 Type _MJVTBL_STRUCT
    int32       MarketID;                  ///< Offset 0x0060 Type _MJVTBL_INT32
    int32       RandomPropertiesID;        ///< Offset 0x0064 Type _MJVTBL_INT32
};

///< SMSG_BLACK_MARKET_WON
struct ClientBlackMarketWon
{
    struct Item_Struct
    {
        struct JamItemBonusInstanceData
        {
            struct Context_Struct
            {
                uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            };

            struct Bonuses_Struct
            {
                std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
            };

            Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        };

        int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
        Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
        Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
    };

    int32       MarketID;                  ///< Offset 0x0000 Type _MJVTBL_INT32
    int32       RandomPropertiesID;        ///< Offset 0x0004 Type _MJVTBL_INT32
    Item_Struct Item;                      ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_SCENARIO_STATE
struct ClientScenarioState
{
    struct JamBonusObjectiveData
    {
        int32 BonusObjectiveID;         ///< Offset 0x0000 Type _MJVTBL_INT32
        bool  ObjectiveComplete;        ///< Offset 0x0004 Type _MJVTBL_BOOL
    };

    struct JamCriteriaProgress
    {
        int32   Id;                    ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64  Quantity;              ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint64  Player;                ///< Offset 0x0010 Type _MJVTBL_UINT64
        int32   Flags;                 ///< Offset 0x0018 Type _MJVTBL_INT32
        uint8 * Date;                  ///< Offset 0x001C Type _MJVTBL_NOT_IMPLEMENTED
        uint32  TimeFromStart;         ///< Offset 0x0040 Type _MJVTBL_TIME_T
        uint32  TimeFromCreate;        ///< Offset 0x0048 Type _MJVTBL_TIME_T
    };

    std::vector<JamBonusObjectiveData> BonusObjectives;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamBonusObjectiveData>::MJVTBL
    bool                               ScenarioComplete;                          ///< Offset 0x0018 Type _MJVTBL_BOOL
    std::vector<JamCriteriaProgress>   CriteriaProgress;                          ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<JamCriteriaProgress>::MJVTBL
    int32                              CurrentStep;                               ///< Offset 0x0038 Type _MJVTBL_INT32
    uint32                             WaveCurrent;                               ///< Offset 0x003C Type _MJVTBL_UINT32
    uint32                             DifficultyID;                              ///< Offset 0x0040 Type _MJVTBL_UINT32
    uint32                             TimerDuration;                             ///< Offset 0x0044 Type _MJVTBL_UINT32
    int32                              ScenarioID;                                ///< Offset 0x0048 Type _MJVTBL_INT32
    uint32                             WaveMax;                                   ///< Offset 0x004C Type _MJVTBL_UINT32
};

///< SMSG_SCENARIO_PROGRESS_UPDATE
struct ClientScenarioProgressUpdate
{
    struct Progress_Struct
    {
        int32   Id;                    ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64  Quantity;              ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint64  Player;                ///< Offset 0x0010 Type _MJVTBL_UINT64
        int32   Flags;                 ///< Offset 0x0018 Type _MJVTBL_INT32
        uint8 * Date;                  ///< Offset 0x001C Type _MJVTBL_NOT_IMPLEMENTED
        uint32  TimeFromStart;         ///< Offset 0x0040 Type _MJVTBL_TIME_T
        uint32  TimeFromCreate;        ///< Offset 0x0048 Type _MJVTBL_TIME_T
    };

    Progress_Struct Progress;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_GROUP_NEW_LEADER
struct ClientGroupNewLeader
{
    uint8       PartyIndex;         ///< Offset 0x0000 Type _MJVTBL_UINT8
    std::string Name;               ///< Offset 0x0001 Type _MJVTBL_STRING
};

///< SMSG_SEND_RAID_TARGET_UPDATE_ALL
struct ClientSendRaidTargetUpdateAll
{
    struct RaidTargetSymbol
    {
        uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint8  Symbol;        ///< Offset 0x0008 Type _MJVTBL_UINT8
    };

    std::vector<RaidTargetSymbol> Targets;                              ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<RaidTargetSymbol>::MJVTBL
    uint8                         PartyIndex;                           ///< Offset 0x0018 Type _MJVTBL_UINT8
};

///< SMSG_SEND_RAID_TARGET_UPDATE_SINGLE
struct ClientSendRaidTargetUpdateSingle
{
    uint64 ChangedBy;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Target;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8  PartyIndex;        ///< Offset 0x0010 Type _MJVTBL_UINT8
    uint8  Symbol;            ///< Offset 0x0011 Type _MJVTBL_UINT8
};

///< SMSG_RANDOM_ROLL
struct ClientRandomRoll
{
    uint64 Roller;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Result;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  Max;           ///< Offset 0x000C Type _MJVTBL_INT32
    int32  Min;           ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_INSPECT_RESULT
struct ClientInspectResult
{
    struct JamCliInspectItemData
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        struct JamCliInspectEnchantData
        {
            uint32 Id;            ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint8  Index;         ///< Offset 0x0004 Type _MJVTBL_UINT8
        };

        uint64                                CreatorGUID;                                  ///< Offset 0x0000 Type _MJVTBL_UINT64
        Item_Struct                           Item;                                         ///< Offset 0x0008 Type _MJVTBL_STRUCT
        uint8                                 Index;                                        ///< Offset 0x0068 Type _MJVTBL_UINT8
        bool                                  Usable;                                       ///< Offset 0x0069 Type _MJVTBL_BOOL
        std::vector<JamCliInspectEnchantData> Enchants;                                     ///< Offset 0x0070 Type MakeMJVTblForArrayOfStruct<JamCliInspectEnchantData>::MJVTBL
    };

    struct JamCliInspectGuildData
    {
        uint64 GuildGUID;              ///< Offset 0x0000 Type _MJVTBL_UINT64
        int64  GuildXP;                ///< Offset 0x0008 Type _MJVTBL_INT64
        int32  GuildLevel;             ///< Offset 0x0010 Type _MJVTBL_INT32
        int32  NumGuildMembers;        ///< Offset 0x0014 Type _MJVTBL_INT32
    };

    std::vector<JamCliInspectItemData> Items;                                     ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliInspectItemData>::MJVTBL
    int32                              ClassID;                                   ///< Offset 0x0018 Type _MJVTBL_INT32
    std::vector<uint16>                Talents;                                   ///< Offset 0x0020 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
    std::vector<uint16>                Glyphs;                                    ///< Offset 0x0038 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
    Optional<JamCliInspectGuildData>   GuildData;                                 ///< Offset 0x0050 Type MakeMJVTblForOptionalStruct<JamCliInspectGuildData>::MJVTBL
    uint64                             InspecteeGUID;                             ///< Offset 0x0070 Type _MJVTBL_UINT64
    int32                              SpecializationID;                          ///< Offset 0x0078 Type _MJVTBL_INT32
};

///< SMSG_SCENARIO_POIS
struct ClientScenarioPOIs
{
    struct ScenarioPOIData
    {
        struct ScenarioBlobData
        {
            struct ScenarioPOIPointData
            {
                int32 X;            ///< Offset 0x0000 Type _MJVTBL_INT32
                int32 Y;            ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            int32                             BlobID;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                             MapID;                                    ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                             WorldMapAreaID;                           ///< Offset 0x0008 Type _MJVTBL_INT32
            int32                             Floor;                                    ///< Offset 0x000C Type _MJVTBL_INT32
            int32                             Priority;                                 ///< Offset 0x0010 Type _MJVTBL_INT32
            int32                             Flags;                                    ///< Offset 0x0014 Type _MJVTBL_INT32
            int32                             WorldEffectID;                            ///< Offset 0x0018 Type _MJVTBL_INT32
            int32                             PlayerConditionID;                        ///< Offset 0x001C Type _MJVTBL_INT32
            std::vector<ScenarioPOIPointData> Points;                                   ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<ScenarioPOIPointData>::MJVTBL
        };

        int32                         CriteriaTreeID;                       ///< Offset 0x0000 Type _MJVTBL_INT32
        std::vector<ScenarioBlobData> BlobData;                             ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ScenarioBlobData>::MJVTBL
    };

    std::vector<ScenarioPOIData> PoiInfo;                             ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ScenarioPOIData>::MJVTBL
};

///< SMSG_INSTANCE_INFO
struct ClientInstanceInfo
{
    struct ClientInstanceLock
    {
        uint32 MapID;                 ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32 DifficultyID;          ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint64 InstanceID;            ///< Offset 0x0008 Type _MJVTBL_UINT64
        bool   Locked;                ///< Offset 0x0010 Type _MJVTBL_BOOL
        bool   Extended;              ///< Offset 0x0011 Type _MJVTBL_BOOL
        uint32 TimeRemaining;         ///< Offset 0x0014 Type _MJVTBL_UINT32
        uint32 Completed_mask;        ///< Offset 0x0018 Type _MJVTBL_UINT32
    };

    std::vector<ClientInstanceLock> Locks;                                  ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientInstanceLock>::MJVTBL
};

///< SMSG_CONSOLE_WRITE
struct ClientConsoleWrite
{
    uint32      Color;              ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string Line;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< SMSG_ACCOUNT_CRITERIA_UPDATE
struct ClientAccountCriteriaUpdate
{
    struct Progress_Struct
    {
        int32   Id;                    ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64  Quantity;              ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint64  Player;                ///< Offset 0x0010 Type _MJVTBL_UINT64
        int32   Flags;                 ///< Offset 0x0018 Type _MJVTBL_INT32
        uint8 * Date;                  ///< Offset 0x001C Type _MJVTBL_NOT_IMPLEMENTED
        uint32  TimeFromStart;         ///< Offset 0x0040 Type _MJVTBL_TIME_T
        uint32  TimeFromCreate;        ///< Offset 0x0048 Type _MJVTBL_TIME_T
    };

    Progress_Struct Progress;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_PLAY_SCENE
struct ClientPlayScene
{
    struct PlayData_Struct
    {
        uint64       TransportGUID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32        SceneID;                     ///< Offset 0x0008 Type _MJVTBL_INT32
        uint32       PlaybackFlags;               ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32       SceneInstanceID;             ///< Offset 0x0010 Type _MJVTBL_UINT32
        int32        SceneScriptPackageID;        ///< Offset 0x0014 Type _MJVTBL_INT32
        G3D::Vector3 Pos;                         ///< Offset 0x0018 Type _MJVTBL_V3
        float        Facing;                      ///< Offset 0x0024 Type _MJVTBL_FLOAT
    };

    PlayData_Struct PlayData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_CANCEL_SCENE
struct ClientCancelScene
{
    uint32 SceneInstanceID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_BATTLE_PET_ERROR
struct ClientBattlePetError
{
    BATTLEPETRESULT BattlePetResult;        ///< Offset 0x0000 Type _MJVTBL_BATTLEPETRESULT
    int32           CreatureID;             ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_PET_BATTLE_QUEUE_PROPOSE_MATCH
struct ClientPetBattleQueueProposeMatch
{
};

///< SMSG_PET_BATTLE_QUEUE_STATUS
struct ClientPetBattleQueueStatus
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    int32              Status;                    ///< Offset 0x0000 Type _MJVTBL_INT32
    std::vector<int32> SlotResult;                ///< Offset 0x0008 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    Ticket_Struct      Ticket;                    ///< Offset 0x0020 Type _MJVTBL_STRUCT
    Optional<int32>    AverageWaitTime;           ///< Offset 0x0038 Type MakeMJVTblForOptional<long,&(MJVTBL_TIME_T)>::MJVTBL
    Optional<int32>    ClientWaitTime;            ///< Offset 0x0048 Type MakeMJVTblForOptional<long,&(MJVTBL_TIME_T)>::MJVTBL
};

///< SMSG_MAIL_COMMAND_RESULT
struct ClientMailCommandResult
{
    int32 Command;               ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 MailID;                ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 QtyInInventory;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 BagResult;             ///< Offset 0x000C Type _MJVTBL_INT32
    int32 AttachID;              ///< Offset 0x0010 Type _MJVTBL_INT32
    int32 ErrorCode;             ///< Offset 0x0014 Type _MJVTBL_INT32
};

///< SMSG_NOTIFY_RECEIVED_MAIL
struct ClientNotifyReceivedMail
{
    float Delay;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_ADD_BATTLENET_FRIEND_RESPONSE
struct ClientAddBattlenetFriendResponse
{
    Optional<uint16>           BattlenetError;                    ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
    uint64                     ClientToken;                       ///< Offset 0x0008 Type _MJVTBL_UINT64
    JamAddBattlenetFriendError Result;                            ///< Offset 0x0010 Type _MJVTBL_JamAddBattlenetFriendError
};

///< SMSG_ITEM_UPGRADE_RESULT
struct ClientItemUpgradeResult
{
    bool Result;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_MOVE_CHARACTER_CHEAT_SUCCESS
struct ClientMoveCharacterCheatSuccess
{
    uint64       CharacterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    G3D::Vector3 Position;             ///< Offset 0x0008 Type _MJVTBL_V3
    int32        MapID;                ///< Offset 0x0014 Type _MJVTBL_INT32
};

///< SMSG_MOVE_CHARACTER_CHEAT_FAILURE
struct ClientMoveCharacterCheatFailure
{
};

///< SMSG_ACHIEVEMENT_EARNED
struct ClientAchievementEarned
{
    uint32  EarnerNativeRealm;         ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool    Initial;                   ///< Offset 0x0004 Type _MJVTBL_BOOL
    uint64  Earner;                    ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8 * Time;                      ///< Offset 0x0010 Type _MJVTBL_NOT_IMPLEMENTED
    int32   AchievementID;             ///< Offset 0x0030 Type _MJVTBL_INT32
    uint32  EarnerVirtualRealm;        ///< Offset 0x0034 Type _MJVTBL_UINT32
    uint64  Sender;                    ///< Offset 0x0038 Type _MJVTBL_UINT64
};

///< SMSG_AREA_SHARE_INFO_RESPONSE
struct ClientAreaShareInfoResponse
{
    uint32              AreaShareInfoID;            ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32              CurrentRealm;               ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32              AreaID;                     ///< Offset 0x0008 Type _MJVTBL_UINT32
    std::vector<uint32> OtherRealms;                ///< Offset 0x0010 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
};

///< SMSG_OPEN_LFGDUNGEON_FINDER
struct ClientOpenLFGDungeonFinder
{
    int32 DungeonID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_LFGTELEPORT_DENIED
struct ClientLFGTeleportDenied
{
    LFG_TELEPORT_RESULT Reason;                     ///< Offset 0x0000 Type _MJVTBL_LFG_TELEPORT_RESULT
};

///< SMSG_AREA_SHARE_MAPPINGS_RESPONSE
struct ClientAreaShareMappingsResponse
{
    struct JamAreaShareMappingInfo
    {
        uint32              AreaShareID;                ///< Offset 0x0000 Type _MJVTBL_UINT32
        std::vector<uint32> AreaIDs;                    ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32              HostingRealm;               ///< Offset 0x0020 Type _MJVTBL_UINT32
        std::vector<uint32> OtherRealms;                ///< Offset 0x0028 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    };

    std::vector<JamAreaShareMappingInfo> Mappings;                                    ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamAreaShareMappingInfo>::MJVTBL
};

///< SMSG_BONUS_ROLL_EMPTY
struct ClientBonusRollEmpty
{
};

///< SMSG_UPDATE_EXPANSION_LEVEL
struct ClientUpdateExpansionLevel
{
    struct JamRaceClassAvailability
    {
        uint8 RaceOrClassID;            ///< Offset 0x0000 Type _MJVTBL_UINT8
        uint8 RequiredExpansion;        ///< Offset 0x0001 Type _MJVTBL_UINT8
    };

    std::vector<JamRaceClassAvailability> AvailableClasses;                             ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamRaceClassAvailability>::MJVTBL
    Optional<uint8>                       ActiveExpansionLevel;                         ///< Offset 0x0018 Type MakeMJVTblForOptional<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
    std::vector<JamRaceClassAvailability> AvailableRaces;                               ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<JamRaceClassAvailability>::MJVTBL
};

///< SMSG_CONTROL_UPDATE
struct ClientControlUpdate
{
    bool   On;            ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 Guid;          ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_ARENA_PREP_OPPONENT_SPECIALIZATIONS
struct ClientArenaPrepOpponentSpecializations
{
    struct JamClientOpponentSpecData
    {
        uint64 Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  SpecializationID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    std::vector<JamClientOpponentSpecData> OpponentData;                                  ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientOpponentSpecData>::MJVTBL
};

///< SMSG_GMTICKET_GET_TICKET_RESPONSE
struct ClientGMTicketGetTicketResponse
{
    struct JamClientGMTicketInfo
    {
        int32       TicketID;                       ///< Offset 0x0000 Type _MJVTBL_INT32
        std::string TicketDescription;              ///< Offset 0x0004 Type _MJVTBL_STRING
        uint8       Category;                       ///< Offset 0x07D5 Type _MJVTBL_UINT8
        uint32      TicketOpenTime;                 ///< Offset 0x07D8 Type _MJVTBL_TIME_T
        uint32      OldestTicketTime;               ///< Offset 0x07E0 Type _MJVTBL_TIME_T
        uint32      UpdateTime;                     ///< Offset 0x07E8 Type _MJVTBL_TIME_T
        uint8       AssignedToGM;                   ///< Offset 0x07F0 Type _MJVTBL_UINT8
        uint8       OpenedByGM;                     ///< Offset 0x07F1 Type _MJVTBL_UINT8
        std::string WaitTimeOverrideMessage;        ///< Offset 0x07F2 Type _MJVTBL_STRING
        int32       WaitTimeOverrideMinutes;        ///< Offset 0x0BF4 Type _MJVTBL_INT32
    };

    Optional<JamClientGMTicketInfo> Info;                                   ///< Offset 0x0000 Type MakeMJVTblForOptionalStruct<JamClientGMTicketInfo>::MJVTBL
    int32                           Result;                                 ///< Offset 0x0C00 Type _MJVTBL_INT32
};

///< SMSG_NUKE_ALL_OBJECTS_DUE_TO_SEAMLESS_PORT
struct ClientNukeAllObjectsDueToSeamlessPort
{
};

///< SMSG_GMNOTIFY_AREA_CHANGE
struct ClientGMNotifyAreaChange
{
    struct JamRealmName
    {
        std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    struct CurrentRealm_Struct
    {
        std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    std::vector<JamRealmName> OtherRealms;                      ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamRealmName>::MJVTBL
    std::string               AreaShareInternalName;            ///< Offset 0x0018 Type _MJVTBL_STRING
    CurrentRealm_Struct       CurrentRealm;                     ///< Offset 0x007C Type _MJVTBL_STRUCT
    uint8                     AreaShareID;                      ///< Offset 0x017D Type _MJVTBL_UINT8
    uint32                    AreaID;                           ///< Offset 0x0180 Type _MJVTBL_UINT32
    uint32                    CurrentRealmAddress;              ///< Offset 0x0184 Type _MJVTBL_UINT32
};

///< SMSG_FORCE_OBJECT_RELINK
struct ClientForceObjectRelink
{
    uint64 ObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_DISPLAY_PROMOTION
struct ClientDisplayPromotion
{
    int32 PromotionID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_SET_PROMOTION_RESPONSE
struct ClientSetPromotionResponse
{
    bool  Success;            ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 PromotionID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_SERVER_FIRST_ACHIEVEMENTS
struct ClientServerFirstAchievements
{
    struct JamServerFirstAchievement
    {
        uint64 PlayerGuid;           ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  AchievementID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    std::vector<JamServerFirstAchievement> Achievements;                                  ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamServerFirstAchievement>::MJVTBL
};

///< SMSG_CORPSE_LOCATION
struct ClientCorpseLocation
{
    uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    G3D::Vector3 Position;            ///< Offset 0x0008 Type _MJVTBL_V3
    int32        ActualMapID;         ///< Offset 0x0014 Type _MJVTBL_INT32
    bool         Valid;               ///< Offset 0x0018 Type _MJVTBL_BOOL
    int32        MapID;               ///< Offset 0x001C Type _MJVTBL_INT32
};

///< SMSG_BREAK_TARGET
struct ClientBreakTarget
{
    uint64 UnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_ATTACK_START
struct ClientAttackStart
{
    uint64 Attacker;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Victim;          ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_ATTACK_STOP
struct ClientAttackStop
{
    uint64 Attacker;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Victim;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   NowDead;         ///< Offset 0x0010 Type _MJVTBL_BOOL
};

///< SMSG_COMBAT_EVENT_FAILED
struct ClientCombatEventFailed
{
    uint64 Victim;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Attacker;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_DUEL_REQUESTED
struct ClientDuelRequested
{
    uint64 ArbiterGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 RequestedByGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_DUEL_OUT_OF_BOUNDS
struct ClientDuelOutOfBounds
{
};

///< SMSG_DUEL_IN_BOUNDS
struct ClientDuelInBounds
{
};

///< SMSG_DUEL_COUNTDOWN
struct ClientDuelCountdown
{
    uint32 Countdown;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_DUEL_COMPLETE
struct ClientDuelComplete
{
    bool Started;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_DUEL_WINNER
struct ClientDuelWinner
{
    std::string BeatenName;                       ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string WinnerName;                       ///< Offset 0x0031 Type _MJVTBL_STRING
    bool        Fled;                             ///< Offset 0x0062 Type _MJVTBL_BOOL
    uint32      BeatenVirtualRealmAddress;        ///< Offset 0x0064 Type _MJVTBL_UINT32
    uint32      WinnerVirtualRealmAddress;        ///< Offset 0x0068 Type _MJVTBL_UINT32
};

///< SMSG_CAN_DUEL_RESULT
struct ClientCanDuelResult
{
    bool   Result;            ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 TargetGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_IMMIGRANT_HOST_SEARCH_LOG
struct ClientImmigrantHostSearchLog
{
    struct JamImmigrantHostSearchLog
    {
        uint64            PartyMember;              ///< Offset 0x0000 Type _MJVTBL_UINT64
        bool              IsLeader;                 ///< Offset 0x0008 Type _MJVTBL_BOOL
        uint32            Realm;                    ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32            ImmigrantPop;             ///< Offset 0x0010 Type _MJVTBL_UINT32
        IMMIGRATION_STATE State;                    ///< Offset 0x0014 Type _MJVTBL_IMMIGRATION_STATE
    };

    bool                                   Success;                                       ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<JamImmigrantHostSearchLog> Entries;                                       ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamImmigrantHostSearchLog>::MJVTBL
};

///< SMSG_REFRESH_COMPONENT
struct ClientRefreshComponent
{
};

///< SMSG_ACCOUNT_PROFILE
struct ClientAccountProfile
{
    std::string Filename;           ///< Offset 0x0000 Type _MJVTBL_STRING
    uint8 *     Profile;            ///< Offset 0x0040 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_CHALLENGE_MODE_DUMP_LEADERS_RESULT
struct ClientChallengeModeDumpLeadersResult
{
    struct ClientChallengeModeAttempt
    {
        struct ClientChallengeModeMember
        {
            uint64 Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 VirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 NativeRealmAddress;         ///< Offset 0x000C Type _MJVTBL_UINT32
            int32  SpecializationID;           ///< Offset 0x0010 Type _MJVTBL_INT32
        };

        uint32                                 InstanceRealmAddress;                          ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32                                 AttemptID;                                     ///< Offset 0x0004 Type _MJVTBL_UINT32
        int32                                  CompletionTime;                                ///< Offset 0x0008 Type _MJVTBL_INT32
        uint8 *                                CompletionDate;                                ///< Offset 0x000C Type _MJVTBL_NOT_IMPLEMENTED
        int32                                  MedalEarned;                                   ///< Offset 0x002C Type _MJVTBL_INT32
        std::vector<ClientChallengeModeMember> Members;                                       ///< Offset 0x0030 Type MakeMJVTblForArrayOfStruct<ClientChallengeModeMember>::MJVTBL
    };

    int32                                   MapID;                                          ///< Offset 0x0000 Type _MJVTBL_INT32
    bool                                    Success;                                        ///< Offset 0x0004 Type _MJVTBL_BOOL
    std::vector<ClientChallengeModeAttempt> Leaders;                                        ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientChallengeModeAttempt>::MJVTBL
};

///< SMSG_CHALLENGE_MODE_DELETE_LEADER_RESULT
struct ClientChallengeModeDeleteLeaderResult
{
    int32  MapID;            ///< Offset 0x0000 Type _MJVTBL_INT32
    uint32 AttemptID;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    bool   Success;          ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< SMSG_DEBUG_DRAW_LINE
struct ClientDebugDrawLine
{
    float        Thickness;           ///< Offset 0x0000 Type _MJVTBL_FLOAT
    G3D::Vector3 A;                   ///< Offset 0x0004 Type _MJVTBL_V3
    G3D::Vector3 B;                   ///< Offset 0x0010 Type _MJVTBL_V3
    uint32       Colora;              ///< Offset 0x001C Type _MJVTBL_UINT32
    uint32       Colorb;              ///< Offset 0x0020 Type _MJVTBL_UINT32
    uint32       Id;                  ///< Offset 0x0024 Type _MJVTBL_UINT32
    uint32       Settings;            ///< Offset 0x0028 Type _MJVTBL_UINT32
    float        Lifetime;            ///< Offset 0x002C Type _MJVTBL_FLOAT
};

///< SMSG_DEBUG_DRAW_QUAD
struct ClientDebugDrawQuad
{
    G3D::Vector2 Size;                ///< Offset 0x0000 Type _MJVTBL_V2
    float        Lifetime;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
    uint32       Settings;            ///< Offset 0x000C Type _MJVTBL_UINT32
    std::string  Texture;             ///< Offset 0x0010 Type _MJVTBL_STRING
    uint32       Id;                  ///< Offset 0x0114 Type _MJVTBL_UINT32
    G3D::Vector2 TopLeft;             ///< Offset 0x0118 Type _MJVTBL_V2
    uint32       Flags;               ///< Offset 0x0120 Type _MJVTBL_UINT32
    G3D::Vector2 Uv_max;              ///< Offset 0x0124 Type _MJVTBL_V2
    uint32       Color;               ///< Offset 0x012C Type _MJVTBL_UINT32
    G3D::Vector2 Uv_min;              ///< Offset 0x0130 Type _MJVTBL_V2
};

///< SMSG_DEBUG_DRAW_TRIANGLE
struct ClientDebugDrawTriangle
{
    uint32       Colorb;              ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32       Colora;              ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32       Settings;            ///< Offset 0x0008 Type _MJVTBL_UINT32
    G3D::Vector3 A;                   ///< Offset 0x000C Type _MJVTBL_V3
    G3D::Vector3 C;                   ///< Offset 0x0018 Type _MJVTBL_V3
    uint32       Colorc;              ///< Offset 0x0024 Type _MJVTBL_UINT32
    G3D::Vector3 B;                   ///< Offset 0x0028 Type _MJVTBL_V3
    uint32       Id;                  ///< Offset 0x0034 Type _MJVTBL_UINT32
    float        Lifetime;            ///< Offset 0x0038 Type _MJVTBL_FLOAT
};

///< SMSG_DEBUG_DRAW_SPHERE
struct ClientDebugDrawSphere
{
    float        Lifetime;            ///< Offset 0x0000 Type _MJVTBL_FLOAT
    uint32       Settings;            ///< Offset 0x0004 Type _MJVTBL_UINT32
    float        Radius;              ///< Offset 0x0008 Type _MJVTBL_FLOAT
    G3D::Vector3 Center;              ///< Offset 0x000C Type _MJVTBL_V3
    uint32       Id;                  ///< Offset 0x0018 Type _MJVTBL_UINT32
    uint32       Color;               ///< Offset 0x001C Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_BOX
struct ClientDebugDrawBox
{
    uint32       Id;                  ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32       Color;               ///< Offset 0x0004 Type _MJVTBL_UINT32
    float        Lifetime;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
    G3D::Vector3 Extents;             ///< Offset 0x000C Type _MJVTBL_V3
    G3D::Vector4 Matrix30;            ///< Offset 0x0018 Type _MJVTBL_V4
    uint32       Settings;            ///< Offset 0x0028 Type _MJVTBL_UINT32
    G3D::Vector4 Matrix10;            ///< Offset 0x002C Type _MJVTBL_V4
    G3D::Vector4 Matrix20;            ///< Offset 0x003C Type _MJVTBL_V4
    G3D::Vector4 Matrix00;            ///< Offset 0x004C Type _MJVTBL_V4
};

///< SMSG_DEBUG_DRAW_CONE
struct ClientDebugDrawCone
{
    G3D::Vector3 Base;                ///< Offset 0x0000 Type _MJVTBL_V3
    float        Baseradius;          ///< Offset 0x000C Type _MJVTBL_FLOAT
    uint32       Id;                  ///< Offset 0x0010 Type _MJVTBL_UINT32
    G3D::Vector3 Direction;           ///< Offset 0x0014 Type _MJVTBL_V3
    float        Height;              ///< Offset 0x0020 Type _MJVTBL_FLOAT
    uint32       Color;               ///< Offset 0x0024 Type _MJVTBL_UINT32
    float        Lifetime;            ///< Offset 0x0028 Type _MJVTBL_FLOAT
    uint32       Settings;            ///< Offset 0x002C Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_CYLINDER
struct ClientDebugDrawCylinder
{
    uint32       Id;                  ///< Offset 0x0000 Type _MJVTBL_UINT32
    float        Height;              ///< Offset 0x0004 Type _MJVTBL_FLOAT
    G3D::Vector3 Base;                ///< Offset 0x0008 Type _MJVTBL_V3
    float        Lifetime;            ///< Offset 0x0014 Type _MJVTBL_FLOAT
    uint32       Settings;            ///< Offset 0x0018 Type _MJVTBL_UINT32
    G3D::Vector3 Direction;           ///< Offset 0x001C Type _MJVTBL_V3
    float        Radius;              ///< Offset 0x0028 Type _MJVTBL_FLOAT
    uint32       Color;               ///< Offset 0x002C Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_DISK
struct ClientDebugDrawDisk
{
    float        Lifetime;            ///< Offset 0x0000 Type _MJVTBL_FLOAT
    G3D::Vector3 Normal;              ///< Offset 0x0004 Type _MJVTBL_V3
    float        Outterradius;        ///< Offset 0x0010 Type _MJVTBL_FLOAT
    G3D::Vector3 Center;              ///< Offset 0x0014 Type _MJVTBL_V3
    uint32       Settings;            ///< Offset 0x0020 Type _MJVTBL_UINT32
    uint32       Color;               ///< Offset 0x0024 Type _MJVTBL_UINT32
    float        Innerradius;         ///< Offset 0x0028 Type _MJVTBL_FLOAT
    uint32       Id;                  ///< Offset 0x002C Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_SLICE
struct ClientDebugDrawSlice
{
    G3D::Vector3 Direction;           ///< Offset 0x0000 Type _MJVTBL_V3
    G3D::Vector3 Center;              ///< Offset 0x000C Type _MJVTBL_V3
    float        EndAngle;            ///< Offset 0x0018 Type _MJVTBL_FLOAT
    uint32       Color;               ///< Offset 0x001C Type _MJVTBL_UINT32
    float        Outterradius;        ///< Offset 0x0020 Type _MJVTBL_FLOAT
    float        Innerradius;         ///< Offset 0x0024 Type _MJVTBL_FLOAT
    float        StartAngle;          ///< Offset 0x0028 Type _MJVTBL_FLOAT
    float        Lifetime;            ///< Offset 0x002C Type _MJVTBL_FLOAT
    uint32       Id;                  ///< Offset 0x0030 Type _MJVTBL_UINT32
    G3D::Vector3 Normal;              ///< Offset 0x0034 Type _MJVTBL_V3
    uint32       Settings;            ///< Offset 0x0040 Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_ARROW
struct ClientDebugDrawArrow
{
    float        Headscale;           ///< Offset 0x0000 Type _MJVTBL_FLOAT
    uint32       Settings;            ///< Offset 0x0004 Type _MJVTBL_UINT32
    float        Lifetime;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
    G3D::Vector3 Location;            ///< Offset 0x000C Type _MJVTBL_V3
    uint32       Color;               ///< Offset 0x0018 Type _MJVTBL_UINT32
    G3D::Vector3 Direction;           ///< Offset 0x001C Type _MJVTBL_V3
    uint32       Id;                  ///< Offset 0x0028 Type _MJVTBL_UINT32
    float        Length;              ///< Offset 0x002C Type _MJVTBL_FLOAT
};

///< SMSG_DEBUG_DRAW_MATRIX
struct ClientDebugDrawMatrix
{
    float        Lifetime;            ///< Offset 0x0000 Type _MJVTBL_FLOAT
    G3D::Vector4 Matrix00;            ///< Offset 0x0004 Type _MJVTBL_V4
    uint32       Colory;              ///< Offset 0x0014 Type _MJVTBL_UINT32
    G3D::Vector4 Matrix30;            ///< Offset 0x0018 Type _MJVTBL_V4
    uint32       Id;                  ///< Offset 0x0028 Type _MJVTBL_UINT32
    uint32       Colorz;              ///< Offset 0x002C Type _MJVTBL_UINT32
    G3D::Vector4 Matrix20;            ///< Offset 0x0030 Type _MJVTBL_V4
    uint32       Settings;            ///< Offset 0x0040 Type _MJVTBL_UINT32
    G3D::Vector4 Matrix10;            ///< Offset 0x0044 Type _MJVTBL_V4
    float        Axisscale;           ///< Offset 0x0054 Type _MJVTBL_FLOAT
    uint32       Colorx;              ///< Offset 0x0058 Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_TEXT
struct ClientDebugDrawText
{
    uint8        Alignment;           ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint32       Id;                  ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32       Color;               ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32       Settings;            ///< Offset 0x000C Type _MJVTBL_UINT32
    float        Lifetime;            ///< Offset 0x0010 Type _MJVTBL_FLOAT
    float        Height;              ///< Offset 0x0014 Type _MJVTBL_FLOAT
    G3D::Vector2 Location;            ///< Offset 0x0018 Type _MJVTBL_V2
    std::string  Text;                ///< Offset 0x0020 Type _MJVTBL_STRING
};

///< SMSG_DEBUG_DRAW_TEXT3_D
struct ClientDebugDrawText3D
{
    uint32       Settings;            ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string  Text;                ///< Offset 0x0004 Type _MJVTBL_STRING
    uint32       Id;                  ///< Offset 0x0804 Type _MJVTBL_UINT32
    uint32       Color;               ///< Offset 0x0808 Type _MJVTBL_UINT32
    uint8        Alignment;           ///< Offset 0x080C Type _MJVTBL_UINT8
    G3D::Vector3 Location;            ///< Offset 0x0810 Type _MJVTBL_V3
    float        Height;              ///< Offset 0x081C Type _MJVTBL_FLOAT
    float        Lifetime;            ///< Offset 0x0820 Type _MJVTBL_FLOAT
};

///< SMSG_DEBUG_DRAW_CANCEL
struct ClientDebugDrawCancel
{
    uint32 Id;            ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_ADD_GRAPH
struct ClientDebugDrawAddGraph
{
    std::string  Label;                     ///< Offset 0x0000 Type _MJVTBL_STRING
    G3D::Vector2 Bounds_min;                ///< Offset 0x0080 Type _MJVTBL_V2
    uint32       Height;                    ///< Offset 0x0088 Type _MJVTBL_UINT32
    uint32       Flags;                     ///< Offset 0x008C Type _MJVTBL_UINT32
    uint32       DefaultSampleColor;        ///< Offset 0x0090 Type _MJVTBL_UINT32
    uint32       SampleCapacity;            ///< Offset 0x0094 Type _MJVTBL_UINT32
    uint32       Id;                        ///< Offset 0x0098 Type _MJVTBL_UINT32
    G3D::Vector2 Bounds_max;                ///< Offset 0x009C Type _MJVTBL_V2
    uint32       Width;                     ///< Offset 0x00A4 Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_ADD_GRAPH_AT
struct ClientDebugDrawAddGraphAt
{
    std::string  Label;                     ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32       DefaultSampleColor;        ///< Offset 0x0080 Type _MJVTBL_UINT32
    G3D::Vector2 Bounds_min;                ///< Offset 0x0084 Type _MJVTBL_V2
    G3D::Vector2 Bounds_max;                ///< Offset 0x008C Type _MJVTBL_V2
    uint32       Width;                     ///< Offset 0x0094 Type _MJVTBL_UINT32
    int32        X;                         ///< Offset 0x0098 Type _MJVTBL_INT32
    uint32       Height;                    ///< Offset 0x009C Type _MJVTBL_UINT32
    int32        Y;                         ///< Offset 0x00A0 Type _MJVTBL_INT32
    uint32       SampleCapacity;            ///< Offset 0x00A4 Type _MJVTBL_UINT32
    uint32       Flags;                     ///< Offset 0x00A8 Type _MJVTBL_UINT32
    uint32       Id;                        ///< Offset 0x00AC Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_HIDE_GRAPH
struct ClientDebugDrawHideGraph
{
    bool   Hide;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32 Id;            ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_RESET_GRAPH
struct ClientDebugDrawResetGraph
{
    uint32 Id;            ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_DESTROY_GRAPH
struct ClientDebugDrawDestroyGraph
{
    uint32 Id;            ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_SET_GRAPH_BOUNDS
struct ClientDebugDrawSetGraphBounds
{
    G3D::Vector2 Bounds_max;          ///< Offset 0x0000 Type _MJVTBL_V2
    uint32       Id;                  ///< Offset 0x0008 Type _MJVTBL_UINT32
    G3D::Vector2 Bounds_min;          ///< Offset 0x000C Type _MJVTBL_V2
};

///< SMSG_DEBUG_DRAW_SET_GRAPH_FRAME
struct ClientDebugDrawSetGraphFrame
{
    uint32 Height;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 Width;         ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32 Id;            ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_SET_GRAPH_FRAME_AT
struct ClientDebugDrawSetGraphFrameAt
{
    int32  Y;             ///< Offset 0x0000 Type _MJVTBL_INT32
    uint32 Id;            ///< Offset 0x0004 Type _MJVTBL_UINT32
    int32  X;             ///< Offset 0x0008 Type _MJVTBL_INT32
    uint32 Height;        ///< Offset 0x000C Type _MJVTBL_UINT32
    uint32 Width;         ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_ADD_SAMPLE
struct ClientDebugDrawAddSample
{
    uint32 Id;              ///< Offset 0x0000 Type _MJVTBL_UINT32
    float  X;               ///< Offset 0x0004 Type _MJVTBL_FLOAT
    float  Y;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
    uint32 SourceID;        ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_DEBUG_DRAW_SET_SOURCE_COLOR
struct ClientDebugDrawSetSourceColor
{
    uint32 Color;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 Id;              ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32 SourceID;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_LOSS_OF_CONTROL_AURA_UPDATE
struct ClientLossOfControlAuraUpdate
{
    struct JamLossOfControlInfo
    {
        uint8 AuraSlot;           ///< Offset 0x0000 Type _MJVTBL_UINT8
        uint8 EffectIndex;        ///< Offset 0x0001 Type _MJVTBL_UINT8
        int32 Type;               ///< Offset 0x0004 Type _MJVTBL_INT32
        int32 Mechanic;           ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    std::vector<JamLossOfControlInfo> LossOfControlInfo;                        ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamLossOfControlInfo>::MJVTBL
};

///< SMSG_ADD_LOSS_OF_CONTROL
struct ClientAddLossOfControl
{
    uint32 DurationRemaining;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint64 Caster;                   ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 Duration;                 ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint32 LockoutSchoolMask;        ///< Offset 0x0014 Type _MJVTBL_UINT32
    int32  SpellID;                  ///< Offset 0x0018 Type _MJVTBL_INT32
    int32  Type;                     ///< Offset 0x001C Type _MJVTBL_INT32
    int32  Mechanic;                 ///< Offset 0x0020 Type _MJVTBL_INT32
};

///< SMSG_REMOVE_LOSS_OF_CONTROL
struct ClientRemoveLossOfControl
{
    int32  SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64 Caster;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  Type;           ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_CLEAR_LOSS_OF_CONTROL
struct ClientClearLossOfControl
{
};

///< SMSG_DEBUG_DRAW_AURA
struct ClientDebugDrawAura
{
    uint64       Caster;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32        SpellID;             ///< Offset 0x0008 Type _MJVTBL_INT32
    G3D::Vector3 Position;            ///< Offset 0x000C Type _MJVTBL_V3
};

///< SMSG_QUERY_OBJ_POSITION
struct ClientQueryObjPosition
{
    float        Facing;              ///< Offset 0x0000 Type _MJVTBL_FLOAT
    G3D::Vector3 Position;            ///< Offset 0x0004 Type _MJVTBL_V3
    uint32       MapID;               ///< Offset 0x0010 Type _MJVTBL_UINT32
    bool         ToClipboard;         ///< Offset 0x0014 Type _MJVTBL_BOOL
};

///< SMSG_QUERY_OBJ_ROTATION
struct ClientQueryObjRotation
{
    float AnchorFacing;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
    float Facing;              ///< Offset 0x0004 Type _MJVTBL_FLOAT
};

///< SMSG_PET_BATTLE_DEBUG_QUEUE_DUMP_RESPONSE
struct ClientPetBattleDebugQueueDumpResponse
{
    struct PBQueueDumpMember
    {
        uint64 MemberGUID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
        float  AverageTeamRating;        ///< Offset 0x0008 Type _MJVTBL_FLOAT
        float  CurrentTolerance;         ///< Offset 0x000C Type _MJVTBL_FLOAT
        uint32 SecondsInQueue;           ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    std::vector<PBQueueDumpMember> Members;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<PBQueueDumpMember>::MJVTBL
    uint32                         AverageQueueTime;                      ///< Offset 0x0018 Type _MJVTBL_TIME_T
};

///< SMSG_AREA_TRIGGER_DENIED
struct ClientAreaTriggerDenied
{
    bool  Entered;              ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 AreaTriggerID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_SET_SERVER_WOW_TIME
struct ClientSetServerWowTime
{
    uint32 EncodedTime;          ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32  HolidayOffset;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_SET_TIME_ZONE_INFORMATION
struct ClientSetTimeZoneInformation
{
    std::string ServerTimeTZ;        ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string GameTimeTZ;          ///< Offset 0x0080 Type _MJVTBL_STRING
};

///< SMSG_BATTLE_PET_CAGE_DATE_ERROR
struct ClientBattlePetCageDateError
{
    int32 SecondsUntilCanCage;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_DISPLAY_PLAYER_CHOICE
struct ClientDisplayPlayerChoice
{
    struct PlayerChoiceResponse
    {
        struct PlayerChoiceResponseReward
        {
            struct PlayerChoiceResponseRewardEntry
            {
                int32 Id;               ///< Offset 0x0000 Type _MJVTBL_INT32
                int32 DisplayID;        ///< Offset 0x0004 Type _MJVTBL_INT32
                int32 Quantity;         ///< Offset 0x0008 Type _MJVTBL_INT32
            };

            int32                                        TitleID;                                             ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                                        PackageID;                                           ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                                        SkillLineID;                                         ///< Offset 0x0008 Type _MJVTBL_INT32
            uint32                                       SkillPointCount;                                     ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                                       ArenaPointCount;                                     ///< Offset 0x0010 Type _MJVTBL_UINT32
            uint32                                       HonorPointCount;                                     ///< Offset 0x0014 Type _MJVTBL_UINT32
            uint64                                       Money;                                               ///< Offset 0x0018 Type _MJVTBL_UINT64
            uint32                                       Xp;                                                  ///< Offset 0x0020 Type _MJVTBL_UINT32
            std::vector<PlayerChoiceResponseRewardEntry> Items;                                               ///< Offset 0x0028 Type MakeMJVTblForArrayOfStruct<PlayerChoiceResponseRewardEntry>::MJVTBL
            std::vector<PlayerChoiceResponseRewardEntry> Currencies;                                          ///< Offset 0x0040 Type MakeMJVTblForArrayOfStruct<PlayerChoiceResponseRewardEntry>::MJVTBL
            std::vector<PlayerChoiceResponseRewardEntry> Factions;                                            ///< Offset 0x0058 Type MakeMJVTblForArrayOfStruct<PlayerChoiceResponseRewardEntry>::MJVTBL
            std::vector<PlayerChoiceResponseRewardEntry> ItemChoices;                                         ///< Offset 0x0070 Type MakeMJVTblForArrayOfStruct<PlayerChoiceResponseRewardEntry>::MJVTBL
        };

        int32                                ResponseID;                                  ///< Offset 0x0000 Type _MJVTBL_INT32
        std::string                          Answer;                                      ///< Offset 0x0004 Type _MJVTBL_STRING
        std::string                          Description;                                 ///< Offset 0x0194 Type _MJVTBL_STRING
        int32                                ChoiceArtFileID;                             ///< Offset 0x07D4 Type _MJVTBL_INT32
        Optional<PlayerChoiceResponseReward> Reward;                                      ///< Offset 0x07D8 Type MakeMJVTblForOptionalStruct<PlayerChoiceResponseReward>::MJVTBL
    };

    int32                             ChoiceID;                                 ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string                       Question;                                 ///< Offset 0x0004 Type _MJVTBL_STRING
    std::vector<PlayerChoiceResponse> Responses;                                ///< Offset 0x0108 Type MakeMJVTblForArrayOfStruct<PlayerChoiceResponse>::MJVTBL
};

///< SMSG_SHOW_ZONES_CHEAT_RESULT
struct ClientShowZonesCheatResult
{
    struct ShowZoneRLE
    {
        int32 Run;          ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8 CurID;        ///< Offset 0x0004 Type _MJVTBL_UINT8
    };

    std::vector<ShowZoneRLE> Run;                             ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ShowZoneRLE>::MJVTBL
};

///< SMSG_TEXT_EMOTE
struct ClientTextEmote
{
    uint64 SourceGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 TargetGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  SoundIndex;        ///< Offset 0x0010 Type _MJVTBL_INT32
    int32  EmoteID;           ///< Offset 0x0014 Type _MJVTBL_INT32
};

///< SMSG_PET_GOD_MODE
struct ClientPetGodMode
{
    bool Enabled;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_TAXI_NODE_STATUS
struct ClientTaxiNodeStatus
{
    TAXISTATUS Status;            ///< Offset 0x0000 Type _MJVTBL_TAXISTATUS
    uint64     Unit;              ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_ACTIVATE_TAXI_REPLY
struct ClientActivateTaxiReply
{
    TAXIREPLY Error;            ///< Offset 0x0000 Type _MJVTBL_TAXIREPLY
};

///< SMSG_NEW_TAXI_PATH
struct ClientNewTaxiPath
{
};

///< SMSG_SHOW_BANK
struct ClientShowBank
{
    uint64 Banker;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_DBLOOKUP_RESULTS
struct ClientDBLookupResults
{
    uint32             NumResults;                ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<uint8> Results;                   ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
};

///< SMSG_GAME_SPEED_SET
struct ClientGameSpeedSet
{
    float NewSpeed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_SERVER_TIME
struct ClientServerTime
{
    uint32 LastTick;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 GameTime;        ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_LOGOUT_RESPONSE
struct ClientLogoutResponse
{
    int32 LogoutResult;        ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Instant;             ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< SMSG_LOGOUT_COMPLETE
struct ClientLogoutComplete
{
    uint64 SwitchToCharacter;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_LOGOUT_CANCEL_ACK
struct ClientLogoutCancelAck
{
};

///< SMSG_INSTANCE_RESET
struct ClientInstanceReset
{
    uint32 MapID;         ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_INSTANCE_RESET_FAILED
struct ClientInstanceResetFailed
{
    RESET_FAILED_REASON ResetFailedReason;          ///< Offset 0x0000 Type _MJVTBL_RESET_FAILED_REASON
    uint32              MapID;                      ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_UPDATE_LAST_INSTANCE
struct ClientUpdateLastInstance
{
    uint32 MapID;         ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_KICK_REASON
struct ClientKickReason
{
    uint8 Reason;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_GMCHANGE_PVPRATING
struct ClientGMChangePVPRating
{
    bool Success;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_CALENDAR_SEND_CALENDAR
struct ClientCalendarSendCalendar
{
    struct ClientCalendarSendCalendarEventInfo
    {
        uint64      EventID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
        std::string EventName;           ///< Offset 0x0008 Type _MJVTBL_STRING
        uint8       EventType;           ///< Offset 0x0089 Type _MJVTBL_UINT8
        uint32      Date;                ///< Offset 0x008C Type _MJVTBL_UINT32
        uint32      Flags;               ///< Offset 0x0090 Type _MJVTBL_UINT32
        int32       TextureID;           ///< Offset 0x0094 Type _MJVTBL_INT32
        uint64      EventGuildID;        ///< Offset 0x0098 Type _MJVTBL_UINT64
        uint64      OwnerGUID;           ///< Offset 0x00A0 Type _MJVTBL_UINT64
    };

    struct ClientCalendarSendCalendarRaidResetInfo
    {
        int32  MapID;           ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32 Duration;        ///< Offset 0x0004 Type _MJVTBL_UINT32
        int32  Offset;          ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    struct ClientCalendarSendCalendarRaidLockoutInfo
    {
        uint64 InstanceID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  MapID;               ///< Offset 0x0008 Type _MJVTBL_INT32
        uint32 DifficultyID;        ///< Offset 0x000C Type _MJVTBL_UINT32
        int32  ExpireTime;          ///< Offset 0x0010 Type _MJVTBL_INT32
    };

    struct ClientCalendarSendCalendarHolidayInfo
    {
        int32       HolidayID;                ///< Offset 0x0000 Type _MJVTBL_INT32
        int32       Region;                   ///< Offset 0x0004 Type _MJVTBL_INT32
        int32       Looping;                  ///< Offset 0x0008 Type _MJVTBL_INT32
        int32       Priority;                 ///< Offset 0x000C Type _MJVTBL_INT32
        int32       FilterType;               ///< Offset 0x0010 Type _MJVTBL_INT32
        std::string TextureFilename;          ///< Offset 0x0014 Type _MJVTBL_STRING
        int32       Date[26];                 ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOf<int,26,&(MJVTBL_INT32)>::MJVTBL
        int32       Duration[10];             ///< Offset 0x00BC Type MakeMJVTblForFixedArrayOf<int,10,&(MJVTBL_INT32)>::MJVTBL
        int32       CalendarFlags[10];        ///< Offset 0x00E4 Type MakeMJVTblForFixedArrayOf<int,10,&(MJVTBL_INT32)>::MJVTBL
    };

    struct ClientCalendarSendCalendarInviteInfo
    {
        uint64 EventID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64 InviteID;           ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint64 InviterGUID;        ///< Offset 0x0010 Type _MJVTBL_UINT64
        uint8  Status;             ///< Offset 0x0018 Type _MJVTBL_UINT8
        uint8  Moderator;          ///< Offset 0x0019 Type _MJVTBL_UINT8
        uint8  InviteType;         ///< Offset 0x001A Type _MJVTBL_UINT8
    };

    std::vector<ClientCalendarSendCalendarEventInfo>       Events;                                                        ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientCalendarSendCalendarEventInfo>::MJVTBL
    std::vector<ClientCalendarSendCalendarRaidResetInfo>   RaidResets;                                                    ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<ClientCalendarSendCalendarRaidResetInfo>::MJVTBL
    std::vector<ClientCalendarSendCalendarRaidLockoutInfo> RaidLockouts;                                                  ///< Offset 0x0030 Type MakeMJVTblForArrayOfStruct<ClientCalendarSendCalendarRaidLockoutInfo>::MJVTBL
    std::vector<ClientCalendarSendCalendarHolidayInfo>     Holidays;                                                      ///< Offset 0x0048 Type MakeMJVTblForArrayOfStruct<ClientCalendarSendCalendarHolidayInfo>::MJVTBL
    uint32                                                 RaidOrigin;                                                    ///< Offset 0x0060 Type _MJVTBL_TIME_T
    std::vector<ClientCalendarSendCalendarInviteInfo>      Invites;                                                       ///< Offset 0x0068 Type MakeMJVTblForArrayOfStruct<ClientCalendarSendCalendarInviteInfo>::MJVTBL
    uint32                                                 ServerTime;                                                    ///< Offset 0x0080 Type _MJVTBL_UINT32
    uint32                                                 ServerNow;                                                     ///< Offset 0x0088 Type _MJVTBL_TIME_T
};

///< SMSG_CALENDAR_SEND_EVENT
struct ClientCalendarSendEvent
{
    struct ClientCalendarEventInviteInfo
    {
        uint64      Guid;                ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64      InviteID;            ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint8       Level;               ///< Offset 0x0010 Type _MJVTBL_UINT8
        uint8       Status;              ///< Offset 0x0011 Type _MJVTBL_UINT8
        uint8       Moderator;           ///< Offset 0x0012 Type _MJVTBL_UINT8
        uint8       InviteType;          ///< Offset 0x0013 Type _MJVTBL_UINT8
        uint32      ResponseTime;        ///< Offset 0x0014 Type _MJVTBL_UINT32
        std::string Notes;               ///< Offset 0x0018 Type _MJVTBL_STRING
    };

    uint64                                     OwnerGUID;                                         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32                                     Date;                                              ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32                                     LockDate;                                          ///< Offset 0x000C Type _MJVTBL_UINT32
    uint8                                      GetEventType;                                      ///< Offset 0x0010 Type _MJVTBL_UINT8
    std::string                                Description;                                       ///< Offset 0x0011 Type _MJVTBL_STRING
    std::string                                EventName;                                         ///< Offset 0x0412 Type _MJVTBL_STRING
    int32                                      TextureID;                                         ///< Offset 0x0494 Type _MJVTBL_INT32
    uint32                                     Flags;                                             ///< Offset 0x0498 Type _MJVTBL_UINT32
    uint8                                      EventType;                                         ///< Offset 0x049C Type _MJVTBL_UINT8
    std::vector<ClientCalendarEventInviteInfo> Invites;                                           ///< Offset 0x04A0 Type MakeMJVTblForArrayOfStruct<ClientCalendarEventInviteInfo>::MJVTBL
    uint64                                     EventGuildID;                                      ///< Offset 0x04B8 Type _MJVTBL_UINT64
    uint64                                     EventID;                                           ///< Offset 0x04C0 Type _MJVTBL_UINT64
};

///< SMSG_CALENDAR_EVENT_INITIAL_INVITES
struct ClientCalendarEventInitialInvites
{
    struct CalendarEventInitialInviteInfo
    {
        uint64 InviteGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint8  Level;             ///< Offset 0x0008 Type _MJVTBL_UINT8
    };

    std::vector<CalendarEventInitialInviteInfo> Invites;                                            ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<CalendarEventInitialInviteInfo>::MJVTBL
};

///< SMSG_CALENDAR_EVENT_INVITE
struct ClientCalendarEventInvite
{
    uint64 InviteID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 ResponseTime;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8  Level;               ///< Offset 0x000C Type _MJVTBL_UINT8
    uint64 InviteGUID;          ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint64 EventID;             ///< Offset 0x0018 Type _MJVTBL_UINT64
    uint8  Type;                ///< Offset 0x0020 Type _MJVTBL_UINT8
    bool   ClearPending;        ///< Offset 0x0021 Type _MJVTBL_BOOL
    uint8  Status;              ///< Offset 0x0022 Type _MJVTBL_UINT8
};

///< SMSG_CALENDAR_EVENT_INVITE_ALERT
struct ClientCalendarEventInviteAlert
{
    uint8       Status;                 ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint64      OwnerGUID;              ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8       ModeratorStatus;        ///< Offset 0x0010 Type _MJVTBL_UINT8
    uint64      EventGuildID;           ///< Offset 0x0018 Type _MJVTBL_UINT64
    uint64      InvitedByGUID;          ///< Offset 0x0020 Type _MJVTBL_UINT64
    uint32      Flags;                  ///< Offset 0x0028 Type _MJVTBL_UINT32
    std::string EventName;              ///< Offset 0x002C Type _MJVTBL_STRING
    int32       TextureID;              ///< Offset 0x00B0 Type _MJVTBL_INT32
    uint64      InviteID;               ///< Offset 0x00B8 Type _MJVTBL_UINT64
    uint8       EventType;              ///< Offset 0x00C0 Type _MJVTBL_UINT8
    uint64      EventID;                ///< Offset 0x00C8 Type _MJVTBL_UINT64
    uint32      Date;                   ///< Offset 0x00D0 Type _MJVTBL_UINT32
};

///< SMSG_CALENDAR_EVENT_INVITE_STATUS
struct ClientCalendarEventInviteStatus
{
    uint32 Flags;               ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint64 EventID;             ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8  Status;              ///< Offset 0x0010 Type _MJVTBL_UINT8
    bool   ClearPending;        ///< Offset 0x0011 Type _MJVTBL_BOOL
    uint32 ResponseTime;        ///< Offset 0x0014 Type _MJVTBL_UINT32
    uint32 Date;                ///< Offset 0x0018 Type _MJVTBL_UINT32
    uint64 InviteGUID;          ///< Offset 0x0020 Type _MJVTBL_UINT64
};

///< SMSG_CALENDAR_EVENT_INVITE_STATUS_ALERT
struct ClientCalendarEventInviteStatusAlert
{
    uint64 EventID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Flags;          ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 Date;           ///< Offset 0x000C Type _MJVTBL_UINT32
    uint8  Status;         ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< SMSG_CALENDAR_EVENT_INVITE_MODERATOR_STATUS
struct ClientCalendarEventInviteModeratorStatus
{
    uint8  Status;              ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint64 InviteGUID;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 EventID;             ///< Offset 0x0010 Type _MJVTBL_UINT64
    bool   ClearPending;        ///< Offset 0x0018 Type _MJVTBL_BOOL
};

///< SMSG_CALENDAR_EVENT_INVITE_REMOVED
struct ClientCalendarEventInviteRemoved
{
    bool   ClearPending;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32 Flags;               ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint64 InviteGUID;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 EventID;             ///< Offset 0x0010 Type _MJVTBL_UINT64
};

///< SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT
struct ClientCalendarEventInviteRemovedAlert
{
    uint64 EventID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Date;           ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 Flags;          ///< Offset 0x000C Type _MJVTBL_UINT32
    uint8  Status;         ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< SMSG_CALENDAR_EVENT_REMOVED_ALERT
struct ClientCalendarEventRemovedAlert
{
    uint64 EventID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   ClearPending;        ///< Offset 0x0008 Type _MJVTBL_BOOL
    uint32 Date;                ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_CALENDAR_EVENT_UPDATED_ALERT
struct ClientCalendarEventUpdatedAlert
{
    uint8       EventType;           ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint32      OriginalDate;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    bool        ClearPending;        ///< Offset 0x0008 Type _MJVTBL_BOOL
    uint64      EventID;             ///< Offset 0x0010 Type _MJVTBL_UINT64
    std::string Description;         ///< Offset 0x0018 Type _MJVTBL_STRING
    uint32      Flags;               ///< Offset 0x041C Type _MJVTBL_UINT32
    int32       TextureID;           ///< Offset 0x0420 Type _MJVTBL_INT32
    std::string EventName;           ///< Offset 0x0424 Type _MJVTBL_STRING
    uint32      LockDate;            ///< Offset 0x04A8 Type _MJVTBL_UINT32
    uint32      Date;                ///< Offset 0x04AC Type _MJVTBL_UINT32
};

///< SMSG_CALENDAR_EVENT_INVITE_NOTES
struct ClientCalendarEventInviteNotes
{
    uint64      InviteGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool        ClearPending;        ///< Offset 0x0008 Type _MJVTBL_BOOL
    std::string Notes;               ///< Offset 0x0009 Type _MJVTBL_STRING
    uint64      EventID;             ///< Offset 0x0090 Type _MJVTBL_UINT64
};

///< SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT
struct ClientCalendarEventInviteNotesAlert
{
    uint64      EventID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Notes;              ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< SMSG_CALENDAR_RAID_LOCKOUT_ADDED
struct ClientCalendarRaidLockoutAdded
{
    uint64 InstanceID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 DifficultyID;         ///< Offset 0x0008 Type _MJVTBL_UINT32
    int32  TimeRemaining;        ///< Offset 0x000C Type _MJVTBL_INT32
    uint32 ServerTime;           ///< Offset 0x0010 Type _MJVTBL_UINT32
    int32  MapID;                ///< Offset 0x0014 Type _MJVTBL_INT32
};

///< SMSG_CALENDAR_RAID_LOCKOUT_REMOVED
struct ClientCalendarRaidLockoutRemoved
{
    uint64 InstanceID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  MapID;               ///< Offset 0x0008 Type _MJVTBL_INT32
    uint32 DifficultyID;        ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_CALENDAR_RAID_LOCKOUT_UPDATED
struct ClientCalendarRaidLockoutUpdated
{
    int32  MapID;                   ///< Offset 0x0000 Type _MJVTBL_INT32
    int32  OldTimeRemaining;        ///< Offset 0x0004 Type _MJVTBL_INT32
    uint32 ServerTime;              ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 DifficultyID;            ///< Offset 0x000C Type _MJVTBL_UINT32
    int32  NewTimeRemaining;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_CALENDAR_SEND_NUM_PENDING
struct ClientCalendarSendNumPending
{
    uint32 NumPending;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_CALENDAR_CLEAR_PENDING_ACTION
struct ClientCalendarClearPendingAction
{
};

///< SMSG_CALENDAR_COMMAND_RESULT
struct ClientCalendarCommandResult
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    uint8       Command;            ///< Offset 0x0132 Type _MJVTBL_UINT8
    uint8       Result;             ///< Offset 0x0133 Type _MJVTBL_UINT8
};

///< SMSG_SPECIAL_MOUNT_ANIM
struct ClientSpecialMountAnim
{
    uint64 UnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_PET_ACTION_SOUND
struct ClientPetActionSound
{
    uint64 UnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Action;          ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_PET_DISMISS_SOUND
struct ClientPetDismissSound
{
    int32        ModelID;              ///< Offset 0x0000 Type _MJVTBL_INT32
    G3D::Vector3 ModelPosition;        ///< Offset 0x0004 Type _MJVTBL_V3
};

///< SMSG_GHOSTEE_GONE
struct ClientGhosteeGone
{
};

///< SMSG_GMTICKET_STATUS_UPDATE
struct ClientGMTicketStatusUpdate
{
    int32 StatusInt;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_GMTICKET_UPDATE
struct ClientGMTicketUpdate
{
    uint8 Result;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_GMTICKET_RESPONSE_ERROR
struct ClientGMTicketResponseError
{
};

///< SMSG_GMTICKET_RESPONSE
struct ClientGMTicketResponse
{
    uint32      ResponseID;          ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string Description;         ///< Offset 0x0004 Type _MJVTBL_STRING
    uint32      TicketID;            ///< Offset 0x07D8 Type _MJVTBL_UINT32
    std::string ResponseText;        ///< Offset 0x07DC Type _MJVTBL_STRING
};

///< SMSG_GMTICKET_SYSTEM_STATUS
struct ClientGMTicketSystemStatus
{
    int32 Status;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_GMTICKET_CASE_STATUS
struct ClientGMTicketCaseStatus
{
    struct JamGMTicketCase
    {
        int32       CaseID;                         ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32      CaseOpened;                     ///< Offset 0x0008 Type _MJVTBL_TIME_T
        int32       CaseStatus;                     ///< Offset 0x0010 Type _MJVTBL_INT32
        std::string Url;                            ///< Offset 0x0014 Type _MJVTBL_STRING
        uint32      CfgRealmID;                     ///< Offset 0x0418 Type _MJVTBL_UINT32
        uint64      CharacterID;                    ///< Offset 0x0420 Type _MJVTBL_UINT64
        std::string WaitTimeOverrideMessage;        ///< Offset 0x0428 Type _MJVTBL_STRING
        int32       WaitTimeOverrideMinutes;        ///< Offset 0x0828 Type _MJVTBL_INT32
    };

    uint32                       OldestTicketTime;                    ///< Offset 0x0000 Type _MJVTBL_TIME_T
    uint32                       UpdateTime;                          ///< Offset 0x0008 Type _MJVTBL_TIME_T
    std::vector<JamGMTicketCase> Cases;                               ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamGMTicketCase>::MJVTBL
};

///< SMSG_SET_DUNGEON_DIFFICULTY
struct ClientSetDungeonDifficulty
{
    uint32 DifficultyID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_WHO_IS
struct ClientWhoIs
{
    std::string AccountName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_WEATHER
struct ClientWeather
{
    bool   Abrupt;           ///< Offset 0x0000 Type _MJVTBL_BOOL
    float  Intensity;        ///< Offset 0x0004 Type _MJVTBL_FLOAT
    uint32 WeatherID;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_UPDATE_INSTANCE_OWNERSHIP
struct ClientUpdateInstanceOwnership
{
    int32 IOwnInstance;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_NOTIFY_MISSILE_TRAJECTORY_COLLISION
struct ClientNotifyMissileTrajectoryCollision
{
    uint64       Caster;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    G3D::Vector3 CollisionPos;        ///< Offset 0x0008 Type _MJVTBL_V3
    uint8        CastID;              ///< Offset 0x0014 Type _MJVTBL_UINT8
};

///< SMSG_INVALIDATE_PLAYER
struct ClientInvalidatePlayer
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_COMPLAINT_RESULT
struct ClientComplaintResult
{
    uint32 ComplaintType;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8  Result;               ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< SMSG_GMSHOW_COMPLAINTS
struct ClientGMShowComplaints
{
    std::string Summary;            ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_GMUNSQUELCH
struct ClientGMUnsquelch
{
};

///< SMSG_PLAYER_NOT_FOUND_FAILURE
struct ClientPlayerNotFoundFailure
{
};

///< SMSG_LIST_TARGETS
struct ClientListTargets
{
    struct JamClientTargetThreat
    {
        uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Threat;            ///< Offset 0x0008 Type _MJVTBL_UINT32
    };

    uint64                             UnitGUID;                                  ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<JamClientTargetThreat> Targets;                                   ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamClientTargetThreat>::MJVTBL
};

///< SMSG_SUMMON_CANCEL
struct ClientSummonCancel
{
};

///< SMSG_REPORT_PV_PPLAYER_AFKRESULT
struct ClientReportPvPPlayerAFKResult
{
    uint64 Offender;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  NumPlayersIHaveReported;        ///< Offset 0x0008 Type _MJVTBL_UINT8
    uint8  NumBlackMarksOnOffender;        ///< Offset 0x0009 Type _MJVTBL_UINT8
    uint8  Result;                         ///< Offset 0x000A Type _MJVTBL_UINT8
};

///< SMSG_DISMOUNT
struct ClientDismount
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_CLEAR_TARGET
struct ClientClearTarget
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_EQUIPMENT_SET_ID
struct ClientEquipmentSetID
{
    uint64 GUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SetID;         ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_CAST_FAILED
struct ClientCastFailed
{
    int32 FailedArg2;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Reason;            ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 FailedArg1;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 SpellID;           ///< Offset 0x000C Type _MJVTBL_INT32
    uint8 CastID;            ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< SMSG_PET_CAST_FAILED
struct ClientPetCastFailed
{
    int32 Reason;            ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 FailedArg2;        ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 FailedArg1;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 SpellID;           ///< Offset 0x000C Type _MJVTBL_INT32
    uint8 CastID;            ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< SMSG_PET_TAME_FAILURE
struct ClientPetTameFailure
{
    uint8 Result;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_SERVER_INFO_QUERY_RESPONSE
struct ClientServerInfoQueryResponse
{
    std::string Response;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_AIREACTION
struct ClientAIReaction
{
    uint64 UnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Reaction;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_OFFER_PETITION_ERROR
struct ClientOfferPetitionError
{
    uint64 PlayerGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_RESET_FAILED_NOTIFY
struct ClientResetFailedNotify
{
};

///< SMSG_LFGDISABLED
struct ClientLFGDisabled
{
};

///< SMSG_CONVERT_RUNE
struct ClientConvertRune
{
    uint8 Rune;         ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8 Index;        ///< Offset 0x0001 Type _MJVTBL_UINT8
};

///< SMSG_ADD_RUNE_POWER
struct ClientAddRunePower
{
    uint32 AddedRunesMask;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_REALM_SPLIT
struct ClientRealmSplit
{
    int32       Decision;           ///< Offset 0x0000 Type _MJVTBL_INT32
    int32       State;              ///< Offset 0x0004 Type _MJVTBL_INT32
    std::string Date;               ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< SMSG_COOLDOWN_EVENT
struct ClientCooldownEvent
{
    uint64 CasterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_CLEAR_COOLDOWN
struct ClientClearCooldown
{
    bool   ClearOnHold;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 CasterGUID;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  SpellID;            ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_REALM_QUERY_RESPONSE
struct ClientRealmQueryResponse
{
    struct NameInfo_Struct
    {
        bool        IsLocal;                    ///< Offset 0x0000 Type _MJVTBL_BOOL
        std::string RealmNameActual;            ///< Offset 0x0001 Type _MJVTBL_STRING
        std::string RealmNameNormalized;        ///< Offset 0x0101 Type _MJVTBL_STRING
    };

    uint32          VirtualRealmAddress;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8           LookupState;                ///< Offset 0x0004 Type _MJVTBL_UINT8
    NameInfo_Struct NameInfo;                   ///< Offset 0x0005 Type _MJVTBL_STRUCT
};

///< SMSG_OVERRIDE_LIGHT
struct ClientOverrideLight
{
    int32 TransitionMilliseconds;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 AreaLightID;                   ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 OverrideLightID;               ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_ENABLE_BARBER_SHOP
struct ClientEnableBarberShop
{
};

///< SMSG_BARBER_SHOP_RESULT
struct ClientBarberShopResult
{
    int32 Result;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_PETITION_SHOW_LIST
struct ClientPetitionShowList
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Price;         ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_PETITION_SHOW_SIGNATURES
struct ClientPetitionShowSignatures
{
    struct JamPetitionSignature
    {
        uint64 Signer;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  Choice;        ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    std::vector<JamPetitionSignature> Signatures;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamPetitionSignature>::MJVTBL
    int32                             PetitionID;                               ///< Offset 0x0018 Type _MJVTBL_INT32
    uint64                            Item;                                     ///< Offset 0x0020 Type _MJVTBL_UINT64
    uint64                            Owner;                                    ///< Offset 0x0028 Type _MJVTBL_UINT64
};

///< SMSG_REFER_AFRIEND_FAILURE
struct ClientReferAFriendFailure
{
    std::string Str;                ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       Reason;             ///< Offset 0x0034 Type _MJVTBL_INT32
};

///< SMSG_CROSSED_INEBRIATION_THRESHOLD
struct ClientCrossedInebriationThreshold
{
    uint64 Guid;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  ItemID;           ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  Threshold;        ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_FORCE_ACTION_SHOW_RESPONSE
struct ClientForceActionShowResponse
{
    uint32 DebugCombatVictimActions;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 DebugCombatActions;              ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_PET_NAME_INVALID
struct ClientPetNameInvalid
{
    struct RenameData_Struct
    {
        int32        PetNumber;               ///< Offset 0x0000 Type _MJVTBL_INT32
        std::string  NewName;                 ///< Offset 0x0004 Type _MJVTBL_STRING
        bool         HasDeclinedNames;        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::string  DeclinedNames[5];        ///< Offset 0x0086 Type MakeMJVTblForFixedArrayOfStrings<5,97>::MJVTBL
    };

    RenameData_Struct RenameData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint8             Result;                   ///< Offset 0x026C Type _MJVTBL_UINT8
};

///< SMSG_SELL_RESPONSE
struct ClientSellResponse
{
    uint64 VendorGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 ItemGUID;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8  Reason;            ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< SMSG_BUY_SUCCEEDED
struct ClientBuySucceeded
{
    uint64 VendorGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Muid;                  ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 QuantityBought;        ///< Offset 0x000C Type _MJVTBL_UINT32
    int32  NewQuantity;           ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_BUY_FAILED
struct ClientBuyFailed
{
    uint64 VendorGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Muid;              ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8  Reason;            ///< Offset 0x000C Type _MJVTBL_UINT8
};

///< SMSG_TOTEM_CREATED
struct ClientTotemCreated
{
    uint64 Totem;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;         ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  Duration;        ///< Offset 0x000C Type _MJVTBL_INT32
    uint8  Slot;            ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< SMSG_TOTEM_MOVED
struct ClientTotemMoved
{
    uint64 Totem;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  Slot;           ///< Offset 0x0008 Type _MJVTBL_UINT8
    uint8  NewSlot;        ///< Offset 0x0009 Type _MJVTBL_UINT8
};

///< SMSG_TRIGGER_MOVIE
struct ClientTriggerMovie
{
    uint32 MovieID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_DYNAMIC_DROP_ROLL_RESULT
struct ClientDynamicDropRollResult
{
    uint8  DynamicDropResult;          ///< Offset 0x0000 Type _MJVTBL_UINT8
    float  Roll;                       ///< Offset 0x0004 Type _MJVTBL_FLOAT
    float  Chance;                     ///< Offset 0x0008 Type _MJVTBL_FLOAT
    uint64 LosingPlayerGUID;           ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint32 BiggestLosingStreak;        ///< Offset 0x0018 Type _MJVTBL_UINT32
    uint32 ItemID;                     ///< Offset 0x001C Type _MJVTBL_UINT32
};

///< SMSG_SHOW_TAXI_NODES
struct ClientShowTaxiNodes
{
    struct ClientShowTaxiNodesWindowInfo
    {
        uint64 UnitGUID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  CurrentNode;        ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    Optional<ClientShowTaxiNodesWindowInfo> WindowInfo;                                     ///< Offset 0x0000 Type MakeMJVTblForOptionalStruct<ClientShowTaxiNodesWindowInfo>::MJVTBL
    std::vector<uint8>                      Nodes;                                          ///< Offset 0x0018 Type MakeMJVTblForArrayOf<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
};

///< SMSG_MINIMAP_PING
struct ClientMinimapPing
{
    uint64       Sender;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    G3D::Vector2 Position;            ///< Offset 0x0008 Type _MJVTBL_V2
};

///< SMSG_FISH_NOT_HOOKED
struct ClientFishNotHooked
{
};

///< SMSG_FISH_ESCAPED
struct ClientFishEscaped
{
};

///< SMSG_QUERY_CREATURE_RESPONSE
struct ClientQueryCreatureResponse
{
    struct Stats_Struct
    {
        std::string        M_title;                         ///< Offset 0x0000 Type _MJVTBL_DYNAMICSTRING
        std::string        M_titleAlt;                      ///< Offset 0x0010 Type _MJVTBL_DYNAMICSTRING
        std::string        M_cursorName;                    ///< Offset 0x0020 Type _MJVTBL_DYNAMICSTRING
        int32              M_creatureType;                  ///< Offset 0x0030 Type _MJVTBL_INT32
        int32              M_creatureFamily;                ///< Offset 0x0034 Type _MJVTBL_INT32
        int32              M_classification;                ///< Offset 0x0038 Type _MJVTBL_INT32
        float              M_hpMulti;                       ///< Offset 0x003C Type _MJVTBL_FLOAT
        float              M_energyMulti;                   ///< Offset 0x0040 Type _MJVTBL_FLOAT
        bool               M_leader;                        ///< Offset 0x0044 Type _MJVTBL_BOOL
        std::vector<int32> M_questItems;                    ///< Offset 0x0048 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
        int32              M_creatureMovementInfoID;        ///< Offset 0x0064 Type _MJVTBL_INT32
        int32              M_requiredExpansion;             ///< Offset 0x0068 Type _MJVTBL_INT32
        int32              M_flags[2];                      ///< Offset 0x006C Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
        int32              M_proxyCreatureID[2];            ///< Offset 0x0074 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
        int32              M_creatureDisplayID[4];          ///< Offset 0x007C Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        std::string        M_name[4];                       ///< Offset 0x0090 Type MakeMJVTblForFixedArrayOf<JamDynamicString,4,&(MJVTBL_DYNAMICSTRING)>::MJVTBL
        std::string        M_nameAlt[4];                    ///< Offset 0x00D0 Type MakeMJVTblForFixedArrayOf<JamDynamicString,4,&(MJVTBL_DYNAMICSTRING)>::MJVTBL
    };

    bool         Allow;               ///< Offset 0x0000 Type _MJVTBL_BOOL
    Stats_Struct Stats;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint32       CreatureID;          ///< Offset 0x0118 Type _MJVTBL_UINT32
};

///< SMSG_QUERY_GAME_OBJECT_RESPONSE
struct ClientQueryGameObjectResponse
{
    uint32  GameObjectID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool    Allow;               ///< Offset 0x0004 Type _MJVTBL_BOOL
    uint8 * Stats;               ///< Offset 0x0008 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_HEALTH_UPDATE
struct ClientHealthUpdate
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Health;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_POWER_UPDATE
struct ClientPowerUpdate
{
    struct ClientPowerUpdatePower
    {
        int32 Power;            ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8 PowerType;        ///< Offset 0x0004 Type _MJVTBL_UINT8
    };

    std::vector<ClientPowerUpdatePower> Powers;                                     ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientPowerUpdatePower>::MJVTBL
    uint64                              Guid;                                       ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< SMSG_QUERY_NPCTEXT_RESPONSE
struct ClientQueryNPCTextResponse
{
    uint32  TextID;         ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool    Allow;          ///< Offset 0x0004 Type _MJVTBL_BOOL
    uint8 * NpcText;        ///< Offset 0x0008 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_QUERY_PLAYER_NAME_RESPONSE
struct ClientQueryPlayerNameResponse
{
    struct Data_Struct
    {
        bool         IsDeleted;                  ///< Offset 0x0000 Type _MJVTBL_BOOL
        uint32       AccountID;                  ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint64       BnetAccountID;              ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint64       GuidActual;                 ///< Offset 0x0010 Type _MJVTBL_UINT64
        std::string  Name;                       ///< Offset 0x0018 Type _MJVTBL_STRING
        uint32       VirtualRealmAddress;        ///< Offset 0x004C Type _MJVTBL_UINT32
        uint8        Race;                       ///< Offset 0x0050 Type _MJVTBL_UINT8
        uint8        Sex;                        ///< Offset 0x0051 Type _MJVTBL_UINT8
        uint8        ClassID;                    ///< Offset 0x0052 Type _MJVTBL_UINT8
        uint8        Level;                      ///< Offset 0x0053 Type _MJVTBL_UINT8
        std::string  DeclinedNames[5];           ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOfStrings<5,65>::MJVTBL
    };

    uint64      Player;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8       Result;             ///< Offset 0x0008 Type _MJVTBL_UINT8
    Data_Struct Data;               ///< Offset 0x0010 Type _MJVTBL_STRUCT
};

///< SMSG_QUERY_PAGE_TEXT_RESPONSE
struct ClientQueryPageTextResponse
{
    struct Info_Struct
    {
        uint32      ID;                 ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32      NextPageID;         ///< Offset 0x0004 Type _MJVTBL_UINT32
        std::string Text;               ///< Offset 0x0008 Type _MJVTBL_STRING
    };

    bool        Allow;              ///< Offset 0x0000 Type _MJVTBL_BOOL
    Info_Struct Info;               ///< Offset 0x0004 Type _MJVTBL_STRUCT
    uint32      PageTextID;         ///< Offset 0x0FB0 Type _MJVTBL_UINT32
};

///< SMSG_QUERY_PET_NAME_RESPONSE
struct ClientQueryPetNameResponse
{
    uint64       PetID;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool         Allow;                   ///< Offset 0x0008 Type _MJVTBL_BOOL
    std::string  Name;                    ///< Offset 0x0009 Type _MJVTBL_STRING
    bool         HasDeclined;             ///< Offset 0x008A Type _MJVTBL_BOOL
    uint32       Timestamp;               ///< Offset 0x0090 Type _MJVTBL_TIME_T
    std::string  DeclinedNames[5];        ///< Offset 0x0098 Type MakeMJVTblForFixedArrayOfStrings<5,97>::MJVTBL
};

///< SMSG_QUERY_BATTLE_PET_NAME_RESPONSE
struct ClientQueryBattlePetNameResponse
{
    uint64       BattlePetID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32        CreatureID;              ///< Offset 0x0008 Type _MJVTBL_INT32
    bool         Allow;                   ///< Offset 0x000C Type _MJVTBL_BOOL
    std::string  Name;                    ///< Offset 0x000D Type _MJVTBL_STRING
    bool         HasDeclined;             ///< Offset 0x008E Type _MJVTBL_BOOL
    std::string  DeclinedNames[5];        ///< Offset 0x008F Type MakeMJVTblForFixedArrayOfStrings<5,97>::MJVTBL
    uint32       Timestamp;               ///< Offset 0x0278 Type _MJVTBL_TIME_T
};

///< SMSG_QUERY_PETITION_RESPONSE
struct ClientQueryPetitionResponse
{
    struct Info_Struct
    {
        int32        M_petitionID;             ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64       M_petitioner;             ///< Offset 0x0008 Type _MJVTBL_UINT64
        std::string  M_title;                  ///< Offset 0x0010 Type _MJVTBL_STRING
        std::string  M_bodyText;               ///< Offset 0x0090 Type _MJVTBL_STRING
        int32        M_minSignatures;          ///< Offset 0x1090 Type _MJVTBL_INT32
        int32        M_maxSignatures;          ///< Offset 0x1094 Type _MJVTBL_INT32
        int32        M_deadLine;               ///< Offset 0x1098 Type _MJVTBL_INT32
        int32        M_issueDate;              ///< Offset 0x109C Type _MJVTBL_INT32
        int32        M_allowedGuildID;         ///< Offset 0x10A0 Type _MJVTBL_INT32
        int32        M_allowedClasses;         ///< Offset 0x10A4 Type _MJVTBL_INT32
        int32        M_allowedRaces;           ///< Offset 0x10A8 Type _MJVTBL_INT32
        int16        M_allowedGender;          ///< Offset 0x10AC Type _MJVTBL_INT16
        int32        M_allowedMinLevel;        ///< Offset 0x10B0 Type _MJVTBL_INT32
        int32        M_allowedMaxLevel;        ///< Offset 0x10B4 Type _MJVTBL_INT32
        int32        M_numChoices;             ///< Offset 0x10B8 Type _MJVTBL_INT32
        int32        M_staticType;             ///< Offset 0x10BC Type _MJVTBL_INT32
        uint32       M_muid;                   ///< Offset 0x10C0 Type _MJVTBL_UINT32
        std::string  M_choicetext[10];         ///< Offset 0x10C4 Type MakeMJVTblForFixedArrayOfStrings<10,64>::MJVTBL
    };

    uint32      PetitionID;         ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool        Allow;              ///< Offset 0x0004 Type _MJVTBL_BOOL
    Info_Struct Info;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_DEATH_RELEASE_LOC
struct ClientDeathReleaseLoc
{
    G3D::Vector3 Loc;                 ///< Offset 0x0000 Type _MJVTBL_V3
    int32        MapID;               ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_FORCED_DEATH_UPDATE
struct ClientForcedDeathUpdate
{
};

///< SMSG_SET_PLAYER_DECLINED_NAMES_RESULT
struct ClientSetPlayerDeclinedNamesResult
{
    uint64 Player;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  ResultCode;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_PLAYED_TIME
struct ClientPlayedTime
{
    int32 TotalTime;           ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  TriggerEvent;        ///< Offset 0x0004 Type _MJVTBL_BOOL
    int32 LevelTime;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_SCRIPT_MESSAGE
struct ClientScriptMessage
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_TITLE_EARNED
struct ClientTitleEarned
{
    int32 Index;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_TITLE_LOST
struct ClientTitleLost
{
    int32 Index;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_HIGHEST_THREAT_UPDATE
struct ClientHighestThreatUpdate
{
    struct ThreatInfo
    {
        uint64 UnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  Threat;          ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    uint64                  UnitGUID;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<ThreatInfo> ThreatList;                     ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ThreatInfo>::MJVTBL
    uint64                  HighestThreatGUID;              ///< Offset 0x0020 Type _MJVTBL_UINT64
};

///< SMSG_THREAT_UPDATE
struct ClientThreatUpdate
{
    struct ThreatInfo
    {
        uint64 UnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  Threat;          ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    uint64                  UnitGUID;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<ThreatInfo> ThreatList;                     ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ThreatInfo>::MJVTBL
};

///< SMSG_THREAT_REMOVE
struct ClientThreatRemove
{
    uint64 AboutGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 UnitGUID;         ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_THREAT_CLEAR
struct ClientThreatClear
{
    uint64 UnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_PROPOSE_LEVEL_GRANT
struct ClientProposeLevelGrant
{
    uint64 Sender;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_ARENA_ERROR
struct ClientArenaError
{
    ARENA_ERROR_TYPE ErrorType;               ///< Offset 0x0000 Type _MJVTBL_ARENA_ERROR_TYPE
    uint8            TeamSize;                ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< SMSG_LFGOFFER_CONTINUE
struct ClientLFGOfferContinue
{
    uint32 Slot;          ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_CANCEL_AUTO_REPEAT
struct ClientCancelAutoRepeat
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_RESET_RANGED_COMBAT_TIMER
struct ClientResetRangedCombatTimer
{
    int32 Delay;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_TRAINER_LIST
struct ClientTrainerList
{
    struct ClientTrainerListSpell
    {
        int32  SpellID;              ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32 MoneyCost;            ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint32 ReqSkillLine;         ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 ReqSkillRank;         ///< Offset 0x000C Type _MJVTBL_UINT32
        int32  ReqAbility[3];        ///< Offset 0x0010 Type MakeMJVTblForFixedArrayOf<int,3,&(MJVTBL_INT32)>::MJVTBL
        uint8  Usable;               ///< Offset 0x001C Type _MJVTBL_UINT8
        uint8  ReqLevel;             ///< Offset 0x001D Type _MJVTBL_UINT8
    };

    std::string                         Greeting;                                   ///< Offset 0x0000 Type _MJVTBL_STRING
    int32                               TrainerType;                                ///< Offset 0x0800 Type _MJVTBL_INT32
    uint64                              TrainerGUID;                                ///< Offset 0x0808 Type _MJVTBL_UINT64
    int32                               TrainerID;                                  ///< Offset 0x0810 Type _MJVTBL_INT32
    std::vector<ClientTrainerListSpell> Spells;                                     ///< Offset 0x0818 Type MakeMJVTblForArrayOfStruct<ClientTrainerListSpell>::MJVTBL
};

///< SMSG_TRAINER_BUY_FAILED
struct ClientTrainerBuyFailed
{
    uint64 TrainerGUID;                ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  TrainerFailedReason;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  SpellID;                    ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_PVPCREDIT
struct ClientPVPCredit
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Honor;         ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  Rank;          ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_CRITERIA_UPDATE
struct ClientCriteriaUpdate
{
    uint8 * CurrentTime;         ///< Offset 0x0000 Type _MJVTBL_NOT_IMPLEMENTED
    int32   Flags;               ///< Offset 0x0020 Type _MJVTBL_INT32
    uint64  Quantity;            ///< Offset 0x0028 Type _MJVTBL_UINT64
    uint64  PlayerGUID;          ///< Offset 0x0030 Type _MJVTBL_UINT64
    int32   CriteriaID;          ///< Offset 0x0038 Type _MJVTBL_INT32
    uint32  ElapsedTime;         ///< Offset 0x0040 Type _MJVTBL_TIME_T
    uint32  CreationTime;        ///< Offset 0x0048 Type _MJVTBL_TIME_T
};

///< SMSG_CHAR_CUSTOMIZE
struct ClientCharCustomize
{
    uint8       Result;                   ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8       HairStyleID;              ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint8       SexID;                    ///< Offset 0x0002 Type _MJVTBL_UINT8
    uint8       FaceID;                   ///< Offset 0x0003 Type _MJVTBL_UINT8
    std::string CharName;                 ///< Offset 0x0004 Type _MJVTBL_STRING
    uint8       HairColorID;              ///< Offset 0x0035 Type _MJVTBL_UINT8
    uint8       SkinID;                   ///< Offset 0x0036 Type _MJVTBL_UINT8
    uint8       FacialHairStyleID;        ///< Offset 0x0037 Type _MJVTBL_UINT8
    uint64      CharGUID;                 ///< Offset 0x0038 Type _MJVTBL_UINT64
};

///< SMSG_QUERY_TIME_RESPONSE
struct ClientQueryTimeResponse
{
    uint32 CurrentTime;           ///< Offset 0x0000 Type _MJVTBL_TIME_T
    int32  TimeOutRequest;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_LOG_XPGAIN
struct ClientLogXPGain
{
    int32  Amount;              ///< Offset 0x0000 Type _MJVTBL_INT32
    float  GroupBonus;          ///< Offset 0x0004 Type _MJVTBL_FLOAT
    uint8  Reason;              ///< Offset 0x0008 Type _MJVTBL_UINT8
    bool   ReferAFriend;        ///< Offset 0x0009 Type _MJVTBL_BOOL
    int32  Original;            ///< Offset 0x000C Type _MJVTBL_INT32
    uint64 Victim;              ///< Offset 0x0010 Type _MJVTBL_UINT64
};

///< SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA
struct ClientOnCancelExpectedRideVehicleAura
{
};

///< SMSG_CRITERIA_DELETED
struct ClientCriteriaDeleted
{
    int32 CriteriaID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_ACHIEVEMENT_DELETED
struct ClientAchievementDeleted
{
    int32 Immunities;           ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 AchievementID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_LEVEL_UP_INFO
struct ClientLevelUpInfo
{
    int32 Cp;                   ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 StatDelta[5];         ///< Offset 0x0004 Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
    int32 HealthDelta;          ///< Offset 0x0018 Type _MJVTBL_INT32
    int32 PowerDelta[6];        ///< Offset 0x001C Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
    int32 Level;                ///< Offset 0x0034 Type _MJVTBL_INT32
};

///< SMSG_DEBUG_AISTATE
struct ClientDebugAIState
{
    struct DebugAIState
    {
        std::string DebugState;         ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    std::vector<DebugAIState> DebugStates;                      ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<DebugAIState>::MJVTBL
    uint64                    Guid;                             ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< SMSG_AUCTION_HELLO_RESPONSE
struct ClientAuctionHelloResponse
{
    uint64 Auctioneer;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   OpenForBusiness;        ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< SMSG_AUCTION_REPLICATE_RESPONSE
struct ClientAuctionReplicateResponse
{
    struct JamCliAuctionItem
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        struct JamCliAuctionItemEnchant
        {
            int32  ID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            uint32 Expiration;        ///< Offset 0x0004 Type _MJVTBL_UINT32
            int32  Charges;           ///< Offset 0x0008 Type _MJVTBL_INT32
            uint8  Slot;              ///< Offset 0x000C Type _MJVTBL_UINT8
        };

        Item_Struct                           Item;                                         ///< Offset 0x0000 Type _MJVTBL_STRUCT
        int32                                 Count;                                        ///< Offset 0x0060 Type _MJVTBL_INT32
        int32                                 Charges;                                      ///< Offset 0x0064 Type _MJVTBL_INT32
        std::vector<JamCliAuctionItemEnchant> Enchantments;                                 ///< Offset 0x0068 Type MakeMJVTblForArrayOfStruct<JamCliAuctionItemEnchant>::MJVTBL
        int32                                 Flags;                                        ///< Offset 0x0080 Type _MJVTBL_INT32
        int32                                 AuctionItemID;                                ///< Offset 0x0084 Type _MJVTBL_INT32
        uint64                                Owner;                                        ///< Offset 0x0088 Type _MJVTBL_UINT64
        uint64                                MinBid;                                       ///< Offset 0x0090 Type _MJVTBL_UINT64
        uint64                                MinIncrement;                                 ///< Offset 0x0098 Type _MJVTBL_UINT64
        uint64                                BuyoutPrice;                                  ///< Offset 0x00A0 Type _MJVTBL_UINT64
        int32                                 DurationLeft;                                 ///< Offset 0x00A8 Type _MJVTBL_INT32
        uint8                                 DeleteReason;                                 ///< Offset 0x00AC Type _MJVTBL_UINT8
        bool                                  CensorServerSideInfo;                         ///< Offset 0x00AD Type _MJVTBL_BOOL
        bool                                  CensorBidInfo;                                ///< Offset 0x00AE Type _MJVTBL_BOOL
        uint64                                ItemGUID;                                     ///< Offset 0x00B0 Type _MJVTBL_UINT64
        uint32                                OwnerAccountID;                               ///< Offset 0x00B8 Type _MJVTBL_UINT32
        uint32                                EndTime;                                      ///< Offset 0x00BC Type _MJVTBL_UINT32
        uint64                                Bidder;                                       ///< Offset 0x00C0 Type _MJVTBL_UINT64
        uint64                                BidAmount;                                    ///< Offset 0x00C8 Type _MJVTBL_UINT64
    };

    uint32                         ChangeNumberCursor;                    ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32                         ChangeNumberGlobal;                    ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32                         DesiredDelay;                          ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32                         ChangeNumberTombstone;                 ///< Offset 0x000C Type _MJVTBL_UINT32
    uint32                         Result;                                ///< Offset 0x0010 Type _MJVTBL_UINT32
    std::vector<JamCliAuctionItem> Items;                                 ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamCliAuctionItem>::MJVTBL
};

///< SMSG_AUCTION_COMMAND_RESULT
struct ClientAuctionCommandResult
{
    uint64 Guid;                 ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 MinIncrement;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 Money;                ///< Offset 0x0010 Type _MJVTBL_UINT64
    int32  ErrorCode;            ///< Offset 0x0018 Type _MJVTBL_INT32
    int32  AuctionItemID;        ///< Offset 0x001C Type _MJVTBL_INT32
    int32  BagResult;            ///< Offset 0x0020 Type _MJVTBL_INT32
    int32  Command;              ///< Offset 0x0024 Type _MJVTBL_INT32
};

///< SMSG_AUCTION_WON_NOTIFICATION
struct ClientAuctionWonNotification
{
    struct Info_Struct
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        int32       AuctionItemID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64      Bidder;               ///< Offset 0x0008 Type _MJVTBL_UINT64
        Item_Struct Item;                 ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    Info_Struct Info;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_AUCTION_OUTBID_NOTIFICATION
struct ClientAuctionOutbidNotification
{
    struct Info_Struct
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        int32       AuctionItemID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64      Bidder;               ///< Offset 0x0008 Type _MJVTBL_UINT64
        Item_Struct Item;                 ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    Info_Struct Info;                ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64      BidAmount;           ///< Offset 0x0070 Type _MJVTBL_UINT64
    uint64      MinIncrement;        ///< Offset 0x0078 Type _MJVTBL_UINT64
};

///< SMSG_AUCTION_CLOSED_NOTIFICATION
struct ClientAuctionClosedNotification
{
    struct Info_Struct
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        int32       AuctionItemID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64      BidAmount;            ///< Offset 0x0008 Type _MJVTBL_UINT64
        Item_Struct Item;                 ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    Info_Struct Info;                     ///< Offset 0x0000 Type _MJVTBL_STRUCT
    float       ProceedsMailDelay;        ///< Offset 0x0070 Type _MJVTBL_FLOAT
    bool        Sold;                     ///< Offset 0x0074 Type _MJVTBL_BOOL
};

///< SMSG_AUCTION_OWNER_BID_NOTIFICATION
struct ClientAuctionOwnerBidNotification
{
    struct Info_Struct
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        int32       AuctionItemID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64      BidAmount;            ///< Offset 0x0008 Type _MJVTBL_UINT64
        Item_Struct Item;                 ///< Offset 0x0010 Type _MJVTBL_STRUCT
    };

    Info_Struct Info;                ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64      Bidder;              ///< Offset 0x0070 Type _MJVTBL_UINT64
    uint64      MinIncrement;        ///< Offset 0x0078 Type _MJVTBL_UINT64
};

///< SMSG_AUCTION_LIST_ITEMS_RESULT
struct ClientAuctionListItemsResult
{
    struct JamCliAuctionItem
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        struct JamCliAuctionItemEnchant
        {
            int32  ID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            uint32 Expiration;        ///< Offset 0x0004 Type _MJVTBL_UINT32
            int32  Charges;           ///< Offset 0x0008 Type _MJVTBL_INT32
            uint8  Slot;              ///< Offset 0x000C Type _MJVTBL_UINT8
        };

        Item_Struct                           Item;                                         ///< Offset 0x0000 Type _MJVTBL_STRUCT
        int32                                 Count;                                        ///< Offset 0x0060 Type _MJVTBL_INT32
        int32                                 Charges;                                      ///< Offset 0x0064 Type _MJVTBL_INT32
        std::vector<JamCliAuctionItemEnchant> Enchantments;                                 ///< Offset 0x0068 Type MakeMJVTblForArrayOfStruct<JamCliAuctionItemEnchant>::MJVTBL
        int32                                 Flags;                                        ///< Offset 0x0080 Type _MJVTBL_INT32
        int32                                 AuctionItemID;                                ///< Offset 0x0084 Type _MJVTBL_INT32
        uint64                                Owner;                                        ///< Offset 0x0088 Type _MJVTBL_UINT64
        uint64                                MinBid;                                       ///< Offset 0x0090 Type _MJVTBL_UINT64
        uint64                                MinIncrement;                                 ///< Offset 0x0098 Type _MJVTBL_UINT64
        uint64                                BuyoutPrice;                                  ///< Offset 0x00A0 Type _MJVTBL_UINT64
        int32                                 DurationLeft;                                 ///< Offset 0x00A8 Type _MJVTBL_INT32
        uint8                                 DeleteReason;                                 ///< Offset 0x00AC Type _MJVTBL_UINT8
        bool                                  CensorServerSideInfo;                         ///< Offset 0x00AD Type _MJVTBL_BOOL
        bool                                  CensorBidInfo;                                ///< Offset 0x00AE Type _MJVTBL_BOOL
        uint64                                ItemGUID;                                     ///< Offset 0x00B0 Type _MJVTBL_UINT64
        uint32                                OwnerAccountID;                               ///< Offset 0x00B8 Type _MJVTBL_UINT32
        uint32                                EndTime;                                      ///< Offset 0x00BC Type _MJVTBL_UINT32
        uint64                                Bidder;                                       ///< Offset 0x00C0 Type _MJVTBL_UINT64
        uint64                                BidAmount;                                    ///< Offset 0x00C8 Type _MJVTBL_UINT64
    };

    uint32                         DesiredDelay;                          ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<JamCliAuctionItem> Items;                                 ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliAuctionItem>::MJVTBL
    bool                           OnlyUsable;                            ///< Offset 0x0020 Type _MJVTBL_BOOL
    uint32                         TotalCount;                            ///< Offset 0x0024 Type _MJVTBL_UINT32
};

///< SMSG_AUCTION_LIST_OWNER_ITEMS_RESULT
struct ClientAuctionListOwnerItemsResult
{
    struct JamCliAuctionItem
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        struct JamCliAuctionItemEnchant
        {
            int32  ID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            uint32 Expiration;        ///< Offset 0x0004 Type _MJVTBL_UINT32
            int32  Charges;           ///< Offset 0x0008 Type _MJVTBL_INT32
            uint8  Slot;              ///< Offset 0x000C Type _MJVTBL_UINT8
        };

        Item_Struct                           Item;                                         ///< Offset 0x0000 Type _MJVTBL_STRUCT
        int32                                 Count;                                        ///< Offset 0x0060 Type _MJVTBL_INT32
        int32                                 Charges;                                      ///< Offset 0x0064 Type _MJVTBL_INT32
        std::vector<JamCliAuctionItemEnchant> Enchantments;                                 ///< Offset 0x0068 Type MakeMJVTblForArrayOfStruct<JamCliAuctionItemEnchant>::MJVTBL
        int32                                 Flags;                                        ///< Offset 0x0080 Type _MJVTBL_INT32
        int32                                 AuctionItemID;                                ///< Offset 0x0084 Type _MJVTBL_INT32
        uint64                                Owner;                                        ///< Offset 0x0088 Type _MJVTBL_UINT64
        uint64                                MinBid;                                       ///< Offset 0x0090 Type _MJVTBL_UINT64
        uint64                                MinIncrement;                                 ///< Offset 0x0098 Type _MJVTBL_UINT64
        uint64                                BuyoutPrice;                                  ///< Offset 0x00A0 Type _MJVTBL_UINT64
        int32                                 DurationLeft;                                 ///< Offset 0x00A8 Type _MJVTBL_INT32
        uint8                                 DeleteReason;                                 ///< Offset 0x00AC Type _MJVTBL_UINT8
        bool                                  CensorServerSideInfo;                         ///< Offset 0x00AD Type _MJVTBL_BOOL
        bool                                  CensorBidInfo;                                ///< Offset 0x00AE Type _MJVTBL_BOOL
        uint64                                ItemGUID;                                     ///< Offset 0x00B0 Type _MJVTBL_UINT64
        uint32                                OwnerAccountID;                               ///< Offset 0x00B8 Type _MJVTBL_UINT32
        uint32                                EndTime;                                      ///< Offset 0x00BC Type _MJVTBL_UINT32
        uint64                                Bidder;                                       ///< Offset 0x00C0 Type _MJVTBL_UINT64
        uint64                                BidAmount;                                    ///< Offset 0x00C8 Type _MJVTBL_UINT64
    };

    uint32                         DesiredDelay;                          ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<JamCliAuctionItem> Items;                                 ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliAuctionItem>::MJVTBL
    uint32                         TotalCount;                            ///< Offset 0x0020 Type _MJVTBL_UINT32
};

///< SMSG_AUCTION_LIST_BIDDER_ITEMS_RESULT
struct ClientAuctionListBidderItemsResult
{
    struct JamCliAuctionItem
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        struct JamCliAuctionItemEnchant
        {
            int32  ID;                ///< Offset 0x0000 Type _MJVTBL_INT32
            uint32 Expiration;        ///< Offset 0x0004 Type _MJVTBL_UINT32
            int32  Charges;           ///< Offset 0x0008 Type _MJVTBL_INT32
            uint8  Slot;              ///< Offset 0x000C Type _MJVTBL_UINT8
        };

        Item_Struct                           Item;                                         ///< Offset 0x0000 Type _MJVTBL_STRUCT
        int32                                 Count;                                        ///< Offset 0x0060 Type _MJVTBL_INT32
        int32                                 Charges;                                      ///< Offset 0x0064 Type _MJVTBL_INT32
        std::vector<JamCliAuctionItemEnchant> Enchantments;                                 ///< Offset 0x0068 Type MakeMJVTblForArrayOfStruct<JamCliAuctionItemEnchant>::MJVTBL
        int32                                 Flags;                                        ///< Offset 0x0080 Type _MJVTBL_INT32
        int32                                 AuctionItemID;                                ///< Offset 0x0084 Type _MJVTBL_INT32
        uint64                                Owner;                                        ///< Offset 0x0088 Type _MJVTBL_UINT64
        uint64                                MinBid;                                       ///< Offset 0x0090 Type _MJVTBL_UINT64
        uint64                                MinIncrement;                                 ///< Offset 0x0098 Type _MJVTBL_UINT64
        uint64                                BuyoutPrice;                                  ///< Offset 0x00A0 Type _MJVTBL_UINT64
        int32                                 DurationLeft;                                 ///< Offset 0x00A8 Type _MJVTBL_INT32
        uint8                                 DeleteReason;                                 ///< Offset 0x00AC Type _MJVTBL_UINT8
        bool                                  CensorServerSideInfo;                         ///< Offset 0x00AD Type _MJVTBL_BOOL
        bool                                  CensorBidInfo;                                ///< Offset 0x00AE Type _MJVTBL_BOOL
        uint64                                ItemGUID;                                     ///< Offset 0x00B0 Type _MJVTBL_UINT64
        uint32                                OwnerAccountID;                               ///< Offset 0x00B8 Type _MJVTBL_UINT32
        uint32                                EndTime;                                      ///< Offset 0x00BC Type _MJVTBL_UINT32
        uint64                                Bidder;                                       ///< Offset 0x00C0 Type _MJVTBL_UINT64
        uint64                                BidAmount;                                    ///< Offset 0x00C8 Type _MJVTBL_UINT64
    };

    uint32                         DesiredDelay;                          ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<JamCliAuctionItem> Items;                                 ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliAuctionItem>::MJVTBL
    uint32                         TotalCount;                            ///< Offset 0x0020 Type _MJVTBL_UINT32
};

///< SMSG_AUCTION_LIST_PENDING_SALES_RESULT
struct ClientAuctionListPendingSalesResult
{
    struct JamCliMailListEntry
    {
        struct SenderHint_Struct
        {
            Optional<uint32> VirtualRealmAddress;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<uint32> NativeRealmAddress;         ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        };

        struct JamCliMailAttachedItem
        {
            struct Item_Struct
            {
                struct JamItemBonusInstanceData
                {
                    struct Context_Struct
                    {
                        uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                    };

                    struct Bonuses_Struct
                    {
                        std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                    };

                    Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                    Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
                };

                int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
                int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
                int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
                Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
                Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
            };

            struct JamCliMailAttachedItemEnchant
            {
                int32  Enchant;         ///< Offset 0x0000 Type _MJVTBL_INT32
                uint32 Duration;        ///< Offset 0x0004 Type _MJVTBL_UINT32
                int32  Charges;         ///< Offset 0x0008 Type _MJVTBL_INT32
            };

            uint8                         Position;                             ///< Offset 0x0000 Type _MJVTBL_UINT8
            int32                         AttachID;                             ///< Offset 0x0004 Type _MJVTBL_INT32
            Item_Struct                   Item;                                 ///< Offset 0x0008 Type _MJVTBL_STRUCT
            int32                         Count;                                ///< Offset 0x0068 Type _MJVTBL_INT32
            int32                         Charges;                              ///< Offset 0x006C Type _MJVTBL_INT32
            uint32                        MaxDurability;                        ///< Offset 0x0070 Type _MJVTBL_UINT32
            int32                         Durability;                           ///< Offset 0x0074 Type _MJVTBL_INT32
            bool                          Unlocked;                             ///< Offset 0x0078 Type _MJVTBL_BOOL
            JamCliMailAttachedItemEnchant Enchants[8];                          ///< Offset 0x007C Type MakeMJVTblForFixedArrayOfStruct<JamCliMailAttachedItemEnchant,8>::MJVTBL
        };

        int32                               MailID;                                     ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8                               SenderType;                                 ///< Offset 0x0004 Type _MJVTBL_UINT8
        Optional<uint64>                    SenderCharacter;                            ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        SenderHint_Struct                   SenderHint;                                 ///< Offset 0x0018 Type _MJVTBL_STRUCT
        Optional<int32>                     AltSenderID;                                ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        uint64                              Cod;                                        ///< Offset 0x0030 Type _MJVTBL_UINT64
        int32                               PackageID;                                  ///< Offset 0x0038 Type _MJVTBL_INT32
        int32                               StationeryID;                               ///< Offset 0x003C Type _MJVTBL_INT32
        uint64                              SentMoney;                                  ///< Offset 0x0040 Type _MJVTBL_UINT64
        int32                               Flags;                                      ///< Offset 0x0048 Type _MJVTBL_INT32
        float                               DaysLeft;                                   ///< Offset 0x004C Type _MJVTBL_FLOAT
        int32                               MailTemplateID;                             ///< Offset 0x0050 Type _MJVTBL_INT32
        std::string                         Subject;                                    ///< Offset 0x0054 Type _MJVTBL_STRING
        std::string                         Body;                                       ///< Offset 0x0154 Type _MJVTBL_STRING
        std::vector<JamCliMailAttachedItem> Attachments;                                ///< Offset 0x2098 Type MakeMJVTblForArrayOfStruct<JamCliMailAttachedItem>::MJVTBL
    };

    std::vector<JamCliMailListEntry> Mails;                                   ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliMailListEntry>::MJVTBL
    int32                            TotalNumRecords;                         ///< Offset 0x0018 Type _MJVTBL_INT32
};

///< SMSG_SERVER_BUCK_DATA_START
struct ClientServerBuckDataStart
{
    uint32 RequestID;          ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8  Mpid;               ///< Offset 0x0004 Type _MJVTBL_UINT8
    uint8  NumVServers;        ///< Offset 0x0005 Type _MJVTBL_UINT8
};

///< SMSG_SET_VEHICLE_REC_ID
struct ClientSetVehicleRecID
{
    uint64 VehicleGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  VehicleRecID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_PENDING_RAID_LOCK
struct ClientPendingRaidLock
{
    uint32 CompletedMask;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool   WarningOnly;          ///< Offset 0x0004 Type _MJVTBL_BOOL
    int32  TimeUntilLock;        ///< Offset 0x0008 Type _MJVTBL_INT32
    bool   Extending;            ///< Offset 0x000C Type _MJVTBL_BOOL
};

///< SMSG_CANCEL_COMBAT
struct ClientCancelCombat
{
};

///< SMSG_SPELL_FAILURE
struct ClientSpellFailure
{
    uint64 CasterUnit;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;           ///< Offset 0x0008 Type _MJVTBL_INT32
    uint8  Reason;            ///< Offset 0x000C Type _MJVTBL_UINT8
    uint8  CastID;            ///< Offset 0x000D Type _MJVTBL_UINT8
};

///< SMSG_DESTRUCTIBLE_BUILDING_DAMAGE
struct ClientDestructibleBuildingDamage
{
    uint64 Target;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Caster;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 Owner;          ///< Offset 0x0010 Type _MJVTBL_UINT64
    int32  Damage;         ///< Offset 0x0018 Type _MJVTBL_INT32
    int32  SpellID;        ///< Offset 0x001C Type _MJVTBL_INT32
};

///< SMSG_ATTACK_SWING_ERROR
struct ClientAttackSwingError
{
    ATTACKSWINGERR Reason;                ///< Offset 0x0000 Type _MJVTBL_ATTACKSWINGERR
};

///< SMSG_ATTACK_SWING_LANDED_LOG
struct ClientAttackSwingLandedLog
{
    struct LogData_Struct
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    LogData_Struct LogData;                ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint8 *        AttackRoundInfo;        ///< Offset 0x0028 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_CHANGE_PLAYER_DIFFICULTY_RESULT
struct ClientChangePlayerDifficultyResult
{
    SET_PLAYER_DIFFICULTY_RESULTS Result;                               ///< Offset 0x0000 Type _MJVTBL_SET_PLAYER_DIFFICULTY_RESULTS
    int32                         DifficultyRecID;                      ///< Offset 0x0004 Type _MJVTBL_INT32
    int32                         MapID;                                ///< Offset 0x0008 Type _MJVTBL_INT32
    int32                         InstanceDifficultyID;                 ///< Offset 0x000C Type _MJVTBL_INT32
    DIFFICULTY_COOLDOWN_REASON    CooldownReason;                       ///< Offset 0x0010 Type _MJVTBL_DIFFICULTY_COOLDOWN_REASON
    uint32                        Cooldown;                             ///< Offset 0x0018 Type _MJVTBL_TIME_T
    uint64                        Guid;                                 ///< Offset 0x0020 Type _MJVTBL_UINT64
};

///< SMSG_INSTANCE_GROUP_SIZE_CHANGED
struct ClientInstanceGroupSizeChanged
{
    uint32 GroupSize;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_SERVER_BUCK_DATA
struct ClientServerBuckData
{
    struct JamServerBuckDataList
    {
        struct JamServerBuckDataEntry
        {
            uint64      Arg;                ///< Offset 0x0000 Type _MJVTBL_UINT64
            std::string Argname;            ///< Offset 0x0008 Type _MJVTBL_STRING
            uint64      Count;              ///< Offset 0x0068 Type _MJVTBL_UINT64
            uint64      Accum;              ///< Offset 0x0070 Type _MJVTBL_UINT64
            uint64      Sqaccum;            ///< Offset 0x0078 Type _MJVTBL_UINT64
            uint64      Maximum;            ///< Offset 0x0080 Type _MJVTBL_UINT64
            uint64      Minimum;            ///< Offset 0x0088 Type _MJVTBL_UINT64
        };

        uint32                              MpID;                                       ///< Offset 0x0000 Type _MJVTBL_UINT32
        std::vector<JamServerBuckDataEntry> Entries;                                    ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamServerBuckDataEntry>::MJVTBL
    };

    uint8                              ClusterID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT8
    int32                              CaptureTime;                               ///< Offset 0x0004 Type _MJVTBL_INT32
    uint32                             RequestID;                                 ///< Offset 0x0008 Type _MJVTBL_UINT32
    std::vector<JamServerBuckDataList> Data;                                      ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamServerBuckDataList>::MJVTBL
};

///< SMSG_GOD_MODE
struct ClientGodMode
{
    bool Enabled;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_BINDER_CONFIRM
struct ClientBinderConfirm
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_PLAY_TIME_WARNING
struct ClientPlayTimeWarning
{
    uint32 Flags;            ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32  Remaining;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_GMDESTROY_CORPSE
struct ClientGMDestroyCorpse
{
    bool Success;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_SET_FACTION_AT_WAR
struct ClientSetFactionAtWar
{
    uint8 FactionIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8 Flags;               ///< Offset 0x0001 Type _MJVTBL_UINT8
};

///< SMSG_RESYNC_RUNES
struct ClientResyncRunes
{
    struct JamResyncRune
    {
        uint8 RuneType;        ///< Offset 0x0000 Type _MJVTBL_UINT8
        uint8 Cooldown;        ///< Offset 0x0001 Type _MJVTBL_UINT8
    };

    std::vector<JamResyncRune> Runes;                             ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamResyncRune>::MJVTBL
};

///< SMSG_CREATE_CHAR
struct ClientCreateChar
{
    uint8 Code;         ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_DELETE_CHAR
struct ClientDeleteChar
{
    uint8 Code;         ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_TRANSFER_ABORTED
struct ClientTransferAborted
{
    TRANSFER_ABORT TransfertAbort;        ///< Offset 0x0000 Type _MJVTBL_TRANSFER_ABORT
    uint8          Arg;                   ///< Offset 0x0004 Type _MJVTBL_UINT8
    uint32         MapID;                 ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_PET_GUIDS
struct ClientPetGUIDs
{
    std::vector<uint64> PetGUIDs;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
};

///< SMSG_CACHE_VERSION
struct ClientCacheVersion
{
    uint32 CacheVersion;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_CHARACTER_LOGIN_FAILED
struct ClientCharacterLoginFailed
{
    uint8 Code;         ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_COMMENTATOR_STATE_CHANGED
struct ClientCommentatorStateChanged
{
    bool   Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 Guid;          ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_COMMENTATOR_MAP_INFO
struct ClientCommentatorMapInfo
{
    struct JamCommentatorMap
    {
        struct JamCommentatorInstance
        {
            struct JamCommentatorTeam
            {
                struct JamCommentatorPlayer
                {
                    uint64     Guid;              ///< Offset 0x0000 Type _MJVTBL_UINT64
                    ServerSpec UserServer;        ///< Offset 0x0008 Type _MJVTBL_JAMSERVERSPEC
                };

                uint64                            Guid;                                     ///< Offset 0x0000 Type _MJVTBL_UINT64
                std::vector<JamCommentatorPlayer> Players;                                  ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCommentatorPlayer>::MJVTBL
            };

            uint32             MapID;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
            ServerSpec         WorldServer;               ///< Offset 0x0004 Type _MJVTBL_JAMSERVERSPEC
            uint64             InstanceID;                ///< Offset 0x0010 Type _MJVTBL_UINT64
            uint32             Status;                    ///< Offset 0x0018 Type _MJVTBL_UINT32
            JamCommentatorTeam Teams[2];                  ///< Offset 0x0020 Type MakeMJVTblForFixedArrayOfStruct<JamCommentatorTeam,2>::MJVTBL
        };

        uint32                              TeamSize;                                   ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32                              MinLevelRange;                              ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint32                              MaxLevelRange;                              ///< Offset 0x0008 Type _MJVTBL_UINT32
        int32                               DifficultyID;                               ///< Offset 0x000C Type _MJVTBL_INT32
        std::vector<JamCommentatorInstance> Instances;                                  ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamCommentatorInstance>::MJVTBL
    };

    uint64                         PlayerInstanceID;                      ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<JamCommentatorMap> Maps;                                  ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCommentatorMap>::MJVTBL
};

///< SMSG_COMMENTATOR_PLAYER_INFO
struct ClientCommentatorPlayerInfo
{
    struct CommentatorPlayerInfo
    {
        uint64 PlayerGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 DamageDone;          ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 DamageTaken;         ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 HealingDone;         ///< Offset 0x0010 Type _MJVTBL_UINT32
        uint32 HealingTaken;        ///< Offset 0x0014 Type _MJVTBL_UINT32
        uint16 Kills;               ///< Offset 0x0018 Type _MJVTBL_UINT16
        uint16 Deaths;              ///< Offset 0x001A Type _MJVTBL_UINT16
        int8   Faction;             ///< Offset 0x001C Type _MJVTBL_INT8
    };

    uint32                             MapID;                                     ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<CommentatorPlayerInfo> PlayerInfo;                                ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<CommentatorPlayerInfo>::MJVTBL
    uint64                             InstanceID;                                ///< Offset 0x0020 Type _MJVTBL_UINT64
    ServerSpec                         WorldServer;                               ///< Offset 0x0028 Type _MJVTBL_JAMSERVERSPEC
};

///< SMSG_UPDATE_ACCOUNT_DATA
struct ClientUpdateAccountData
{
    uint64  Player;                ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32  Time;                  ///< Offset 0x0008 Type _MJVTBL_TIME_T
    uint32  Size;                  ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint8   DataType;              ///< Offset 0x0014 Type _MJVTBL_UINT8
    uint8 * CompressedData;        ///< Offset 0x0018 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_ACCOUNT_DATA_TIMES
struct ClientAccountDataTimes
{
    uint32 ServerTime;             ///< Offset 0x0000 Type _MJVTBL_TIME_T
    uint32 TimeBits;               ///< Offset 0x0008 Type _MJVTBL_UINT32
    int32  AccountTimes[8];        ///< Offset 0x0010 Type MakeMJVTblForFixedArrayOf<long,8,&(MJVTBL_TIME_T)>::MJVTBL
};

///< SMSG_GAME_TIME_UPDATE
struct ClientGameTimeUpdate
{
    int32  GameTimeHolidayOffset;          ///< Offset 0x0000 Type _MJVTBL_INT32
    int32  ServerTimeHolidayOffset;        ///< Offset 0x0004 Type _MJVTBL_INT32
    uint32 GameTime;                       ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 ServerTime;                     ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_GAME_TIME_SET
struct ClientGameTimeSet
{
    uint32 ServerTime;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32  GameTimeHolidayOffset;          ///< Offset 0x0004 Type _MJVTBL_INT32
    int32  ServerTimeHolidayOffset;        ///< Offset 0x0008 Type _MJVTBL_INT32
    uint32 GameTime;                       ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_LOGIN_SET_TIME_SPEED
struct ClientLoginSetTimeSpeed
{
    float  NewSpeed;                       ///< Offset 0x0000 Type _MJVTBL_FLOAT
    int32  ServerTimeHolidayOffset;        ///< Offset 0x0004 Type _MJVTBL_INT32
    uint32 GameTime;                       ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 ServerTime;                     ///< Offset 0x000C Type _MJVTBL_UINT32
    int32  GameTimeHolidayOffset;          ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_LOAD_EQUIPMENT_SET
struct ClientLoadEquipmentSet
{
    struct JamEquipmentSetData
    {
        uint64      Guid;               ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32      SetID;              ///< Offset 0x0008 Type _MJVTBL_UINT32
        std::string SetName;            ///< Offset 0x000C Type _MJVTBL_STRING
        std::string SetIcon;            ///< Offset 0x008D Type _MJVTBL_STRING
        uint64      Pieces[19];         ///< Offset 0x0190 Type MakeMJVTblForFixedArrayOf<unsignedlonglong,19,&(MJVTBL_UINT64)>::MJVTBL
    };

    std::vector<JamEquipmentSetData> SetData;                                 ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamEquipmentSetData>::MJVTBL
};

///< SMSG_START_MIRROR_TIMER
struct ClientStartMirrorTimer
{
    int32 Scale;           ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 MaxValue;        ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 Timer;           ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 SpellID;         ///< Offset 0x000C Type _MJVTBL_INT32
    int32 Value;           ///< Offset 0x0010 Type _MJVTBL_INT32
    bool  Paused;          ///< Offset 0x0014 Type _MJVTBL_BOOL
};

///< SMSG_PAUSE_MIRROR_TIMER
struct ClientPauseMirrorTimer
{
    bool  Paused;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 Timer;         ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_STOP_MIRROR_TIMER
struct ClientStopMirrorTimer
{
    int32 Timer;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_CORPSE_TRANSPORT_QUERY
struct ClientCorpseTransportQuery
{
    G3D::Vector3 Position;            ///< Offset 0x0000 Type _MJVTBL_V3
    float        Facing;              ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< SMSG_ENCHANTMENT_LOG
struct ClientEnchantmentLog
{
    uint64 Caster;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Owner;              ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 ItemGUID;           ///< Offset 0x0010 Type _MJVTBL_UINT64
    int32  ItemID;             ///< Offset 0x0018 Type _MJVTBL_INT32
    int32  EnchantSlot;        ///< Offset 0x001C Type _MJVTBL_INT32
    int32  Enchantment;        ///< Offset 0x0020 Type _MJVTBL_INT32
};

///< SMSG_GMTICKET_RESOLVE_RESPONSE
struct ClientGMTicketResolveResponse
{
    bool ShowSurvey;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_UITIME
struct ClientUITime
{
    uint32 Time;          ///< Offset 0x0000 Type _MJVTBL_TIME_T
};

///< SMSG_SPIRIT_HEALER_CONFIRM
struct ClientSpiritHealerConfirm
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_AREA_TRIGGER_NO_CORPSE
struct ClientAreaTriggerNoCorpse
{
};

///< SMSG_TALENTS_INVOLUNTARILY_RESET
struct ClientTalentsInvoluntarilyReset
{
    bool IsPetTalents;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_PAGE_TEXT
struct ClientPageText
{
    uint64 GameObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_STAND_STATE_UPDATE
struct ClientStandStateUpdate
{
    uint8 State;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_SET_FORCED_REACTIONS
struct ClientSetForcedReactions
{
    struct JamForcedReaction
    {
        int32 Faction;         ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 Reaction;        ///< Offset 0x0004 Type _MJVTBL_INT32
    };

    std::vector<JamForcedReaction> Reactions;                             ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamForcedReaction>::MJVTBL
};

///< SMSG_SPELL_FAILED_OTHER
struct ClientSpellFailedOther
{
    uint64 CasterUnit;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;           ///< Offset 0x0008 Type _MJVTBL_INT32
    uint8  Reason;            ///< Offset 0x000C Type _MJVTBL_UINT8
    uint8  CastID;            ///< Offset 0x000D Type _MJVTBL_UINT8
};

///< SMSG_GAME_OBJECT_RESET_STATE
struct ClientGameObjectResetState
{
    uint64 ObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_GMPHASE_DUMP
struct ClientGMPhaseDump
{
    struct PhaseShift_Struct
    {
        struct PhaseShiftDataPhase
        {
            uint16 PhaseFlags;        ///< Offset 0x0000 Type _MJVTBL_UINT16
            uint16 Id;                ///< Offset 0x0002 Type _MJVTBL_UINT16
        };

        uint32                           PhaseShiftFlags;                         ///< Offset 0x0000 Type _MJVTBL_UINT32
        std::vector<PhaseShiftDataPhase> Phases;                                  ///< Offset 0x0004 Type MakeMJVTblForArrayOfStruct<PhaseShiftDataPhase>::MJVTBL
        uint64                           PersonalGUID;                            ///< Offset 0x0020 Type _MJVTBL_UINT64
    };

    PhaseShift_Struct PhaseShift;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64            Target;                   ///< Offset 0x0028 Type _MJVTBL_UINT64
};

///< SMSG_GMSPAWN_TRACKER_DUMP
struct ClientGMSpawnTrackerDump
{
    struct SpawnTrackerData_Struct
    {
        std::vector<int32> QuestID;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    };

    uint64                  Target;                         ///< Offset 0x0000 Type _MJVTBL_UINT64
    SpawnTrackerData_Struct SpawnTrackerData;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_SUMMON_REQUEST
struct ClientSummonRequest
{
    uint64 SummonerGUID;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SummonerVirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    int32  AreaID;                             ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_INSPECT_PVP
struct ClientInspectPVP
{
    struct JamPVPBracketData
    {
        int32 Rating;                  ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 Rank;                    ///< Offset 0x0004 Type _MJVTBL_INT32
        int32 WeeklyPlayed;            ///< Offset 0x0008 Type _MJVTBL_INT32
        int32 WeeklyWon;               ///< Offset 0x000C Type _MJVTBL_INT32
        int32 SeasonPlayed;            ///< Offset 0x0010 Type _MJVTBL_INT32
        int32 SeasonWon;               ///< Offset 0x0014 Type _MJVTBL_INT32
        int32 WeeklyBestRating;        ///< Offset 0x0018 Type _MJVTBL_INT32
        uint8 Bracket;                 ///< Offset 0x001C Type _MJVTBL_UINT8
    };

    std::vector<JamPVPBracketData> Bracket;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamPVPBracketData>::MJVTBL
    uint64                         ClientGUID;                            ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< SMSG_REFER_AFRIEND_EXPIRED
struct ClientReferAFriendExpired
{
    uint64 UnlinkedFriend;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_INVENTORY_CHANGE_FAILURE
struct ClientInventoryChangeFailure
{
    int8   BagResult;             ///< Offset 0x0000 Type _MJVTBL_INT8
    uint8  ContainerBSlot;        ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint64 SrcContainer;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 DstContainer;          ///< Offset 0x0010 Type _MJVTBL_UINT64
    int32  SrcSlot;               ///< Offset 0x0018 Type _MJVTBL_INT32
    int32  LimitCategory;         ///< Offset 0x001C Type _MJVTBL_INT32
    int32  Level;                 ///< Offset 0x0020 Type _MJVTBL_INT32
    uint64 Item[2];               ///< Offset 0x0028 Type MakeMJVTblForFixedArrayOf<unsignedlonglong,2,&(MJVTBL_UINT64)>::MJVTBL
};

///< SMSG_OPEN_CONTAINER
struct ClientOpenContainer
{
    uint64 Container;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_INITIALIZE_FACTIONS
struct ClientInitializeFactions
{
    int32 FactionStandings[256];        ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<int,256,&(MJVTBL_INT32)>::MJVTBL
    bool  FactionHasBonus[256];         ///< Offset 0x0400 Type MakeMJVTblForFixedArrayOf<bool,256,&(MJVTBL_BOOL)>::MJVTBL
    uint8 FactionFlags[256];            ///< Offset 0x0500 Type MakeMJVTblForFixedArrayOf<unsignedchar,256,&(MJVTBL_UINT8)>::MJVTBL
};

///< SMSG_FACTION_BONUS_INFO
struct ClientFactionBonusInfo
{
    bool FactionHasBonus[256];        ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<bool,256,&(MJVTBL_BOOL)>::MJVTBL
};

///< SMSG_CAMERA_SHAKE
struct ClientCameraShake
{
    int32 SoundID;              ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 CameraShakeID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_SOCKET_GEMS
struct ClientSocketGems
{
    uint64 Item;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Sockets[3];         ///< Offset 0x0008 Type MakeMJVTblForFixedArrayOf<int,3,&(MJVTBL_INT32)>::MJVTBL
    int32  SocketMatch;        ///< Offset 0x0014 Type _MJVTBL_INT32
};

///< SMSG_GM_SILENCE
struct ClientGmSilence
{
    bool Silenced;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool Success;         ///< Offset 0x0001 Type _MJVTBL_BOOL
};

///< SMSG_SET_FACTION_VISIBLE
struct ClientSetFactionVisible
{
    int32 FactionIndex;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_SET_FACTION_NOT_VISIBLE
struct ClientSetFactionNotVisible
{
    int32 FactionIndex;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_SET_FACTION_STANDING
struct ClientSetFactionStanding
{
    struct JamFactionStandingData
    {
        int32 Index;           ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 Standing;        ///< Offset 0x0004 Type _MJVTBL_INT32
    };

    std::vector<JamFactionStandingData> Faction;                                    ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamFactionStandingData>::MJVTBL
    float                               BonusFromAchievementSystem;                 ///< Offset 0x0018 Type _MJVTBL_FLOAT
    float                               ReferAFriendBonus;                          ///< Offset 0x001C Type _MJVTBL_FLOAT
    bool                                ShowVisual;                                 ///< Offset 0x0020 Type _MJVTBL_BOOL
};

///< SMSG_GM_REVEAL_TO
struct ClientGmRevealTo
{
    bool Success;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_GM_RESURRECT_SUCCESS
struct ClientGmResurrectSuccess
{
};

///< SMSG_GM_RESURRECT_FAILURE
struct ClientGmResurrectFailure
{
};

///< SMSG_SET_AIANIM_KIT
struct ClientSetAIAnimKit
{
    uint64 Unit;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint16 AnimKitID;        ///< Offset 0x0008 Type _MJVTBL_UINT16
};

///< SMSG_PLAY_ONE_SHOT_ANIM_KIT
struct ClientPlayOneShotAnimKit
{
    uint64 Unit;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint16 AnimKitID;        ///< Offset 0x0008 Type _MJVTBL_UINT16
};

///< SMSG_SET_MOVEMENT_ANIM_KIT
struct ClientSetMovementAnimKit
{
    uint64 Unit;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint16 AnimKitID;        ///< Offset 0x0008 Type _MJVTBL_UINT16
};

///< SMSG_SET_MELEE_ANIM_KIT
struct ClientSetMeleeAnimKit
{
    uint64 Unit;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint16 AnimKitID;        ///< Offset 0x0008 Type _MJVTBL_UINT16
};

///< SMSG_SET_ANIM_TIER
struct ClientSetAnimTier
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Tier;          ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_SET_PROFICIENCY
struct ClientSetProficiency
{
    uint32 ProficiencyMask;         ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8  ProficiencyClass;        ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< SMSG_GM_FREEZE_SUCCESS
struct ClientGmFreezeSuccess
{
};

///< SMSG_GM_FREEZE_FAILURE
struct ClientGmFreezeFailure
{
};

///< SMSG_CHEAT_PLAYER_LOOKUP
struct ClientCheatPlayerLookup
{
    uint8        ExperienceLevel;            ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8        FaceID;                     ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint32       Flags;                      ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32       Flags3;                     ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8        RaceID;                     ///< Offset 0x000C Type _MJVTBL_UINT8
    uint32       ZoneID;                     ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint32       PetExperienceLevel;         ///< Offset 0x0014 Type _MJVTBL_UINT32
    uint8        FirstLogin;                 ///< Offset 0x0018 Type _MJVTBL_UINT8
    uint8        SexID;                      ///< Offset 0x0019 Type _MJVTBL_UINT8
    uint8        HairStyleID;                ///< Offset 0x001A Type _MJVTBL_UINT8
    uint32       MapID;                      ///< Offset 0x001C Type _MJVTBL_UINT32
    uint8        ClassID;                    ///< Offset 0x0020 Type _MJVTBL_UINT8
    uint64       Guid;                       ///< Offset 0x0028 Type _MJVTBL_UINT64
    G3D::Vector3 Position;                   ///< Offset 0x0030 Type _MJVTBL_V3
    uint32       PetCreatureFamilyID;        ///< Offset 0x003C Type _MJVTBL_UINT32
    std::string  Name;                       ///< Offset 0x0040 Type _MJVTBL_STRING
    uint8        HairColorID;                ///< Offset 0x0071 Type _MJVTBL_UINT8
    uint8        SkinID;                     ///< Offset 0x0072 Type _MJVTBL_UINT8
    uint32       PetDisplayInfoID;           ///< Offset 0x0074 Type _MJVTBL_UINT32
    uint64       GuildGUID;                  ///< Offset 0x0078 Type _MJVTBL_UINT64
    uint32       Flags2;                     ///< Offset 0x0080 Type _MJVTBL_UINT32
    uint8        FacialHairStyleID;          ///< Offset 0x0084 Type _MJVTBL_UINT8
};

///< SMSG_GM_PLAYER_INFO
struct ClientGmPlayerInfo
{
    std::string  CharName;            ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32       MapID;               ///< Offset 0x0034 Type _MJVTBL_UINT32
    uint32       AreaID;              ///< Offset 0x0038 Type _MJVTBL_UINT32
    G3D::Vector3 Position;            ///< Offset 0x003C Type _MJVTBL_V3
    float        Facing;              ///< Offset 0x0048 Type _MJVTBL_FLOAT
    std::string  AccountName;         ///< Offset 0x004C Type _MJVTBL_STRING
    uint32       Seconds;             ///< Offset 0x0550 Type _MJVTBL_UINT32
    uint32       Hours;               ///< Offset 0x0554 Type _MJVTBL_UINT32
    uint32       Minutes;             ///< Offset 0x0558 Type _MJVTBL_UINT32
    uint32       Level;               ///< Offset 0x055C Type _MJVTBL_UINT32
    uint32       Race;                ///< Offset 0x0560 Type _MJVTBL_UINT32
    std::string  GuildName;           ///< Offset 0x0564 Type _MJVTBL_STRING
    uint32       Cls;                 ///< Offset 0x05C8 Type _MJVTBL_UINT32
    std::string  FullName;            ///< Offset 0x05CC Type _MJVTBL_STRING
    uint64       CharGUID;            ///< Offset 0x0AD0 Type _MJVTBL_UINT64
};

///< SMSG_COOLDOWN_CHEAT
struct ClientCooldownCheat
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_GM_CHARACTER_SAVE_SUCCESS
struct ClientGmCharacterSaveSuccess
{
    uint8 * ProfileData;        ///< Offset 0x0000 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_GM_CHARACTER_SAVE_FAILURE
struct ClientGmCharacterSaveFailure
{
};

///< SMSG_ADDON_INFO
struct ClientAddonInfo
{
    struct JamBannedAddonInfo
    {
        int32  Id;                   ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32 LastModified;         ///< Offset 0x0008 Type _MJVTBL_TIME_T
        int32  Flags;                ///< Offset 0x0010 Type _MJVTBL_INT32
        uint32 NameMD5[4];           ///< Offset 0x0014 Type MakeMJVTblForFixedArrayOf<unsignedint,4,&(MJVTBL_UINT32)>::MJVTBL
        uint32 VersionMD5[4];        ///< Offset 0x0024 Type MakeMJVTblForFixedArrayOf<unsignedint,4,&(MJVTBL_UINT32)>::MJVTBL
    };

    struct JamAddonInfo
    {
        uint8       Status;              ///< Offset 0x0000 Type _MJVTBL_UINT8
        bool        InfoProvided;        ///< Offset 0x0001 Type _MJVTBL_BOOL
        bool        KeyProvided;         ///< Offset 0x0002 Type _MJVTBL_BOOL
        bool        UrlProvided;         ///< Offset 0x0003 Type _MJVTBL_BOOL
        uint8       KeyVersion;          ///< Offset 0x0004 Type _MJVTBL_UINT8
        uint32      Revision;            ///< Offset 0x0008 Type _MJVTBL_UINT32
        std::string Url;                 ///< Offset 0x000C Type _MJVTBL_STRING
        int8        KeyData[256];        ///< Offset 0x010C Type MakeMJVTblForFixedArrayOf<signedchar,256,&(MJVTBL_INT8)>::MJVTBL
    };

    std::vector<JamBannedAddonInfo> BannedAddons;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamBannedAddonInfo>::MJVTBL
    std::vector<JamAddonInfo>       Addons;                                 ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamAddonInfo>::MJVTBL
};

///< SMSG_GM_NAMED_POINTS
struct ClientGmNamedPoints
{
    struct ClientGMNamedPointsData
    {
        uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
        G3D::Vector3 Position;            ///< Offset 0x0008 Type _MJVTBL_V3
        float        Facing;              ///< Offset 0x0014 Type _MJVTBL_FLOAT
        std::string  InternalName;        ///< Offset 0x0018 Type _MJVTBL_STRING
        std::string  Name;                ///< Offset 0x0098 Type _MJVTBL_STRING
    };

    std::vector<ClientGMNamedPointsData> NamedPoints;                                 ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientGMNamedPointsData>::MJVTBL
};

///< SMSG_CHEAT_IGNORE_REQUIREMENTS_ENABLED
struct ClientCheatIgnoreRequirementsEnabled
{
};

///< SMSG_CHEAT_IGNORE_REQUIREMENTS_DISABLED
struct ClientCheatIgnoreRequirementsDisabled
{
};

///< SMSG_GMGEAR_RATING_RESPONSE
struct ClientGMGearRatingResponse
{
    float GearRating;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_AREA_SPIRIT_HEALER_TIME
struct ClientAreaSpiritHealerTime
{
    uint64 HealerGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  TimeLeft;          ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_LOOT_LIST
struct ClientLootList
{
    Optional<uint64> RoundRobinWinner;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    Optional<uint64> Master;                  ///< Offset 0x0010 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    uint64           Owner;                   ///< Offset 0x0020 Type _MJVTBL_UINT64
};

///< SMSG_DESTROY_ARENA_UNIT
struct ClientDestroyArenaUnit
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_BEASTMASTER_FAILED
struct ClientBeastmasterFailed
{
};

///< SMSG_FEIGN_DEATH_RESISTED
struct ClientFeignDeathResisted
{
};

///< SMSG_PLAYER_SKINNED
struct ClientPlayerSkinned
{
    bool FreeRepop;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_PROFILE_DATA_RESPONSE
struct ClientProfileDataResponse
{
    uint8 PerfData[488];        ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<unsignedchar,488,&(MJVTBL_UINT8)>::MJVTBL
};

///< SMSG_DURABILITY_DAMAGE_DEATH
struct ClientDurabilityDamageDeath
{
    int32 Percent;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_INIT_WORLD_STATES
struct ClientInitWorldStates
{
    struct JamClientWorldStateInfo
    {
        int32 VariableID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 Value;             ///< Offset 0x0004 Type _MJVTBL_INT32
    };

    std::vector<JamClientWorldStateInfo> Worldstates;                                 ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientWorldStateInfo>::MJVTBL
    int32                                AreaID;                                      ///< Offset 0x0018 Type _MJVTBL_INT32
    int32                                SubareaID;                                   ///< Offset 0x001C Type _MJVTBL_INT32
    int32                                MapID;                                       ///< Offset 0x0020 Type _MJVTBL_INT32
};

///< SMSG_UPDATE_WORLD_STATE
struct ClientUpdateWorldState
{
    int32 Value;             ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Hidden;            ///< Offset 0x0004 Type _MJVTBL_BOOL
    int32 VariableID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_PET_ACTION_FEEDBACK
struct ClientPetActionFeedback
{
    int32 SpellID;         ///< Offset 0x0000 Type _MJVTBL_INT32
    uint8 Response;        ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< SMSG_CORPSE_RECLAIM_DELAY
struct ClientCorpseReclaimDelay
{
    uint32 Remaining;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_PETITION_SIGN_RESULTS
struct ClientPetitionSignResults
{
    uint64         Player;                ///< Offset 0x0000 Type _MJVTBL_UINT64
    PETITION_ERROR Error;                 ///< Offset 0x0008 Type _MJVTBL_PETITION_ERROR
    uint64         Item;                  ///< Offset 0x0010 Type _MJVTBL_UINT64
};

///< SMSG_PETITION_DECLINED
struct ClientPetitionDeclined
{
    uint64 Decliner;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_TURN_IN_PETITION_RESULT
struct ClientTurnInPetitionResult
{
    PETITION_ERROR Result;                ///< Offset 0x0000 Type _MJVTBL_PETITION_ERROR
};

///< SMSG_USE_EQUIPMENT_SET_RESULT
struct ClientUseEquipmentSetResult
{
    uint8 Reason;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_DUMP_OBJECTS_DATA
struct ClientDumpObjectsData
{
    struct JamDumpObjectInfo
    {
        uint64       Guid;                ///< Offset 0x0000 Type _MJVTBL_UINT64
        float        VisibleRange;        ///< Offset 0x0008 Type _MJVTBL_FLOAT
        G3D::Vector3 Position;            ///< Offset 0x000C Type _MJVTBL_V3
        uint32       DisplayID;           ///< Offset 0x0018 Type _MJVTBL_UINT32
        bool         Granted;             ///< Offset 0x001C Type _MJVTBL_BOOL
    };

    std::vector<JamDumpObjectInfo> ObjectInfo;                            ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamDumpObjectInfo>::MJVTBL
};

///< SMSG_FORCE_ANIM
struct ClientForceAnim
{
    std::string Arguments;          ///< Offset 0x0000 Type _MJVTBL_STRING
    uint64      Target;             ///< Offset 0x0200 Type _MJVTBL_UINT64
};

///< SMSG_INVALID_PROMOTION_CODE
struct ClientInvalidPromotionCode
{
};

///< SMSG_ITEM_TIME_UPDATE
struct ClientItemTimeUpdate
{
    uint64 ItemGuid;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 DurationLeft;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_ITEM_ENCHANT_TIME_UPDATE
struct ClientItemEnchantTimeUpdate
{
    uint64 OwnerGuid;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 ItemGuid;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 DurationLeft;        ///< Offset 0x0010 Type _MJVTBL_UINT32
    int32  Slot;                ///< Offset 0x0014 Type _MJVTBL_INT32
};

///< SMSG_MAIL_LIST_RESULT
struct ClientMailListResult
{
    struct JamCliMailListEntry
    {
        struct SenderHint_Struct
        {
            Optional<uint32> VirtualRealmAddress;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<uint32> NativeRealmAddress;         ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        };

        struct JamCliMailAttachedItem
        {
            struct Item_Struct
            {
                struct JamItemBonusInstanceData
                {
                    struct Context_Struct
                    {
                        uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                    };

                    struct Bonuses_Struct
                    {
                        std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                    };

                    Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                    Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
                };

                int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
                int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
                int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
                Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
                Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
            };

            struct JamCliMailAttachedItemEnchant
            {
                int32  Enchant;         ///< Offset 0x0000 Type _MJVTBL_INT32
                uint32 Duration;        ///< Offset 0x0004 Type _MJVTBL_UINT32
                int32  Charges;         ///< Offset 0x0008 Type _MJVTBL_INT32
            };

            uint8                         Position;                             ///< Offset 0x0000 Type _MJVTBL_UINT8
            int32                         AttachID;                             ///< Offset 0x0004 Type _MJVTBL_INT32
            Item_Struct                   Item;                                 ///< Offset 0x0008 Type _MJVTBL_STRUCT
            int32                         Count;                                ///< Offset 0x0068 Type _MJVTBL_INT32
            int32                         Charges;                              ///< Offset 0x006C Type _MJVTBL_INT32
            uint32                        MaxDurability;                        ///< Offset 0x0070 Type _MJVTBL_UINT32
            int32                         Durability;                           ///< Offset 0x0074 Type _MJVTBL_INT32
            bool                          Unlocked;                             ///< Offset 0x0078 Type _MJVTBL_BOOL
            JamCliMailAttachedItemEnchant Enchants[8];                          ///< Offset 0x007C Type MakeMJVTblForFixedArrayOfStruct<JamCliMailAttachedItemEnchant,8>::MJVTBL
        };

        int32                               MailID;                                     ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8                               SenderType;                                 ///< Offset 0x0004 Type _MJVTBL_UINT8
        Optional<uint64>                    SenderCharacter;                            ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        SenderHint_Struct                   SenderHint;                                 ///< Offset 0x0018 Type _MJVTBL_STRUCT
        Optional<int32>                     AltSenderID;                                ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        uint64                              Cod;                                        ///< Offset 0x0030 Type _MJVTBL_UINT64
        int32                               PackageID;                                  ///< Offset 0x0038 Type _MJVTBL_INT32
        int32                               StationeryID;                               ///< Offset 0x003C Type _MJVTBL_INT32
        uint64                              SentMoney;                                  ///< Offset 0x0040 Type _MJVTBL_UINT64
        int32                               Flags;                                      ///< Offset 0x0048 Type _MJVTBL_INT32
        float                               DaysLeft;                                   ///< Offset 0x004C Type _MJVTBL_FLOAT
        int32                               MailTemplateID;                             ///< Offset 0x0050 Type _MJVTBL_INT32
        std::string                         Subject;                                    ///< Offset 0x0054 Type _MJVTBL_STRING
        std::string                         Body;                                       ///< Offset 0x0154 Type _MJVTBL_STRING
        std::vector<JamCliMailAttachedItem> Attachments;                                ///< Offset 0x2098 Type MakeMJVTblForArrayOfStruct<JamCliMailAttachedItem>::MJVTBL
    };

    int32                            TotalNumRecords;                         ///< Offset 0x0000 Type _MJVTBL_INT32
    std::vector<JamCliMailListEntry> Mails;                                   ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliMailListEntry>::MJVTBL
};

///< SMSG_MAIL_QUERY_NEXT_TIME_RESULT
struct ClientMailQueryNextTimeResult
{
    struct JamCliMailNextTimeEntry
    {
        struct SenderHint_Struct
        {
            Optional<uint32> VirtualRealmAddress;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<uint32> NativeRealmAddress;         ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        };

        uint64            SenderGUID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
        SenderHint_Struct SenderHint;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        float             TimeLeft;                 ///< Offset 0x0018 Type _MJVTBL_FLOAT
        int32             AltSenderID;              ///< Offset 0x001C Type _MJVTBL_INT32
        uint8             AltSenderType;            ///< Offset 0x0020 Type _MJVTBL_UINT8
        int32             StationeryID;             ///< Offset 0x0024 Type _MJVTBL_INT32
    };

    std::vector<JamCliMailNextTimeEntry> Next;                                        ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliMailNextTimeEntry>::MJVTBL
    float                                NextMailTime;                                ///< Offset 0x0018 Type _MJVTBL_FLOAT
};

///< SMSG_PARTY_MEMBER_STATE
struct ClientPartyMemberState
{
    uint32  ChangeMask;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint64  MemberGuid;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool    ForEnemy;          ///< Offset 0x0010 Type _MJVTBL_BOOL
    bool    FullUpdate;        ///< Offset 0x0011 Type _MJVTBL_BOOL
    uint8 * Changes;           ///< Offset 0x0018 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_PLAYER_SAVE_GUILD_EMBLEM
struct ClientPlayerSaveGuildEmblem
{
    int32 Error;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_PLAYER_TABARD_VENDOR_ACTIVATE
struct ClientPlayerTabardVendorActivate
{
    uint64 Vendor;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_PARTY_KILL_LOG
struct ClientPartyKillLog
{
    uint64 Victim;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Player;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_PROC_RESIST
struct ClientProcResist
{
    uint64          Target;                 ///< Offset 0x0000 Type _MJVTBL_UINT64
    Optional<float> Needed;                 ///< Offset 0x0008 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    int32           SpellID;                ///< Offset 0x0010 Type _MJVTBL_INT32
    Optional<float> Rolled;                 ///< Offset 0x0014 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    uint64          Caster;                 ///< Offset 0x0020 Type _MJVTBL_UINT64
};

///< SMSG_BATTLEGROUND_POINTS
struct ClientBattlegroundPoints
{
    uint16 Points;        ///< Offset 0x0000 Type _MJVTBL_UINT16
    uint8  Team;          ///< Offset 0x0002 Type _MJVTBL_UINT8
};

///< SMSG_BATTLEGROUND_INIT
struct ClientBattlegroundInit
{
    uint16 MaxPoints;        ///< Offset 0x0000 Type _MJVTBL_UINT16
};

///< SMSG_MAP_OBJECTIVES_INIT
struct ClientMapObjectivesInit
{
    struct BattlegroundCapturePointInfo
    {
        uint64       Guid;                        ///< Offset 0x0000 Type _MJVTBL_UINT64
        G3D::Vector2 Pos;                         ///< Offset 0x0008 Type _MJVTBL_V2
        int8         State;                       ///< Offset 0x0010 Type _MJVTBL_INT8
        uint32       CaptureTime;                 ///< Offset 0x0018 Type _MJVTBL_TIME_T
        uint32       CaptureTotalDuration;        ///< Offset 0x0020 Type _MJVTBL_UINT32
    };

    std::vector<BattlegroundCapturePointInfo> CapturePointInfo;                                 ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<BattlegroundCapturePointInfo>::MJVTBL
};

///< SMSG_EXPLORATION_EXPERIENCE
struct ClientExplorationExperience
{
    int32 Experience;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 AreaID;            ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_LFG_BOOT_PLAYER
struct ClientLfgBootPlayer
{
    struct Info_Struct
    {
        bool        M_voteInProgress;         ///< Offset 0x0000 Type _MJVTBL_BOOL
        bool        M_votePassed;             ///< Offset 0x0001 Type _MJVTBL_BOOL
        bool        M_myVoteCompleted;        ///< Offset 0x0002 Type _MJVTBL_BOOL
        bool        M_myVote;                 ///< Offset 0x0003 Type _MJVTBL_BOOL
        uint64      M_target;                 ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint32      M_totalVotes;             ///< Offset 0x0010 Type _MJVTBL_UINT32
        uint32      M_bootVotes;              ///< Offset 0x0014 Type _MJVTBL_UINT32
        int32       M_timeLeft;               ///< Offset 0x0018 Type _MJVTBL_INT32
        uint32      M_votesNeeded;            ///< Offset 0x001C Type _MJVTBL_UINT32
        std::string M_reason;                 ///< Offset 0x0020 Type _MJVTBL_STRING
    };

    Info_Struct Info;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_LFG_PARTY_INFO
struct ClientLfgPartyInfo
{
    struct JamLFGBlackList
    {
        struct JamLFGBlackListSlot
        {
            uint32 Slot;              ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint32 Reason;            ///< Offset 0x0004 Type _MJVTBL_UINT32
            int32  SubReason1;        ///< Offset 0x0008 Type _MJVTBL_INT32
            int32  SubReason2;        ///< Offset 0x000C Type _MJVTBL_INT32
        };

        Optional<uint64>                 PlayerGuid;                              ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        std::vector<JamLFGBlackListSlot> Slot;                                    ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamLFGBlackListSlot>::MJVTBL
    };

    std::vector<JamLFGBlackList> Player;                              ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamLFGBlackList>::MJVTBL
};

///< SMSG_LFG_PLAYER_INFO
struct ClientLfgPlayerInfo
{
    struct BlackList_Struct
    {
        struct JamLFGBlackListSlot
        {
            uint32 Slot;              ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint32 Reason;            ///< Offset 0x0004 Type _MJVTBL_UINT32
            int32  SubReason1;        ///< Offset 0x0008 Type _MJVTBL_INT32
            int32  SubReason2;        ///< Offset 0x000C Type _MJVTBL_INT32
        };

        Optional<uint64>                 PlayerGuid;                              ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        std::vector<JamLFGBlackListSlot> Slot;                                    ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamLFGBlackListSlot>::MJVTBL
    };

    struct JamLfgPlayerDungeonInfo
    {
        struct JamLfgPlayerQuestReward
        {
            struct JamLfgPlayerQuestRewardItem
            {
                int32 ItemID;          ///< Offset 0x0000 Type _MJVTBL_INT32
                int32 Quantity;        ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            struct JamLfgPlayerQuestRewardCurrency
            {
                int32 CurrencyID;        ///< Offset 0x0000 Type _MJVTBL_INT32
                int32 Quantity;          ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            uint32                                       Mask;                                                ///< Offset 0x0000 Type _MJVTBL_UINT32
            int32                                        RewardMoney;                                         ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                                        RewardXP;                                            ///< Offset 0x0008 Type _MJVTBL_INT32
            std::vector<JamLfgPlayerQuestRewardItem>     Item;                                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamLfgPlayerQuestRewardItem>::MJVTBL
            std::vector<JamLfgPlayerQuestRewardCurrency> Currency;                                            ///< Offset 0x0028 Type MakeMJVTblForArrayOfStruct<JamLfgPlayerQuestRewardCurrency>::MJVTBL
            std::vector<JamLfgPlayerQuestRewardCurrency> BonusCurrency;                                       ///< Offset 0x0040 Type MakeMJVTblForArrayOfStruct<JamLfgPlayerQuestRewardCurrency>::MJVTBL
        };

        struct Rewards_Struct
        {
            struct JamLfgPlayerQuestRewardItem
            {
                int32 ItemID;          ///< Offset 0x0000 Type _MJVTBL_INT32
                int32 Quantity;        ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            struct JamLfgPlayerQuestRewardCurrency
            {
                int32 CurrencyID;        ///< Offset 0x0000 Type _MJVTBL_INT32
                int32 Quantity;          ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            uint32                                       Mask;                                                ///< Offset 0x0000 Type _MJVTBL_UINT32
            int32                                        RewardMoney;                                         ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                                        RewardXP;                                            ///< Offset 0x0008 Type _MJVTBL_INT32
            std::vector<JamLfgPlayerQuestRewardItem>     Item;                                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamLfgPlayerQuestRewardItem>::MJVTBL
            std::vector<JamLfgPlayerQuestRewardCurrency> Currency;                                            ///< Offset 0x0028 Type MakeMJVTblForArrayOfStruct<JamLfgPlayerQuestRewardCurrency>::MJVTBL
            std::vector<JamLfgPlayerQuestRewardCurrency> BonusCurrency;                                       ///< Offset 0x0040 Type MakeMJVTblForArrayOfStruct<JamLfgPlayerQuestRewardCurrency>::MJVTBL
        };

        uint32                               Slot;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
        bool                                 FirstReward;                                 ///< Offset 0x0004 Type _MJVTBL_BOOL
        int32                                CompletionQuantity;                          ///< Offset 0x0008 Type _MJVTBL_INT32
        int32                                CompletionLimit;                             ///< Offset 0x000C Type _MJVTBL_INT32
        int32                                CompletionCurrencyID;                        ///< Offset 0x0010 Type _MJVTBL_INT32
        int32                                SpecificQuantity;                            ///< Offset 0x0014 Type _MJVTBL_INT32
        int32                                SpecificLimit;                               ///< Offset 0x0018 Type _MJVTBL_INT32
        int32                                OverallQuantity;                             ///< Offset 0x001C Type _MJVTBL_INT32
        int32                                OverallLimit;                                ///< Offset 0x0020 Type _MJVTBL_INT32
        int32                                PurseWeeklyQuantity;                         ///< Offset 0x0024 Type _MJVTBL_INT32
        int32                                PurseWeeklyLimit;                            ///< Offset 0x0028 Type _MJVTBL_INT32
        int32                                PurseQuantity;                               ///< Offset 0x002C Type _MJVTBL_INT32
        int32                                PurseLimit;                                  ///< Offset 0x0030 Type _MJVTBL_INT32
        int32                                Quantity;                                    ///< Offset 0x0034 Type _MJVTBL_INT32
        uint32                               CompletedMask;                               ///< Offset 0x0038 Type _MJVTBL_UINT32
        bool                                 ShortageEligible;                            ///< Offset 0x003C Type _MJVTBL_BOOL
        std::vector<JamLfgPlayerQuestReward> ShortageReward;                              ///< Offset 0x0040 Type MakeMJVTblForArrayOfStruct<JamLfgPlayerQuestReward>::MJVTBL
        Rewards_Struct                       Rewards;                                     ///< Offset 0x0058 Type _MJVTBL_STRUCT
    };

    BlackList_Struct                     BlackList;                                   ///< Offset 0x0000 Type _MJVTBL_STRUCT
    std::vector<JamLfgPlayerDungeonInfo> Dungeon;                                     ///< Offset 0x0028 Type MakeMJVTblForArrayOfStruct<JamLfgPlayerDungeonInfo>::MJVTBL
};

///< SMSG_LFGPLAYER_REWARD
struct ClientLFGPlayerReward
{
    struct JamLFGPlayerRewards
    {
        int32  RewardItem;                ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32 RewardItemQuantity;        ///< Offset 0x0004 Type _MJVTBL_UINT32
        int32  BonusCurrency;             ///< Offset 0x0008 Type _MJVTBL_INT32
        bool   IsCurrency;                ///< Offset 0x000C Type _MJVTBL_BOOL
    };

    int32                            RewardMoney;                             ///< Offset 0x0000 Type _MJVTBL_INT32
    uint32                           QueuedSlot;                              ///< Offset 0x0004 Type _MJVTBL_UINT32
    std::vector<JamLFGPlayerRewards> Rewards;                                 ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamLFGPlayerRewards>::MJVTBL
    int32                            AddedXP;                                 ///< Offset 0x0020 Type _MJVTBL_INT32
    uint32                           ActualSlot;                              ///< Offset 0x0024 Type _MJVTBL_UINT32
};

///< SMSG_DANCE_STUDIO_CREATE_RESULT
struct ClientDanceStudioCreateResult
{
    bool  Enable;            ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 Secrets[4];        ///< Offset 0x0004 Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_GET_ACCOUNT_CHARACTER_LIST_RESULT
struct ClientGetAccountCharacterListResult
{
    struct JamCliAccountCharacterData
    {
        uint32      WowAccountID;               ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32      VirtualRealmAddress;        ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint64      Guid;                       ///< Offset 0x0008 Type _MJVTBL_UINT64
        std::string Name;                       ///< Offset 0x0010 Type _MJVTBL_STRING
        std::string RealmName;                  ///< Offset 0x0041 Type _MJVTBL_STRING
        uint8       RaceID;                     ///< Offset 0x0142 Type _MJVTBL_UINT8
        uint8       ClassID;                    ///< Offset 0x0143 Type _MJVTBL_UINT8
        uint8       SexID;                      ///< Offset 0x0144 Type _MJVTBL_UINT8
        uint8       ExperienceLevel;            ///< Offset 0x0145 Type _MJVTBL_UINT8
    };

    uint32                                  Token;                                          ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<JamCliAccountCharacterData> Characters;                                     ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliAccountCharacterData>::MJVTBL
};

///< SMSG_LIVE_REGION_GET_ACCOUNT_CHARACTER_LIST_RESULT
struct ClientLiveRegionGetAccountCharacterListResult
{
    struct JamCliAccountCharacterData
    {
        uint32      WowAccountID;               ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32      VirtualRealmAddress;        ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint64      Guid;                       ///< Offset 0x0008 Type _MJVTBL_UINT64
        std::string Name;                       ///< Offset 0x0010 Type _MJVTBL_STRING
        std::string RealmName;                  ///< Offset 0x0041 Type _MJVTBL_STRING
        uint8       RaceID;                     ///< Offset 0x0142 Type _MJVTBL_UINT8
        uint8       ClassID;                    ///< Offset 0x0143 Type _MJVTBL_UINT8
        uint8       SexID;                      ///< Offset 0x0144 Type _MJVTBL_UINT8
        uint8       ExperienceLevel;            ///< Offset 0x0145 Type _MJVTBL_UINT8
    };

    bool                                    Success;                                        ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<JamCliAccountCharacterData> Characters;                                     ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliAccountCharacterData>::MJVTBL
    uint32                                  Token;                                          ///< Offset 0x0020 Type _MJVTBL_UINT32
};

///< SMSG_CHARACTER_RENAME_RESULT
struct ClientCharacterRenameResult
{
    std::string      Name;                    ///< Offset 0x0000 Type _MJVTBL_STRING
    uint8            Result;                  ///< Offset 0x0031 Type _MJVTBL_UINT8
    Optional<uint64> Guid;                    ///< Offset 0x0038 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
};

///< SMSG_MODIFY_COOLDOWN
struct ClientModifyCooldown
{
    uint64 UnitGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  DeltaTime;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  SpellID;          ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_PRE_RESSURECT
struct ClientPreRessurect
{
    uint64 PlayerGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_NOTIFY_DEST_LOC_SPELL_CAST
struct ClientNotifyDestLocSpellCast
{
    struct Data_Struct
    {
        uint64       Caster;                        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64       DestTransport;                 ///< Offset 0x0008 Type _MJVTBL_UINT64
        int32        SpellID;                       ///< Offset 0x0010 Type _MJVTBL_INT32
        G3D::Vector3 SourceLoc;                     ///< Offset 0x0014 Type _MJVTBL_V3
        G3D::Vector3 DestLoc;                       ///< Offset 0x0020 Type _MJVTBL_V3
        float        MissileTrajectoryPitch;        ///< Offset 0x002C Type _MJVTBL_FLOAT
        float        MissileTrajectorySpeed;        ///< Offset 0x0030 Type _MJVTBL_FLOAT
        uint32       TravelTime;                    ///< Offset 0x0034 Type _MJVTBL_UINT32
        uint8        DestLocSpellCastIndex;         ///< Offset 0x0038 Type _MJVTBL_UINT8
        uint8        CastID;                        ///< Offset 0x0039 Type _MJVTBL_UINT8
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_PLAY_SOUND
struct ClientPlaySound
{
    uint64 SourceObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SoundKitID;              ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_PLAY_MUSIC
struct ClientPlayMusic
{
    int32 SoundKitID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_PLAY_OBJECT_SOUND
struct ClientPlayObjectSound
{
    uint64 TargetObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 SourceObjectGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  SoundKitID;              ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_LIVE_REGION_CHARACTER_COPY_RESULT
struct ClientLiveRegionCharacterCopyResult
{
    bool   Success;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32 Token;          ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_VIGNETTE_UPDATE
struct ClientVignetteUpdate
{
    struct Updated_Struct
    {
        struct IdList_Struct
        {
            std::vector<uint64> IDs;                        ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        };

        struct VignetteClientData
        {
            uint64       ObjGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3 Position;            ///< Offset 0x0008 Type _MJVTBL_V3
            int32        VignetteID;          ///< Offset 0x0014 Type _MJVTBL_INT32
        };

        IdList_Struct                   IdList;                                 ///< Offset 0x0000 Type _MJVTBL_STRUCT
        std::vector<VignetteClientData> Data;                                   ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<VignetteClientData>::MJVTBL
    };

    struct Removed_Struct
    {
        std::vector<uint64> IDs;                        ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    };

    struct Added_Struct
    {
        struct IdList_Struct
        {
            std::vector<uint64> IDs;                        ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        };

        struct VignetteClientData
        {
            uint64       ObjGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3 Position;            ///< Offset 0x0008 Type _MJVTBL_V3
            int32        VignetteID;          ///< Offset 0x0014 Type _MJVTBL_INT32
        };

        IdList_Struct                   IdList;                                 ///< Offset 0x0000 Type _MJVTBL_STRUCT
        std::vector<VignetteClientData> Data;                                   ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<VignetteClientData>::MJVTBL
    };

    Updated_Struct Updated;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    bool           ForceUpdate;           ///< Offset 0x0030 Type _MJVTBL_BOOL
    Removed_Struct Removed;               ///< Offset 0x0038 Type _MJVTBL_STRUCT
    Added_Struct   Added;                 ///< Offset 0x0050 Type _MJVTBL_STRUCT
};

///< SMSG_LIVE_REGION_ACCOUNT_RESTORE_RESULT
struct ClientLiveRegionAccountRestoreResult
{
    uint32 Token;          ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool   Success;        ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< SMSG_SHOW_TRADE_SKILL_RESPONSE
struct ClientShowTradeSkillResponse
{
    struct SkillLineData_Struct
    {
        int32              SpellID;                     ///< Offset 0x0000 Type _MJVTBL_INT32
        std::vector<int32> SkillLineIDs;                ///< Offset 0x0008 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
        std::vector<int32> SkillRanks;                  ///< Offset 0x0020 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
        std::vector<int32> SkillMaxRanks;               ///< Offset 0x0038 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
        std::vector<int32> KnownAbilitySpellIDs;        ///< Offset 0x0050 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    };

    SkillLineData_Struct SkillLineData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64               PlayerGUID;                  ///< Offset 0x0068 Type _MJVTBL_UINT64
};

///< SMSG_BATTLE_PAY_GET_PRODUCT_LIST_RESPONSE
struct ClientBattlePayGetProductListResponse
{
    struct JamBattlePayProduct
    {
        struct JamBattlepayProductItem
        {
            struct JamBattlepayDisplayInfo
            {
                Optional<uint32> CreatureDisplayInfoID;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<uint32> FileDataID;                   ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                std::string      Name1;                        ///< Offset 0x0010 Type _MJVTBL_STRING
                std::string      Name2;                        ///< Offset 0x0211 Type _MJVTBL_STRING
                std::string      Name3;                        ///< Offset 0x0412 Type _MJVTBL_STRING
                Optional<uint32> Flags;                        ///< Offset 0x1414 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            };

            uint32                            ID;                                       ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint32                            ItemID;                                   ///< Offset 0x0004 Type _MJVTBL_UINT32
            uint32                            Quantity;                                 ///< Offset 0x0008 Type _MJVTBL_UINT32
            Optional<JamBattlepayDisplayInfo> DisplayInfo;                              ///< Offset 0x000C Type MakeMJVTblForOptionalStruct<JamBattlepayDisplayInfo>::MJVTBL
            bool                              HasPet;                                   ///< Offset 0x142C Type _MJVTBL_BOOL
            Optional<BATTLEPETRESULT>         PetResult;                                ///< Offset 0x1430 Type MakeMJVTblForOptional<BATTLEPETRESULT,&(MJVTBL_BATTLEPETRESULT)>::MJVTBL
            bool                              HasMount;                                 ///< Offset 0x1438 Type _MJVTBL_BOOL
        };

        struct JamBattlepayDisplayInfo
        {
            Optional<uint32> CreatureDisplayInfoID;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<uint32> FileDataID;                   ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            std::string      Name1;                        ///< Offset 0x0010 Type _MJVTBL_STRING
            std::string      Name2;                        ///< Offset 0x0211 Type _MJVTBL_STRING
            std::string      Name3;                        ///< Offset 0x0412 Type _MJVTBL_STRING
            Optional<uint32> Flags;                        ///< Offset 0x1414 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        };

        uint32                               ProductID;                                   ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint64                               NormalPriceFixedPoint;                       ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint64                               CurrentPriceFixedPoint;                      ///< Offset 0x0010 Type _MJVTBL_UINT64
        std::vector<JamBattlepayProductItem> Items;                                       ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamBattlepayProductItem>::MJVTBL
        uint8                                Type;                                        ///< Offset 0x0030 Type _MJVTBL_UINT8
        uint8                                ChoiceType;                                  ///< Offset 0x0031 Type _MJVTBL_UINT8
        uint32                               Flags;                                       ///< Offset 0x0034 Type _MJVTBL_UINT32
        Optional<JamBattlepayDisplayInfo>    DisplayInfo;                                 ///< Offset 0x0038 Type MakeMJVTblForOptionalStruct<JamBattlepayDisplayInfo>::MJVTBL
    };

    struct JamBattlePayProductGroup
    {
        uint32      GroupID;               ///< Offset 0x0000 Type _MJVTBL_UINT32
        std::string Name;                  ///< Offset 0x0004 Type _MJVTBL_STRING
        int32       IconFileDataID;        ///< Offset 0x0104 Type _MJVTBL_INT32
        uint8       DisplayType;           ///< Offset 0x0108 Type _MJVTBL_UINT8
        int32       Ordering;              ///< Offset 0x010C Type _MJVTBL_INT32
    };

    struct JamBattlePayShopEntry
    {
        struct JamBattlepayDisplayInfo
        {
            Optional<uint32> CreatureDisplayInfoID;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<uint32> FileDataID;                   ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            std::string      Name1;                        ///< Offset 0x0010 Type _MJVTBL_STRING
            std::string      Name2;                        ///< Offset 0x0211 Type _MJVTBL_STRING
            std::string      Name3;                        ///< Offset 0x0412 Type _MJVTBL_STRING
            Optional<uint32> Flags;                        ///< Offset 0x1414 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        };

        uint32                            EntryID;                                  ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32                            GroupID;                                  ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint32                            ProductID;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        int32                             Ordering;                                 ///< Offset 0x000C Type _MJVTBL_INT32
        uint32                            Flags;                                    ///< Offset 0x0010 Type _MJVTBL_UINT32
        uint8                             BannerType;                               ///< Offset 0x0014 Type _MJVTBL_UINT8
        Optional<JamBattlepayDisplayInfo> DisplayInfo;                              ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<JamBattlepayDisplayInfo>::MJVTBL
    };

    std::vector<JamBattlePayProduct>      Products;                                     ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamBattlePayProduct>::MJVTBL
    uint32                                Result;                                       ///< Offset 0x0018 Type _MJVTBL_UINT32
    std::vector<JamBattlePayProductGroup> Groups;                                       ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<JamBattlePayProductGroup>::MJVTBL
    std::vector<JamBattlePayShopEntry>    ShopEntries;                                  ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamBattlePayShopEntry>::MJVTBL
    uint32                                CurrencyID;                                   ///< Offset 0x0050 Type _MJVTBL_UINT32
};

///< SMSG_BATTLE_PAY_GET_PURCHASE_LIST_RESPONSE
struct ClientBattlePayGetPurchaseListResponse
{
    struct JamBattlePayPurchase
    {
        uint64      PurchaseID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32      Status;             ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32      ResultCode;         ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32      ProductID;          ///< Offset 0x0010 Type _MJVTBL_UINT32
        std::string WalletName;         ///< Offset 0x0014 Type _MJVTBL_STRING
    };

    std::vector<JamBattlePayPurchase> Purchases;                                ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamBattlePayPurchase>::MJVTBL
    uint32                            Result;                                   ///< Offset 0x0018 Type _MJVTBL_UINT32
};

///< SMSG_BATTLE_PAY_GET_DISTRIBUTION_LIST_RESPONSE
struct ClientBattlePayGetDistributionListResponse
{
    struct JamBattlePayDistributionObject
    {
        struct JamBattlePayProduct
        {
            struct JamBattlepayProductItem
            {
                struct JamBattlepayDisplayInfo
                {
                    Optional<uint32> CreatureDisplayInfoID;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<uint32> FileDataID;                   ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    std::string      Name1;                        ///< Offset 0x0010 Type _MJVTBL_STRING
                    std::string      Name2;                        ///< Offset 0x0211 Type _MJVTBL_STRING
                    std::string      Name3;                        ///< Offset 0x0412 Type _MJVTBL_STRING
                    Optional<uint32> Flags;                        ///< Offset 0x1414 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                };

                uint32                            ID;                                       ///< Offset 0x0000 Type _MJVTBL_UINT32
                uint32                            ItemID;                                   ///< Offset 0x0004 Type _MJVTBL_UINT32
                uint32                            Quantity;                                 ///< Offset 0x0008 Type _MJVTBL_UINT32
                Optional<JamBattlepayDisplayInfo> DisplayInfo;                              ///< Offset 0x000C Type MakeMJVTblForOptionalStruct<JamBattlepayDisplayInfo>::MJVTBL
                bool                              HasPet;                                   ///< Offset 0x142C Type _MJVTBL_BOOL
                Optional<BATTLEPETRESULT>         PetResult;                                ///< Offset 0x1430 Type MakeMJVTblForOptional<BATTLEPETRESULT,&(MJVTBL_BATTLEPETRESULT)>::MJVTBL
                bool                              HasMount;                                 ///< Offset 0x1438 Type _MJVTBL_BOOL
            };

            struct JamBattlepayDisplayInfo
            {
                Optional<uint32> CreatureDisplayInfoID;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<uint32> FileDataID;                   ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                std::string      Name1;                        ///< Offset 0x0010 Type _MJVTBL_STRING
                std::string      Name2;                        ///< Offset 0x0211 Type _MJVTBL_STRING
                std::string      Name3;                        ///< Offset 0x0412 Type _MJVTBL_STRING
                Optional<uint32> Flags;                        ///< Offset 0x1414 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            };

            uint32                               ProductID;                                   ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint64                               NormalPriceFixedPoint;                       ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64                               CurrentPriceFixedPoint;                      ///< Offset 0x0010 Type _MJVTBL_UINT64
            std::vector<JamBattlepayProductItem> Items;                                       ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamBattlepayProductItem>::MJVTBL
            uint8                                Type;                                        ///< Offset 0x0030 Type _MJVTBL_UINT8
            uint8                                ChoiceType;                                  ///< Offset 0x0031 Type _MJVTBL_UINT8
            uint32                               Flags;                                       ///< Offset 0x0034 Type _MJVTBL_UINT32
            Optional<JamBattlepayDisplayInfo>    DisplayInfo;                                 ///< Offset 0x0038 Type MakeMJVTblForOptionalStruct<JamBattlepayDisplayInfo>::MJVTBL
        };

        uint64                        DistributionID;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                        Status;                               ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                        ProductID;                            ///< Offset 0x000C Type _MJVTBL_UINT32
        uint64                        TargetPlayer;                         ///< Offset 0x0010 Type _MJVTBL_UINT64
        uint32                        TargetVirtualRealm;                   ///< Offset 0x0018 Type _MJVTBL_UINT32
        uint32                        TargetNativeRealm;                    ///< Offset 0x001C Type _MJVTBL_UINT32
        uint64                        PurchaseID;                           ///< Offset 0x0020 Type _MJVTBL_UINT64
        Optional<JamBattlePayProduct> Product;                              ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamBattlePayProduct>::MJVTBL
        bool                          Revoked;                              ///< Offset 0x1488 Type _MJVTBL_BOOL
    };

    uint32                                      Result;                                             ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<JamBattlePayDistributionObject> DistributionObjects;                                ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamBattlePayDistributionObject>::MJVTBL
};

///< SMSG_BATTLE_PAY_DISTRIBUTION_UPDATE
struct ClientBattlePayDistributionUpdate
{
    struct DistributionObject_Struct
    {
        struct JamBattlePayProduct
        {
            struct JamBattlepayProductItem
            {
                struct JamBattlepayDisplayInfo
                {
                    Optional<uint32> CreatureDisplayInfoID;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<uint32> FileDataID;                   ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    std::string      Name1;                        ///< Offset 0x0010 Type _MJVTBL_STRING
                    std::string      Name2;                        ///< Offset 0x0211 Type _MJVTBL_STRING
                    std::string      Name3;                        ///< Offset 0x0412 Type _MJVTBL_STRING
                    Optional<uint32> Flags;                        ///< Offset 0x1414 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                };

                uint32                            ID;                                       ///< Offset 0x0000 Type _MJVTBL_UINT32
                uint32                            ItemID;                                   ///< Offset 0x0004 Type _MJVTBL_UINT32
                uint32                            Quantity;                                 ///< Offset 0x0008 Type _MJVTBL_UINT32
                Optional<JamBattlepayDisplayInfo> DisplayInfo;                              ///< Offset 0x000C Type MakeMJVTblForOptionalStruct<JamBattlepayDisplayInfo>::MJVTBL
                bool                              HasPet;                                   ///< Offset 0x142C Type _MJVTBL_BOOL
                Optional<BATTLEPETRESULT>         PetResult;                                ///< Offset 0x1430 Type MakeMJVTblForOptional<BATTLEPETRESULT,&(MJVTBL_BATTLEPETRESULT)>::MJVTBL
                bool                              HasMount;                                 ///< Offset 0x1438 Type _MJVTBL_BOOL
            };

            struct JamBattlepayDisplayInfo
            {
                Optional<uint32> CreatureDisplayInfoID;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<uint32> FileDataID;                   ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                std::string      Name1;                        ///< Offset 0x0010 Type _MJVTBL_STRING
                std::string      Name2;                        ///< Offset 0x0211 Type _MJVTBL_STRING
                std::string      Name3;                        ///< Offset 0x0412 Type _MJVTBL_STRING
                Optional<uint32> Flags;                        ///< Offset 0x1414 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            };

            uint32                               ProductID;                                   ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint64                               NormalPriceFixedPoint;                       ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64                               CurrentPriceFixedPoint;                      ///< Offset 0x0010 Type _MJVTBL_UINT64
            std::vector<JamBattlepayProductItem> Items;                                       ///< Offset 0x0018 Type MakeMJVTblForArrayOfStruct<JamBattlepayProductItem>::MJVTBL
            uint8                                Type;                                        ///< Offset 0x0030 Type _MJVTBL_UINT8
            uint8                                ChoiceType;                                  ///< Offset 0x0031 Type _MJVTBL_UINT8
            uint32                               Flags;                                       ///< Offset 0x0034 Type _MJVTBL_UINT32
            Optional<JamBattlepayDisplayInfo>    DisplayInfo;                                 ///< Offset 0x0038 Type MakeMJVTblForOptionalStruct<JamBattlepayDisplayInfo>::MJVTBL
        };

        uint64                        DistributionID;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                        Status;                               ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                        ProductID;                            ///< Offset 0x000C Type _MJVTBL_UINT32
        uint64                        TargetPlayer;                         ///< Offset 0x0010 Type _MJVTBL_UINT64
        uint32                        TargetVirtualRealm;                   ///< Offset 0x0018 Type _MJVTBL_UINT32
        uint32                        TargetNativeRealm;                    ///< Offset 0x001C Type _MJVTBL_UINT32
        uint64                        PurchaseID;                           ///< Offset 0x0020 Type _MJVTBL_UINT64
        Optional<JamBattlePayProduct> Product;                              ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamBattlePayProduct>::MJVTBL
        bool                          Revoked;                              ///< Offset 0x1488 Type _MJVTBL_BOOL
    };

    DistributionObject_Struct DistributionObject;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_BATTLE_PAY_DELIVERY_STARTED
struct ClientBattlePayDeliveryStarted
{
    uint64 DistributionID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_BATTLE_PAY_DELIVERY_ENDED
struct ClientBattlePayDeliveryEnded
{
    struct JamItemInstance
    {
        struct JamItemBonusInstanceData
        {
            struct Context_Struct
            {
                uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            };

            struct Bonuses_Struct
            {
                std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
            };

            Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        };

        int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
        Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
        Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
    };

    uint64                       DistributionID;                      ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<JamItemInstance> Items;                               ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamItemInstance>::MJVTBL
};

///< SMSG_PETITION_RENAME_GUILD_RESPONSE
struct ClientPetitionRenameGuildResponse
{
    uint64      PetitionGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string NewGuildName;        ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< SMSG_ROLE_CHOSEN
struct ClientRoleChosen
{
    bool   Accepted;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32 RoleMask;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint64 Player;          ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_INSTANCE_SAVE_CREATED
struct ClientInstanceSaveCreated
{
    bool Gm;          ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_ENCOUNTER_START
struct ClientEncounterStart
{
    int32 DifficultyID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 GroupSize;           ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 EncounterID;         ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_ENCOUNTER_END
struct ClientEncounterEnd
{
    int32 GroupSize;           ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Success;             ///< Offset 0x0004 Type _MJVTBL_BOOL
    int32 DifficultyID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 EncounterID;         ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_BATTLE_PAY_START_PURCHASE_RESPONSE
struct ClientBattlePayStartPurchaseResponse
{
    uint64 PurchaseID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 PurchaseResult;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 ClientToken;           ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_BATTLE_PAY_START_DISTRIBUTION_ASSIGN_TO_TARGET_RESPONSE
struct ClientBattlePayStartDistributionAssignToTargetResponse
{
    uint64 DistributionID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 ClientToken;           ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 Result;                ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_BATTLE_PAY_START_DISTRIBUTION_MAKE_PRODUCT_CHOICE_RESPONSE
struct ClientBattlePayStartDistributionMakeProductChoiceResponse
{
    uint32                    ClientToken;                      ///< Offset 0x0000 Type _MJVTBL_UINT32
    JAM_PRODUCT_CHOICE_RESULT Result;                           ///< Offset 0x0004 Type _MJVTBL_JAM_PRODUCT_CHOICE_RESULT
    uint64                    DistributionID;                   ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_BATTLE_PAY_PURCHASE_UPDATE
struct ClientBattlePayPurchaseUpdate
{
    struct JamBattlePayPurchase
    {
        uint64      PurchaseID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32      Status;             ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32      ResultCode;         ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32      ProductID;          ///< Offset 0x0010 Type _MJVTBL_UINT32
        std::string WalletName;         ///< Offset 0x0014 Type _MJVTBL_STRING
    };

    std::vector<JamBattlePayPurchase> Purchases;                                ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamBattlePayPurchase>::MJVTBL
};

///< SMSG_BATTLE_PAY_CONFIRM_PURCHASE
struct ClientBattlePayConfirmPurchase
{
    uint64 CurrentPriceFixedPoint;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 PurchaseID;                    ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 ServerToken;                   ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< SMSG_BATTLE_PAY_ACK_FAILED
struct ClientBattlePayAckFailed
{
    uint64 PurchaseID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Status;             ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 Result;             ///< Offset 0x000C Type _MJVTBL_UINT32
    uint32 ServerToken;        ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< SMSG_CONQUEST_FORMULA_CONSTANTS
struct ClientConquestFormulaConstants
{
    float  PvpCPExpCoefficient;         ///< Offset 0x0000 Type _MJVTBL_FLOAT
    uint32 PvpMaxCPPerWeek;             ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32 PvpMinCPPerWeek;             ///< Offset 0x0008 Type _MJVTBL_UINT32
    float  PvpCPBaseCoefficient;        ///< Offset 0x000C Type _MJVTBL_FLOAT
    float  PvpCPNumerator;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
};

///< SMSG_SCRIPT_CAST
struct ClientScriptCast
{
    int32 SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_RAFEMAIL_ENABLED_RESPONSE
struct ClientRAFEmailEnabledResponse
{
    JAM_RAF_EMAIL_ENABLED_RESPONSE Result;                                ///< Offset 0x0000 Type _MJVTBL_JAM_RAF_EMAIL_ENABLED_RESPONSE
};

///< SMSG_RECRUIT_AFRIEND_RESPONSE
struct ClientRecruitAFriendResponse
{
    RECRUIT_A_FRIEND_RESULT Result;                         ///< Offset 0x0000 Type _MJVTBL_RECRUIT_A_FRIEND_RESULT
};

///< SMSG_CONTACT_LIST
struct ClientContactList
{
    struct JamContactInfo
    {
        uint64      Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32      VirtualRealmAddr;        ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32      NativeRealmAddr;         ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32      TypeFlags;               ///< Offset 0x0010 Type _MJVTBL_UINT32
        std::string Notes;                   ///< Offset 0x0014 Type _MJVTBL_STRING
        uint8       Status;                  ///< Offset 0x0215 Type _MJVTBL_UINT8
        uint32      AreaID;                  ///< Offset 0x0218 Type _MJVTBL_UINT32
        uint32      Level;                   ///< Offset 0x021C Type _MJVTBL_UINT32
        uint32      ClassID;                 ///< Offset 0x0220 Type _MJVTBL_UINT32
    };

    std::vector<JamContactInfo> Contacts;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamContactInfo>::MJVTBL
    uint32                      Flags;                              ///< Offset 0x0018 Type _MJVTBL_UINT32
};

///< SMSG_FRIEND_STATUS
struct ClientFriendStatus
{
    uint32      VirtualRealmAddress;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string Notes;                      ///< Offset 0x0004 Type _MJVTBL_STRING
    uint32      ClassID;                    ///< Offset 0x0208 Type _MJVTBL_UINT32
    uint8       Status;                     ///< Offset 0x020C Type _MJVTBL_UINT8
    uint64      Guid;                       ///< Offset 0x0210 Type _MJVTBL_UINT64
    uint32      Level;                      ///< Offset 0x0218 Type _MJVTBL_UINT32
    uint32      AreaID;                     ///< Offset 0x021C Type _MJVTBL_UINT32
    uint8       FriendResult;               ///< Offset 0x0220 Type _MJVTBL_UINT8
};

///< SMSG_CHARACTER_OBJECT_TEST_RESPONSE
struct ClientCharacterObjectTestResponse
{
    int32 Pong;         ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_BATTLENET_CHALLENGE_START
struct ClientBattlenetChallengeStart
{
    uint32      Token;               ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string ChallengeURL;        ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< SMSG_BATTLENET_CHALLENGE_ABORT
struct ClientBattlenetChallengeAbort
{
    uint32 Token;          ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool   Timeout;        ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< SMSG_ATTACKER_STATE_UPDATE
struct ClientAttackerStateUpdate
{
    struct JamSpellCastLogData
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    Optional<JamSpellCastLogData> LogData;                              ///< Offset 0x0000 Type MakeMJVTblForOptionalStruct<JamSpellCastLogData>::MJVTBL
    uint8 *                       AttackRoundInfo;                      ///< Offset 0x0030 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_UPDATE_TASK_PROGRESS
struct ClientUpdateTaskProgress
{
    struct JamClientTaskProgress
    {
        uint32              TaskID;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32              FailureTime;                ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint32              Flags;                      ///< Offset 0x0008 Type _MJVTBL_UINT32
        std::vector<uint16> Counts;                     ///< Offset 0x0010 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
    };

    std::vector<JamClientTaskProgress> Progress;                                  ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientTaskProgress>::MJVTBL
};

///< SMSG_SET_ALL_TASK_PROGRESS
struct ClientSetAllTaskProgress
{
    struct JamClientTaskProgress
    {
        uint32              TaskID;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32              FailureTime;                ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint32              Flags;                      ///< Offset 0x0008 Type _MJVTBL_UINT32
        std::vector<uint16> Counts;                     ///< Offset 0x0010 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
    };

    std::vector<JamClientTaskProgress> Progress;                                  ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientTaskProgress>::MJVTBL
};

///< SMSG_SET_TASK_COMPLETE
struct ClientSetTaskComplete
{
    uint32 TaskID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_GROUP_DECLINE
struct ClientGroupDecline
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_GROUP_UNINVITE
struct ClientGroupUninvite
{
};

///< SMSG_GROUP_DESTROYED
struct ClientGroupDestroyed
{
};

///< SMSG_PARTY_COMMAND_RESULT
struct ClientPartyCommandResult
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      ResultData;         ///< Offset 0x0134 Type _MJVTBL_UINT32
    uint64      ResultGUID;         ///< Offset 0x0138 Type _MJVTBL_UINT64
    uint8       Result;             ///< Offset 0x0140 Type _MJVTBL_UINT8
    uint8       Command;            ///< Offset 0x0141 Type _MJVTBL_UINT8
};

///< SMSG_GOSSIP_POI
struct ClientGossipPOI
{
    int32        Icon;                ///< Offset 0x0000 Type _MJVTBL_INT32
    G3D::Vector2 Pos;                 ///< Offset 0x0004 Type _MJVTBL_V2
    uint16       Flags;               ///< Offset 0x000C Type _MJVTBL_UINT16
    int32        Importance;          ///< Offset 0x0010 Type _MJVTBL_INT32
    std::string  Name;                ///< Offset 0x0014 Type _MJVTBL_STRING
};

///< CMSG_GDF_SIM_CHEAT_RESULT
struct PlayerCliGdfSimCheatResult
{
    struct GdfSimPlayerResult
    {
        uint64 Guid;                  ///< Offset 0x0000 Type _MJVTBL_UINT64
        bool   Team;                  ///< Offset 0x0008 Type _MJVTBL_BOOL
        int32  PreRating;             ///< Offset 0x000C Type _MJVTBL_INT32
        int32  PostRating;            ///< Offset 0x0010 Type _MJVTBL_INT32
        int32  RatingChange;          ///< Offset 0x0014 Type _MJVTBL_INT32
        float  PreGdf;                ///< Offset 0x0018 Type _MJVTBL_FLOAT
        float  PostGdf;               ///< Offset 0x001C Type _MJVTBL_FLOAT
        float  GdfChange;             ///< Offset 0x0020 Type _MJVTBL_FLOAT
        int32  PreGdfAsELO;           ///< Offset 0x0024 Type _MJVTBL_INT32
        int32  PostGdfAsELO;          ///< Offset 0x0028 Type _MJVTBL_INT32
        int32  GdfChangeAsELO;        ///< Offset 0x002C Type _MJVTBL_INT32
        float  PreVariance;           ///< Offset 0x0030 Type _MJVTBL_FLOAT
        float  PostVariance;          ///< Offset 0x0034 Type _MJVTBL_FLOAT
        float  VarianceChange;        ///< Offset 0x0038 Type _MJVTBL_FLOAT
    };

    std::vector<GdfSimPlayerResult> Players;                                ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<GdfSimPlayerResult>::MJVTBL
    int32                           PreMMR[2];                              ///< Offset 0x0018 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
    int32                           PostMMR[2];                             ///< Offset 0x0020 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_GET_GARRISON_INFO_RESULT
struct ClientGetGarrisonInfoResult
{
    struct JamGarrisonMission
    {
        uint64 DbID;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  MissionRecID;           ///< Offset 0x0008 Type _MJVTBL_INT32
        uint32 OfferTime;              ///< Offset 0x0010 Type _MJVTBL_TIME_T
        uint32 OfferDuration;          ///< Offset 0x0018 Type _MJVTBL_TIME_T
        uint32 StartTime;              ///< Offset 0x0020 Type _MJVTBL_TIME_T
        uint32 TravelDuration;         ///< Offset 0x0028 Type _MJVTBL_TIME_T
        uint32 MissionDuration;        ///< Offset 0x0030 Type _MJVTBL_TIME_T
        int32  MissionState;           ///< Offset 0x0038 Type _MJVTBL_INT32
    };

    struct JamGarrisonBuildingInfo
    {
        int32        GarrPlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        int32        GarrBuildingID;            ///< Offset 0x0004 Type _MJVTBL_INT32
        uint32       TimeBuilt;                 ///< Offset 0x0008 Type _MJVTBL_TIME_T
        bool         Active;                    ///< Offset 0x0010 Type _MJVTBL_BOOL
        G3D::Vector3 BuildingPos;               ///< Offset 0x0014 Type _MJVTBL_V3
        float        BuildingFacing;            ///< Offset 0x0020 Type _MJVTBL_FLOAT
        int32        CurrentGarSpecID;          ///< Offset 0x0024 Type _MJVTBL_INT32
    };

    struct JamGarrisonFollower
    {
        uint64             DbID;                      ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32              GarrFollowerID;            ///< Offset 0x0008 Type _MJVTBL_INT32
        int32              CreatureID;                ///< Offset 0x000C Type _MJVTBL_INT32
        int32              GarrGivenNameID;           ///< Offset 0x0010 Type _MJVTBL_INT32
        int32              GarrFamilyNameID;          ///< Offset 0x0014 Type _MJVTBL_INT32
        int32              Gender;                    ///< Offset 0x0018 Type _MJVTBL_INT32
        int32              Spec;                      ///< Offset 0x001C Type _MJVTBL_INT32
        int32              Race;                      ///< Offset 0x0020 Type _MJVTBL_INT32
        int32              Quality;                   ///< Offset 0x0024 Type _MJVTBL_INT32
        int32              FollowerLevel;             ///< Offset 0x0028 Type _MJVTBL_INT32
        int32              ItemLevelWeapon;           ///< Offset 0x002C Type _MJVTBL_INT32
        int32              ItemLevelArmor;            ///< Offset 0x0030 Type _MJVTBL_INT32
        int32              Xp;                        ///< Offset 0x0034 Type _MJVTBL_INT32
        int32              CurrentBuildingID;         ///< Offset 0x0038 Type _MJVTBL_INT32
        int32              CurrentMissionID;          ///< Offset 0x003C Type _MJVTBL_INT32
        std::vector<int32> AbilityID;                 ///< Offset 0x0040 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    };

    struct JamGarrisonPlotInfo
    {
        int32        GarrPlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        G3D::Vector3 PlotPos;                   ///< Offset 0x0004 Type _MJVTBL_V3
        int32        PlotType;                  ///< Offset 0x0010 Type _MJVTBL_INT32
    };

    std::vector<int32>                   ArchivedMissions;                            ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    int32                                GarrSiteID;                                  ///< Offset 0x0018 Type _MJVTBL_INT32
    int32                                FactionIndex;                                ///< Offset 0x001C Type _MJVTBL_INT32
    std::vector<JamGarrisonMission>      Missions;                                    ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<JamGarrisonMission>::MJVTBL
    std::vector<JamGarrisonBuildingInfo> Buildings;                                   ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamGarrisonBuildingInfo>::MJVTBL
    std::vector<JamGarrisonFollower>     Followers;                                   ///< Offset 0x0050 Type MakeMJVTblForArrayOfStruct<JamGarrisonFollower>::MJVTBL
    std::vector<JamGarrisonPlotInfo>     Plots;                                       ///< Offset 0x0068 Type MakeMJVTblForArrayOfStruct<JamGarrisonPlotInfo>::MJVTBL
    int32                                GarrSiteLevelID;                             ///< Offset 0x0080 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_PLOT_PLACED
struct ClientGarrisonPlotPlaced
{
    struct PlotInfo_Struct
    {
        int32        GarrPlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        G3D::Vector3 PlotPos;                   ///< Offset 0x0004 Type _MJVTBL_V3
        int32        PlotType;                  ///< Offset 0x0010 Type _MJVTBL_INT32
    };

    PlotInfo_Struct PlotInfo;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_GARRISON_PLOT_REMOVED
struct ClientGarrisonPlotRemoved
{
    int32 GarrPlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_PLACE_BUILDING_RESULT
struct ClientGarrisonPlaceBuildingResult
{
    struct BuildingInfo_Struct
    {
        int32        GarrPlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        int32        GarrBuildingID;            ///< Offset 0x0004 Type _MJVTBL_INT32
        uint32       TimeBuilt;                 ///< Offset 0x0008 Type _MJVTBL_TIME_T
        bool         Active;                    ///< Offset 0x0010 Type _MJVTBL_BOOL
        G3D::Vector3 BuildingPos;               ///< Offset 0x0014 Type _MJVTBL_V3
        float        BuildingFacing;            ///< Offset 0x0020 Type _MJVTBL_FLOAT
        int32        CurrentGarSpecID;          ///< Offset 0x0024 Type _MJVTBL_INT32
    };

    int32               Result;                     ///< Offset 0x0000 Type _MJVTBL_INT32
    BuildingInfo_Struct BuildingInfo;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_GARRISON_BUILDING_REMOVED
struct ClientGarrisonBuildingRemoved
{
    int32 GarrPlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 GarrBuildingID;            ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_LEARN_SPECIALIZATION_RESULT
struct ClientGarrisonLearnSpecializationResult
{
    int32 Result;            ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 GarrSpecID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_BUILDING_SET_ACTIVE_SPECIALIZATION_RESULT
struct ClientGarrisonBuildingSetActiveSpecializationResult
{
    int32 CurrentGarrSpecID;         ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Result;                    ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 GarrPlotInstanceID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_LEARN_BLUEPRINT_RESULT
struct ClientGarrisonLearnBlueprintResult
{
    int32 BuildingID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Result;            ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_REQUEST_BLUEPRINT_AND_SPECIALIZATION_DATA_RESULT
struct ClientGarrisonRequestBlueprintAndSpecializationDataResult
{
    std::vector<int32> SpecializationsKnown;        ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    std::vector<int32> BlueprintsKnown;             ///< Offset 0x0018 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_GARRISON_REMOTE_INFO
struct ClientGarrisonRemoteInfo
{
    struct Info_Struct
    {
        struct JamCliGarrisonRemoteSiteInfo
        {
            struct JamGarrisonRemoteBuildingInfo
            {
                int32 GarrPlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
                int32 GarrBuildingID;            ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            int32                                      GarrSiteLevelID;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
            std::vector<JamGarrisonRemoteBuildingInfo> Buildings;                                         ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamGarrisonRemoteBuildingInfo>::MJVTBL
        };

        std::vector<JamCliGarrisonRemoteSiteInfo> Sites;                                            ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliGarrisonRemoteSiteInfo>::MJVTBL
    };

    Info_Struct Info;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_GARRISON_BUILDING_ACTIVATED
struct ClientGarrisonBuildingActivated
{
    int32 GarrPlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_UPGRADE_RESULT
struct ClientGarrisonUpgradeResult
{
    int32 GarrSiteLevelID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Result;                 ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_ADD_FOLLOWER_RESULT
struct ClientGarrisonAddFollowerResult
{
    struct Follower_Struct
    {
        uint64             DbID;                      ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32              GarrFollowerID;            ///< Offset 0x0008 Type _MJVTBL_INT32
        int32              CreatureID;                ///< Offset 0x000C Type _MJVTBL_INT32
        int32              GarrGivenNameID;           ///< Offset 0x0010 Type _MJVTBL_INT32
        int32              GarrFamilyNameID;          ///< Offset 0x0014 Type _MJVTBL_INT32
        int32              Gender;                    ///< Offset 0x0018 Type _MJVTBL_INT32
        int32              Spec;                      ///< Offset 0x001C Type _MJVTBL_INT32
        int32              Race;                      ///< Offset 0x0020 Type _MJVTBL_INT32
        int32              Quality;                   ///< Offset 0x0024 Type _MJVTBL_INT32
        int32              FollowerLevel;             ///< Offset 0x0028 Type _MJVTBL_INT32
        int32              ItemLevelWeapon;           ///< Offset 0x002C Type _MJVTBL_INT32
        int32              ItemLevelArmor;            ///< Offset 0x0030 Type _MJVTBL_INT32
        int32              Xp;                        ///< Offset 0x0034 Type _MJVTBL_INT32
        int32              CurrentBuildingID;         ///< Offset 0x0038 Type _MJVTBL_INT32
        int32              CurrentMissionID;          ///< Offset 0x003C Type _MJVTBL_INT32
        std::vector<int32> AbilityID;                 ///< Offset 0x0040 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    };

    Follower_Struct Follower;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    int32           Result;                 ///< Offset 0x0058 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_REMOVE_FOLLOWER_RESULT
struct ClientGarrisonRemoveFollowerResult
{
    uint64 FollowerDBID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Result;              ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_LIST_FOLLOWERS_CHEAT_RESULT
struct ClientGarrisonListFollowersCheatResult
{
    struct JamGarrisonFollower
    {
        uint64             DbID;                      ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32              GarrFollowerID;            ///< Offset 0x0008 Type _MJVTBL_INT32
        int32              CreatureID;                ///< Offset 0x000C Type _MJVTBL_INT32
        int32              GarrGivenNameID;           ///< Offset 0x0010 Type _MJVTBL_INT32
        int32              GarrFamilyNameID;          ///< Offset 0x0014 Type _MJVTBL_INT32
        int32              Gender;                    ///< Offset 0x0018 Type _MJVTBL_INT32
        int32              Spec;                      ///< Offset 0x001C Type _MJVTBL_INT32
        int32              Race;                      ///< Offset 0x0020 Type _MJVTBL_INT32
        int32              Quality;                   ///< Offset 0x0024 Type _MJVTBL_INT32
        int32              FollowerLevel;             ///< Offset 0x0028 Type _MJVTBL_INT32
        int32              ItemLevelWeapon;           ///< Offset 0x002C Type _MJVTBL_INT32
        int32              ItemLevelArmor;            ///< Offset 0x0030 Type _MJVTBL_INT32
        int32              Xp;                        ///< Offset 0x0034 Type _MJVTBL_INT32
        int32              CurrentBuildingID;         ///< Offset 0x0038 Type _MJVTBL_INT32
        int32              CurrentMissionID;          ///< Offset 0x003C Type _MJVTBL_INT32
        std::vector<int32> AbilityID;                 ///< Offset 0x0040 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    };

    std::vector<JamGarrisonFollower> Followers;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamGarrisonFollower>::MJVTBL
};

///< SMSG_GARRISON_ADD_MISSION_RESULT
struct ClientGarrisonAddMissionResult
{
    struct Mission_Struct
    {
        uint64 DbID;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  MissionRecID;           ///< Offset 0x0008 Type _MJVTBL_INT32
        uint32 OfferTime;              ///< Offset 0x0010 Type _MJVTBL_TIME_T
        uint32 OfferDuration;          ///< Offset 0x0018 Type _MJVTBL_TIME_T
        uint32 StartTime;              ///< Offset 0x0020 Type _MJVTBL_TIME_T
        uint32 TravelDuration;         ///< Offset 0x0028 Type _MJVTBL_TIME_T
        uint32 MissionDuration;        ///< Offset 0x0030 Type _MJVTBL_TIME_T
        int32  MissionState;           ///< Offset 0x0038 Type _MJVTBL_INT32
    };

    Mission_Struct Mission;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    int32          Result;                ///< Offset 0x0040 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_START_MISSION_RESULT
struct ClientGarrisonStartMissionResult
{
    struct Mission_Struct
    {
        uint64 DbID;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  MissionRecID;           ///< Offset 0x0008 Type _MJVTBL_INT32
        uint32 OfferTime;              ///< Offset 0x0010 Type _MJVTBL_TIME_T
        uint32 OfferDuration;          ///< Offset 0x0018 Type _MJVTBL_TIME_T
        uint32 StartTime;              ///< Offset 0x0020 Type _MJVTBL_TIME_T
        uint32 TravelDuration;         ///< Offset 0x0028 Type _MJVTBL_TIME_T
        uint32 MissionDuration;        ///< Offset 0x0030 Type _MJVTBL_TIME_T
        int32  MissionState;           ///< Offset 0x0038 Type _MJVTBL_INT32
    };

    int32               Result;                     ///< Offset 0x0000 Type _MJVTBL_INT32
    Mission_Struct      Mission;                    ///< Offset 0x0008 Type _MJVTBL_STRUCT
    std::vector<uint64> FollowerDBIDs;              ///< Offset 0x0048 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
};

///< SMSG_GARRISON_COMPLETE_MISSION_RESULT
struct ClientGarrisonCompleteMissionResult
{
    struct Mission_Struct
    {
        uint64 DbID;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  MissionRecID;           ///< Offset 0x0008 Type _MJVTBL_INT32
        uint32 OfferTime;              ///< Offset 0x0010 Type _MJVTBL_TIME_T
        uint32 OfferDuration;          ///< Offset 0x0018 Type _MJVTBL_TIME_T
        uint32 StartTime;              ///< Offset 0x0020 Type _MJVTBL_TIME_T
        uint32 TravelDuration;         ///< Offset 0x0028 Type _MJVTBL_TIME_T
        uint32 MissionDuration;        ///< Offset 0x0030 Type _MJVTBL_TIME_T
        int32  MissionState;           ///< Offset 0x0038 Type _MJVTBL_INT32
    };

    int32          Result;                ///< Offset 0x0000 Type _MJVTBL_INT32
    Mission_Struct Mission;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    int32          MissionRecID;          ///< Offset 0x0048 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_MISSION_BONUS_ROLL_RESULT
struct ClientGarrisonMissionBonusRollResult
{
    struct Mission_Struct
    {
        uint64 DbID;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  MissionRecID;           ///< Offset 0x0008 Type _MJVTBL_INT32
        uint32 OfferTime;              ///< Offset 0x0010 Type _MJVTBL_TIME_T
        uint32 OfferDuration;          ///< Offset 0x0018 Type _MJVTBL_TIME_T
        uint32 StartTime;              ///< Offset 0x0020 Type _MJVTBL_TIME_T
        uint32 TravelDuration;         ///< Offset 0x0028 Type _MJVTBL_TIME_T
        uint32 MissionDuration;        ///< Offset 0x0030 Type _MJVTBL_TIME_T
        int32  MissionState;           ///< Offset 0x0038 Type _MJVTBL_INT32
    };

    int32          Result;                ///< Offset 0x0000 Type _MJVTBL_INT32
    bool           RollSucceeded;         ///< Offset 0x0004 Type _MJVTBL_BOOL
    int32          MissionRecID;          ///< Offset 0x0008 Type _MJVTBL_INT32
    Mission_Struct Mission;               ///< Offset 0x0010 Type _MJVTBL_STRUCT
    int32          BonusIndex;            ///< Offset 0x0050 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_FOLLOWER_CHANGED_XP
struct ClientGarrisonFollowerChangedXP
{
    struct Follower_Struct
    {
        uint64             DbID;                      ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32              GarrFollowerID;            ///< Offset 0x0008 Type _MJVTBL_INT32
        int32              CreatureID;                ///< Offset 0x000C Type _MJVTBL_INT32
        int32              GarrGivenNameID;           ///< Offset 0x0010 Type _MJVTBL_INT32
        int32              GarrFamilyNameID;          ///< Offset 0x0014 Type _MJVTBL_INT32
        int32              Gender;                    ///< Offset 0x0018 Type _MJVTBL_INT32
        int32              Spec;                      ///< Offset 0x001C Type _MJVTBL_INT32
        int32              Race;                      ///< Offset 0x0020 Type _MJVTBL_INT32
        int32              Quality;                   ///< Offset 0x0024 Type _MJVTBL_INT32
        int32              FollowerLevel;             ///< Offset 0x0028 Type _MJVTBL_INT32
        int32              ItemLevelWeapon;           ///< Offset 0x002C Type _MJVTBL_INT32
        int32              ItemLevelArmor;            ///< Offset 0x0030 Type _MJVTBL_INT32
        int32              Xp;                        ///< Offset 0x0034 Type _MJVTBL_INT32
        int32              CurrentBuildingID;         ///< Offset 0x0038 Type _MJVTBL_INT32
        int32              CurrentMissionID;          ///< Offset 0x003C Type _MJVTBL_INT32
        std::vector<int32> AbilityID;                 ///< Offset 0x0040 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    };

    Follower_Struct Follower;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_GARRISON_FOLLOWER_CHANGED_ITEM_LEVEL
struct ClientGarrisonFollowerChangedItemLevel
{
    struct Follower_Struct
    {
        uint64             DbID;                      ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32              GarrFollowerID;            ///< Offset 0x0008 Type _MJVTBL_INT32
        int32              CreatureID;                ///< Offset 0x000C Type _MJVTBL_INT32
        int32              GarrGivenNameID;           ///< Offset 0x0010 Type _MJVTBL_INT32
        int32              GarrFamilyNameID;          ///< Offset 0x0014 Type _MJVTBL_INT32
        int32              Gender;                    ///< Offset 0x0018 Type _MJVTBL_INT32
        int32              Spec;                      ///< Offset 0x001C Type _MJVTBL_INT32
        int32              Race;                      ///< Offset 0x0020 Type _MJVTBL_INT32
        int32              Quality;                   ///< Offset 0x0024 Type _MJVTBL_INT32
        int32              FollowerLevel;             ///< Offset 0x0028 Type _MJVTBL_INT32
        int32              ItemLevelWeapon;           ///< Offset 0x002C Type _MJVTBL_INT32
        int32              ItemLevelArmor;            ///< Offset 0x0030 Type _MJVTBL_INT32
        int32              Xp;                        ///< Offset 0x0034 Type _MJVTBL_INT32
        int32              CurrentBuildingID;         ///< Offset 0x0038 Type _MJVTBL_INT32
        int32              CurrentMissionID;          ///< Offset 0x003C Type _MJVTBL_INT32
        std::vector<int32> AbilityID;                 ///< Offset 0x0040 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    };

    Follower_Struct Follower;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_GARRISON_ASSIGN_FOLLOWER_TO_BUILDING_RESULT
struct ClientGarrisonAssignFollowerToBuildingResult
{
    uint64 FollowerDBID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Result;                ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  PlotInstanceID;        ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_GARRISON_REMOVE_FOLLOWER_FROM_BUILDING_RESULT
struct ClientGarrisonRemoveFollowerFromBuildingResult
{
    uint64 FollowerDBID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Result;              ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_DELETE_RESULT
struct ClientGarrisonDeleteResult
{
    int32 Result;            ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 GarrSiteID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_GARRISON_OPEN_ARCHITECT
struct ClientGarrisonOpenArchitect
{
    uint64 NpcGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_GARRISON_OPEN_MISSION_NPC
struct ClientGarrisonOpenMissionNPC
{
    uint64 NpcGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_OPEN_SHIPMENT_NPCFROM_GOSSIP
struct ClientOpenShipmentNPCFromGossip
{
    uint64 NpcGUID;                        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  CharShipmentContainerID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_GET_SHIPMENT_INFO_RESPONSE
struct ClientGetShipmentInfoResponse
{
    struct JamCliCharacterShipment
    {
        int32  ShipmentRecID;           ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64 ShipmentID;              ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint32 CreationTime;            ///< Offset 0x0010 Type _MJVTBL_TIME_T
        uint32 ShipmentDuration;        ///< Offset 0x0018 Type _MJVTBL_TIME_T
    };

    std::vector<JamCliCharacterShipment> Shipments;                                   ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliCharacterShipment>::MJVTBL
    int32                                PlotInstanceID;                              ///< Offset 0x0018 Type _MJVTBL_INT32
    int32                                ShipmentID;                                  ///< Offset 0x001C Type _MJVTBL_INT32
    bool                                 Success;                                     ///< Offset 0x0020 Type _MJVTBL_BOOL
    int32                                MaxShipments;                                ///< Offset 0x0024 Type _MJVTBL_INT32
};

///< SMSG_OPEN_SHIPMENT_NPCRESULT
struct ClientOpenShipmentNPCResult
{
    int32 CharShipmentContainerID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Success;                        ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< SMSG_CREATE_SHIPMENT_RESPONSE
struct ClientCreateShipmentResponse
{
    uint64 ShipmentID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Result;               ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  ShipmentRecID;        ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_COMPLETE_SHIPMENT_RESPONSE
struct ClientCompleteShipmentResponse
{
    uint64 ShipmentID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Result;            ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_GET_SHIPMENTS_OF_TYPE_RESPONSE
struct ClientGetShipmentsOfTypeResponse
{
    struct JamCliCharacterShipment
    {
        int32  ShipmentRecID;           ///< Offset 0x0000 Type _MJVTBL_INT32
        uint64 ShipmentID;              ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint32 CreationTime;            ///< Offset 0x0010 Type _MJVTBL_TIME_T
        uint32 ShipmentDuration;        ///< Offset 0x0018 Type _MJVTBL_TIME_T
    };

    int32                                ContainerID;                                 ///< Offset 0x0000 Type _MJVTBL_INT32
    std::vector<JamCliCharacterShipment> Shipments;                                   ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamCliCharacterShipment>::MJVTBL
};

///< SMSG_READ_ITEM_RESULT_OK
struct ClientReadItemResultOK
{
    uint64 Item;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_READ_ITEM_RESULT_FAILED
struct ClientReadItemResultFailed
{
    uint64            Item;                     ///< Offset 0x0000 Type _MJVTBL_UINT64
    READ_ITEM_FAILURE Subcode;                  ///< Offset 0x0008 Type _MJVTBL_READ_ITEM_FAILURE
    int32             Delay;                    ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_SCENARIO_BOOT
struct ClientScenarioBoot
{
};

///< SMSG_SCENARIO_OUT_OF_BOUNDS
struct ClientScenarioOutOfBounds
{
    int32 TimeRemaining;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_SHOW_MAILBOX
struct ClientShowMailbox
{
    uint64 PostmasterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_CHAR_FACTION_CHANGE_RESULT
struct ClientCharFactionChangeResult
{
    struct JamCharFactionChangeDisplayInfo
    {
        std::string Name;                     ///< Offset 0x0000 Type _MJVTBL_STRING
        uint8       SexID;                    ///< Offset 0x0031 Type _MJVTBL_UINT8
        uint8       SkinID;                   ///< Offset 0x0032 Type _MJVTBL_UINT8
        uint8       HairColorID;              ///< Offset 0x0033 Type _MJVTBL_UINT8
        uint8       HairStyleID;              ///< Offset 0x0034 Type _MJVTBL_UINT8
        uint8       FacialHairStyleID;        ///< Offset 0x0035 Type _MJVTBL_UINT8
        uint8       FaceID;                   ///< Offset 0x0036 Type _MJVTBL_UINT8
        uint8       RaceID;                   ///< Offset 0x0037 Type _MJVTBL_UINT8
    };

    uint8                                     Result;                                           ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint64                                    Guid;                                             ///< Offset 0x0008 Type _MJVTBL_UINT64
    Optional<JamCharFactionChangeDisplayInfo> Display;                                          ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamCharFactionChangeDisplayInfo>::MJVTBL
};

///< SMSG_RAID_DIFFICULTY_SET
struct ClientRaidDifficultySet
{
    int32 DifficultyID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_XPGAIN_ENABLED
struct ClientXPGainEnabled
{
    bool Enabled;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_RAID_GROUP_ONLY
struct ClientRaidGroupOnly
{
    uint32 Reason;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32  Delay;         ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_INSTANCE_ENCOUNTER_ENGAGE_UNIT
struct ClientInstanceEncounterEngageUnit
{
    uint64 Unit;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  TargetFramePriority;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< SMSG_INSTANCE_ENCOUNTER_DISENGAGE_UNIT
struct ClientInstanceEncounterDisengageUnit
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_INSTANCE_ENCOUNTER_CHANGE_PRIORITY
struct ClientInstanceEncounterChangePriority
{
    uint64 Unit;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  TargetFramePriority;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< SMSG_INSTANCE_ENCOUNTER_TIMER_START
struct ClientInstanceEncounterTimerStart
{
    int32 TimeRemaining;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_INSTANCE_ENCOUNTER_OBJECTIVE_START
struct ClientInstanceEncounterObjectiveStart
{
    int32 ObjectiveID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_INSTANCE_ENCOUNTER_OBJECTIVE_COMPLETE
struct ClientInstanceEncounterObjectiveComplete
{
    int32 ObjectiveID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_INSTANCE_ENCOUNTER_START
struct ClientInstanceEncounterStart
{
    uint32 NextCombatResChargeTime;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 CombatResChargeRecovery;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    int32  MaxInCombatResCount;            ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  InCombatResCount;               ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_INSTANCE_ENCOUNTER_OBJECTIVE_UPDATE
struct ClientInstanceEncounterObjectiveUpdate
{
    int32 ProgressAmount;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 ObjectiveID;           ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_INSTANCE_ENCOUNTER_END
struct ClientInstanceEncounterEnd
{
};

///< SMSG_INSTANCE_ENCOUNTER_IN_COMBAT_RESURRECTION
struct ClientInstanceEncounterInCombatResurrection
{
};

///< SMSG_INSTANCE_ENCOUNTER_GAIN_COMBAT_RESURRECTION_CHARGE
struct ClientInstanceEncounterGainCombatResurrectionCharge
{
    uint32 CombatResChargeRecovery;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32  InCombatResCount;               ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_INSTANCE_ENCOUNTER_PHASE_SHIFT_CHANGED
struct ClientInstanceEncounterPhaseShiftChanged
{
};

///< SMSG_TUTORIAL_FLAGS
struct ClientTutorialFlags
{
    uint8 TutorialData[32];        ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<unsignedchar,32,&(MJVTBL_UINT8)>::MJVTBL
};

///< SMSG_CHARACTER_UPGRADE_STARTED
struct ClientCharacterUpgradeStarted
{
    uint64 CharacterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_CHARACTER_UPGRADE_COMPLETE
struct ClientCharacterUpgradeComplete
{
    std::vector<int32> Items;                     ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    uint64             CharacterGUID;             ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< SMSG_CHARACTER_UPGRADE_ABORTED
struct ClientCharacterUpgradeAborted
{
    uint64 CharacterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_DISPLAY_QUEST_POPUP
struct ClientDisplayQuestPopup
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_UPDATE_CHARACTER_FLAGS
struct ClientUpdateCharacterFlags
{
    uint64           Character;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    Optional<uint32> Flags3;                  ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    Optional<uint32> Flags;                   ///< Offset 0x0010 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    Optional<uint32> Flags2;                  ///< Offset 0x0018 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
};

///< SMSG_TEST128_BIT_GUIDS_RESPONSE
struct ClientTest128BitGuidsResponse
{
    uint64 Guid[2];           ///< Offset 0x0000 Type _MJVTBL_UINT128
};

///< SMSG_REPLACE_TROPHY_RESPONSE
struct ClientReplaceTrophyResponse
{
    bool Success;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_GET_TROPHY_LIST_RESPONSE
struct ClientGetTrophyListResponse
{
    std::vector<int32> TrophyID;                  ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    bool               Success;                   ///< Offset 0x0018 Type _MJVTBL_BOOL
};

///< SMSG_QUERY_ITEM_TEXT_RESPONSE
struct ClientQueryItemTextResponse
{
    struct Item_Struct
    {
        std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    uint64      Id;                 ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool        Valid;              ///< Offset 0x0008 Type _MJVTBL_BOOL
    Item_Struct Item;               ///< Offset 0x0009 Type _MJVTBL_STRUCT
};

///< SMSG_ITEM_COOLDOWN
struct ClientItemCooldown
{
    uint64 ItemGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SpellID;         ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_TOGGLE_LOGGING
struct ClientMoveToggleLogging
{
};

///< SMSG_MOVE_TOGGLE_FALL_LOGGING
struct ClientMoveToggleFallLogging
{
};

///< SMSG_DAMAGE_CALC_LOG
struct ClientDamageCalcLog
{
    struct ClientDamageCalcLogEntry
    {
        std::string Op;                 ///< Offset 0x0000 Type _MJVTBL_STRING
        uint32      Var;                ///< Offset 0x0020 Type _MJVTBL_UINT32
        float       Value;              ///< Offset 0x0024 Type _MJVTBL_FLOAT
        float       Damage;             ///< Offset 0x0028 Type _MJVTBL_FLOAT
    };

    uint32                                SourceType;                                   ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint64                                Attacker;                                     ///< Offset 0x0008 Type _MJVTBL_UINT64
    std::vector<ClientDamageCalcLogEntry> Entries;                                      ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<ClientDamageCalcLogEntry>::MJVTBL
    uint32                                SpellID;                                      ///< Offset 0x0028 Type _MJVTBL_UINT32
    uint64                                Defender;                                     ///< Offset 0x0030 Type _MJVTBL_UINT64
};

///< SMSG_EMOTE
struct ClientEmote
{
    uint64 Guid;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 EmoteID;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_TRIGGER_CINEMATIC
struct ClientTriggerCinematic
{
    uint32 CinematicID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_UPDATE_OBJECT
struct ClientUpdateObject
{
    uint32  NumObjUpdates;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint16  MapID;                ///< Offset 0x0004 Type _MJVTBL_UINT16
    uint8 * Data;                 ///< Offset 0x0008 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_UNDELETE_CHARACTER_RESPONSE
struct ClientUndeleteCharacterResponse
{
    uint64                    CharacterGuid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32                     ClientToken;                      ///< Offset 0x0008 Type _MJVTBL_INT32
    UNDELETE_CHARACTER_RESULT Result;                           ///< Offset 0x000C Type _MJVTBL_UNDELETE_CHARACTER_RESULT
};

///< SMSG_UNDELETE_COOLDOWN_STATUS_RESPONSE
struct ClientUndeleteCooldownStatusResponse
{
    bool OnCooldown;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_TREASURE_DEBUG
struct ClientTreasureDebug
{
    uint32      Depth;              ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string Text;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< SMSG_ITEM_BONUS_DEBUG
struct ClientItemBonusDebug
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_SET_LOOT_METHOD_FAILED
struct ClientSetLootMethodFailed
{
};

///< SMSG_CHAT_IGNORED_ACCOUNT_MUTED
struct ClientChatIgnoredAccountMuted
{
};

///< SMSG_CHAT
struct ClientChat
{
    struct Chat_Struct
    {
        uint8       SlashCmd;                    ///< Offset 0x0000 Type _MJVTBL_UINT8
        int8        Language;                    ///< Offset 0x0001 Type _MJVTBL_INT8
        uint64      SenderGUID;                  ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint64      SenderGuildGUID;             ///< Offset 0x0010 Type _MJVTBL_UINT64
        uint64      TargetGUID;                  ///< Offset 0x0018 Type _MJVTBL_UINT64
        uint64      PartyGUID;                   ///< Offset 0x0020 Type _MJVTBL_UINT64
        uint32      SenderVirtualAddress;        ///< Offset 0x0028 Type _MJVTBL_UINT32
        uint32      TargetVirtualAddress;        ///< Offset 0x002C Type _MJVTBL_UINT32
        std::string SenderName;                  ///< Offset 0x0030 Type _MJVTBL_STRING
        std::string TargetName;                  ///< Offset 0x0431 Type _MJVTBL_STRING
        std::string Prefix;                      ///< Offset 0x0832 Type _MJVTBL_STRING
        std::string Channel;                     ///< Offset 0x0843 Type _MJVTBL_STRING
        std::string ChatText;                    ///< Offset 0x08C3 Type _MJVTBL_STRING
        int32       AchievementID;               ///< Offset 0x147C Type _MJVTBL_INT32
        uint16      ChatFlags;                   ///< Offset 0x1480 Type _MJVTBL_UINT16
        float       DisplayTime;                 ///< Offset 0x1484 Type _MJVTBL_FLOAT
        bool        HideChatLog;                 ///< Offset 0x1488 Type _MJVTBL_BOOL
        bool        FakeSenderName;              ///< Offset 0x1489 Type _MJVTBL_BOOL
    };

    Chat_Struct Chat;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_WHO
struct ClientWho
{
    struct Response_Struct
    {
        struct JamWhoEntry
        {
            struct PlayerData_Struct
            {
                bool         IsDeleted;                  ///< Offset 0x0000 Type _MJVTBL_BOOL
                uint32       AccountID;                  ///< Offset 0x0004 Type _MJVTBL_UINT32
                uint64       BnetAccountID;              ///< Offset 0x0008 Type _MJVTBL_UINT64
                uint64       GuidActual;                 ///< Offset 0x0010 Type _MJVTBL_UINT64
                std::string  Name;                       ///< Offset 0x0018 Type _MJVTBL_STRING
                uint32       VirtualRealmAddress;        ///< Offset 0x004C Type _MJVTBL_UINT32
                uint8        Race;                       ///< Offset 0x0050 Type _MJVTBL_UINT8
                uint8        Sex;                        ///< Offset 0x0051 Type _MJVTBL_UINT8
                uint8        ClassID;                    ///< Offset 0x0052 Type _MJVTBL_UINT8
                uint8        Level;                      ///< Offset 0x0053 Type _MJVTBL_UINT8
                std::string  DeclinedNames[5];           ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOfStrings<5,65>::MJVTBL
            };

            PlayerData_Struct PlayerData;                      ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint64            GuildGUID;                       ///< Offset 0x01A0 Type _MJVTBL_UINT64
            uint32            GuildVirtualRealmAddress;        ///< Offset 0x01A8 Type _MJVTBL_UINT32
            std::string       GuildName;                       ///< Offset 0x01AC Type _MJVTBL_STRING
            int32             AreaID;                          ///< Offset 0x0210 Type _MJVTBL_INT32
            bool              IsGM;                            ///< Offset 0x0214 Type _MJVTBL_BOOL
        };

        std::vector<JamWhoEntry> Entries;                         ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamWhoEntry>::MJVTBL
    };

    Response_Struct Response;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOTD
struct ClientMOTD
{
    struct JamClientMOTDStruct
    {
        std::string Line;               ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    std::vector<JamClientMOTDStruct> Text;                                    ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientMOTDStruct>::MJVTBL
};

///< SMSG_CHAT_PLAYER_AMBIGUOUS
struct ClientChatPlayerAmbiguous
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_EXPECTED_SPAM_RECORDS
struct ClientExpectedSpamRecords
{
    struct JamClientSpamRecord
    {
        std::string SpamMessage;        ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    std::vector<JamClientSpamRecord> SpamRecord;                              ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientSpamRecord>::MJVTBL
};

///< SMSG_AVAILABLE_VOICE_CHANNEL
struct ClientAvailableVoiceChannel
{
    uint8       SessionType;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint64      LocalGUID;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64      SessionGUID;        ///< Offset 0x0010 Type _MJVTBL_UINT64
    std::string ChannelName;        ///< Offset 0x0018 Type _MJVTBL_STRING
};

///< SMSG_VOICE_CHAT_STATUS
struct ClientVoiceChatStatus
{
    bool Enabled;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_VOICE_PARENTAL_CONTROLS
struct ClientVoiceParentalControls
{
    bool EnableMicrophone;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool EnableVoiceChat;         ///< Offset 0x0001 Type _MJVTBL_BOOL
};

///< SMSG_VOICE_SESSION_ROSTER_UPDATE
struct ClientVoiceSessionRosterUpdate
{
    struct ClientVoiceSessionRosterUpdateMember
    {
        uint64 MemberGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint8  NetworkId;         ///< Offset 0x0008 Type _MJVTBL_UINT8
        uint8  Priority;          ///< Offset 0x0009 Type _MJVTBL_UINT8
        uint8  Flags;             ///< Offset 0x000A Type _MJVTBL_UINT8
    };

    uint16                                            ComsatPort;                                               ///< Offset 0x0000 Type _MJVTBL_UINT16
    uint64                                            LocalMemberGUID;                                          ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint16                                            SessionNetworkID;                                         ///< Offset 0x0010 Type _MJVTBL_UINT16
    uint8                                             SessionType;                                              ///< Offset 0x0012 Type _MJVTBL_UINT8
    uint8                                             LocalFlags;                                               ///< Offset 0x0013 Type _MJVTBL_UINT8
    std::string                                       ChannelName;                                              ///< Offset 0x0014 Type _MJVTBL_STRING
    uint32                                            ComsatAddress;                                            ///< Offset 0x0094 Type _MJVTBL_UINT32
    uint64                                            ClientGUID;                                               ///< Offset 0x0098 Type _MJVTBL_UINT64
    uint8                                             LocalNetworkID;                                           ///< Offset 0x00A0 Type _MJVTBL_UINT8
    std::vector<ClientVoiceSessionRosterUpdateMember> Members;                                                  ///< Offset 0x00A8 Type MakeMJVTblForArrayOfStruct<ClientVoiceSessionRosterUpdateMember>::MJVTBL
    uint8                                             Digest[16];                                               ///< Offset 0x00C0 Type MakeMJVTblForFixedArrayOf<unsignedchar,16,&(MJVTBL_UINT8)>::MJVTBL
};

///< SMSG_VOICE_SESSION_LEAVE
struct ClientVoiceSessionLeave
{
    uint64 ClientGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 SessionGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< SMSG_CHAT_NOT_IN_PARTY
struct ClientChatNotInParty
{
    uint32 SlashCmd;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_CHAT_RESTRICTED
struct ClientChatRestricted
{
    uint8 Reason;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< SMSG_RAID_INSTANCE_MESSAGE
struct ClientRaidInstanceMessage
{
    uint8  Type;                ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint32 DifficultyID;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32 MapID;               ///< Offset 0x0008 Type _MJVTBL_UINT32
    bool   Locked;              ///< Offset 0x000C Type _MJVTBL_BOOL
    int32  TimeLeft;            ///< Offset 0x0010 Type _MJVTBL_INT32
    bool   Extended;            ///< Offset 0x0014 Type _MJVTBL_BOOL
};

///< SMSG_ZONE_UNDER_ATTACK
struct ClientZoneUnderAttack
{
    int32 AreaID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_DEFENSE_MESSAGE
struct ClientDefenseMessage
{
    int32       ZoneID;             ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string MessageText;        ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< SMSG_CHAT_PLAYER_NOTFOUND
struct ClientChatPlayerNotfound
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_CHAT_AUTO_RESPONDED
struct ClientChatAutoResponded
{
    bool        IsDND;               ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32      RealmAddress;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    std::string AfkMessage;          ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< SMSG_USERLIST_ADD
struct ClientUserlistAdd
{
    uint8       ChannelFlags;         ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8       UserFlags;            ///< Offset 0x0001 Type _MJVTBL_UINT8
    std::string ChannelName;          ///< Offset 0x0002 Type _MJVTBL_STRING
    uint64      AddedUserGUID;        ///< Offset 0x0088 Type _MJVTBL_UINT64
    int32       ChannelID;            ///< Offset 0x0090 Type _MJVTBL_INT32
};

///< SMSG_USERLIST_REMOVE
struct ClientUserlistRemove
{
    uint8       ChannelFlags;           ///< Offset 0x0000 Type _MJVTBL_UINT8
    std::string ChannelName;            ///< Offset 0x0001 Type _MJVTBL_STRING
    int32       ChannelID;              ///< Offset 0x0084 Type _MJVTBL_INT32
    uint64      RemovedUserGUID;        ///< Offset 0x0088 Type _MJVTBL_UINT64
};

///< SMSG_USERLIST_UPDATE
struct ClientUserlistUpdate
{
    uint8       ChannelFlags;           ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8       UserFlags;              ///< Offset 0x0001 Type _MJVTBL_UINT8
    std::string ChannelName;            ///< Offset 0x0002 Type _MJVTBL_STRING
    uint64      UpdatedUserGUID;        ///< Offset 0x0088 Type _MJVTBL_UINT64
    int32       ChannelID;              ///< Offset 0x0090 Type _MJVTBL_INT32
};

///< SMSG_SERVER_FIRST_ACHIEVEMENT
struct ClientServerFirstAchievement
{
    uint64      PlayerGUID;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Name;                    ///< Offset 0x0008 Type _MJVTBL_STRING
    int32       AchievementID;           ///< Offset 0x006C Type _MJVTBL_INT32
    bool        GuildAchievement;        ///< Offset 0x0070 Type _MJVTBL_BOOL
};

///< SMSG_CHAT_DOWN
struct ClientChatDown
{
};

///< SMSG_CHAT_IS_DOWN
struct ClientChatIsDown
{
};

///< SMSG_CHAT_RECONNECT
struct ClientChatReconnect
{
};

///< SMSG_CHANNEL_NOTIFY
struct ClientChannelNotify
{
    std::string Sender;                    ///< Offset 0x0000 Type _MJVTBL_STRING
    uint64      SenderGuid;                ///< Offset 0x0038 Type _MJVTBL_UINT64
    uint8       Type;                      ///< Offset 0x0040 Type _MJVTBL_UINT8
    uint8       OldFlags;                  ///< Offset 0x0041 Type _MJVTBL_UINT8
    uint8       NewFlags;                  ///< Offset 0x0042 Type _MJVTBL_UINT8
    std::string Channel;                   ///< Offset 0x0043 Type _MJVTBL_STRING
    uint32      SenderVirtualRealm;        ///< Offset 0x00C4 Type _MJVTBL_UINT32
    uint64      TargetGuid;                ///< Offset 0x00C8 Type _MJVTBL_UINT64
    uint32      TargetVirtualRealm;        ///< Offset 0x00D0 Type _MJVTBL_UINT32
    int32       ChatChannelID;             ///< Offset 0x00D4 Type _MJVTBL_INT32
};

///< SMSG_CHANNEL_NOTIFY_JOINED
struct ClientChannelNotifyJoined
{
    std::string ChannelWelcomeMsg;        ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       ChatChannelID;            ///< Offset 0x0204 Type _MJVTBL_INT32
    int32       InstanceID;               ///< Offset 0x0208 Type _MJVTBL_INT32
    uint8       ChannelFlags;             ///< Offset 0x020C Type _MJVTBL_UINT8
    std::string Channel;                  ///< Offset 0x020D Type _MJVTBL_STRING
};

///< SMSG_CHANNEL_NOTIFY_LEFT
struct ClientChannelNotifyLeft
{
    std::string Channel;              ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       ChatChannelID;        ///< Offset 0x0080 Type _MJVTBL_INT32
    bool        Suspended;            ///< Offset 0x0084 Type _MJVTBL_BOOL
};

///< SMSG_CHANNEL_LIST
struct ClientChannelList
{
    struct JamChannelPlayer
    {
        uint64 Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 VirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint8  Flags;                      ///< Offset 0x000C Type _MJVTBL_UINT8
    };

    std::vector<JamChannelPlayer> Members;                              ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamChannelPlayer>::MJVTBL
    std::string                   Channel;                              ///< Offset 0x0018 Type _MJVTBL_STRING
    uint8                         ChannelFlags;                         ///< Offset 0x0098 Type _MJVTBL_UINT8
    bool                          Display;                              ///< Offset 0x0099 Type _MJVTBL_BOOL
};

///< SMSG_CHAT_SERVER_MESSAGE
struct ClientChatServerMessage
{
    std::string StringParam;        ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       MessageID;          ///< Offset 0x0404 Type _MJVTBL_INT32
};

///< SMSG_CONNECTION_AUTH_CHALLENGE
struct ClientConnectionAuthChallenge
{
    uint32 Challenge;              ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 DosChallenge[8];        ///< Offset 0x0004 Type MakeMJVTblForFixedArrayOf<unsignedint,8,&(MJVTBL_UINT32)>::MJVTBL
    uint8  DosZeroBits;            ///< Offset 0x0024 Type _MJVTBL_UINT8
};

///< SMSG_CONNECTION_SUSPEND_COMMS
struct ClientConnectionSuspendComms
{
    uint32 Serial;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_CONNECTION_RESUME_COMMS
struct ClientConnectionResumeComms
{
};

///< SMSG_CONNECTION_DROP_NEW_CONNECTION
struct ClientConnectionDropNewConnection
{
};

///< SMSG_CONNECTION_CONNECT_TO
struct ClientConnectionConnectTo
{
    uint64 Key;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Serial;            ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8  Where[256];        ///< Offset 0x000C Type MakeMJVTblForFixedArrayOf<unsignedchar,256,&(MJVTBL_UINT8)>::MJVTBL
    uint8  Con;               ///< Offset 0x010C Type _MJVTBL_UINT8
};

///< SMSG_CONNECTION_PONG
struct ClientConnectionPong
{
    uint32 Serial;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_CONNECTION_RESET_COMPRESSION_CONTEXT
struct ClientConnectionResetCompressionContext
{
};

///< SMSG_CONNECTION_FLOOD_DETECTED
struct ClientConnectionFloodDetected
{
};

///< SMSG_ALL_GUILD_ACHIEVEMENTS
struct ClientAllGuildAchievements
{
    struct JamEarnedAchievement
    {
        int32   Id;                         ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8 * Date;                       ///< Offset 0x0004 Type _MJVTBL_NOT_IMPLEMENTED
        uint64  Owner;                      ///< Offset 0x0028 Type _MJVTBL_UINT64
        uint32  VirtualRealmAddress;        ///< Offset 0x0030 Type _MJVTBL_UINT32
        uint32  NativeRealmAddress;         ///< Offset 0x0034 Type _MJVTBL_UINT32
    };

    std::vector<JamEarnedAchievement> Earned;                                   ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamEarnedAchievement>::MJVTBL
};

///< SMSG_GUILD_SEND_GUILD_XP
struct ClientGuildSendGuildXP
{
    int64 GuildXPToLevel;        ///< Offset 0x0000 Type _MJVTBL_INT64
    int64 MemberTotalXP;         ///< Offset 0x0008 Type _MJVTBL_INT64
    int64 MemberWeeklyXP;        ///< Offset 0x0010 Type _MJVTBL_INT64
    int64 GuildTotalXP;          ///< Offset 0x0018 Type _MJVTBL_INT64
};

///< SMSG_GUILD_SEND_MAX_DAILY_XP
struct ClientGuildSendMaxDailyXP
{
    int64 Xp;           ///< Offset 0x0000 Type _MJVTBL_INT64
};

///< SMSG_GUILD_SEND_RANK_CHANGE
struct ClientGuildSendRankChange
{
    uint64 Other;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   Promote;        ///< Offset 0x0008 Type _MJVTBL_BOOL
    uint64 Officer;        ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint32 RankID;         ///< Offset 0x0018 Type _MJVTBL_UINT32
};

///< SMSG_GUILD_COMMAND_RESULT
struct ClientGuildCommandResult
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       Result;             ///< Offset 0x0084 Type _MJVTBL_INT32
    int32       Command;            ///< Offset 0x0088 Type _MJVTBL_INT32
};

///< SMSG_GUILD_ROSTER
struct ClientGuildRoster
{
    struct ClientGuildRosterMemberData
    {
        struct ClientGuildRosterProfessionData
        {
            int32 DbID;         ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Rank;         ///< Offset 0x0004 Type _MJVTBL_INT32
            int32 Step;         ///< Offset 0x0008 Type _MJVTBL_INT32
        };

        uint64                          Guid;                                   ///< Offset 0x0000 Type _MJVTBL_UINT64
        int64                           WeeklyXP;                               ///< Offset 0x0008 Type _MJVTBL_INT64
        int64                           TotalXP;                                ///< Offset 0x0010 Type _MJVTBL_INT64
        int32                           RankID;                                 ///< Offset 0x0018 Type _MJVTBL_INT32
        int32                           AreaID;                                 ///< Offset 0x001C Type _MJVTBL_INT32
        int32                           PersonalAchievementPoints;              ///< Offset 0x0020 Type _MJVTBL_INT32
        int32                           GuildReputation;                        ///< Offset 0x0024 Type _MJVTBL_INT32
        int32                           GuildRepToCap;                          ///< Offset 0x0028 Type _MJVTBL_INT32
        float                           LastSave;                               ///< Offset 0x002C Type _MJVTBL_FLOAT
        std::string                     Name;                                   ///< Offset 0x0030 Type _MJVTBL_STRING
        uint32                          VirtualRealmAddress;                    ///< Offset 0x0064 Type _MJVTBL_UINT32
        std::string                     Note;                                   ///< Offset 0x0068 Type _MJVTBL_STRING
        std::string                     OfficerNote;                            ///< Offset 0x00E9 Type _MJVTBL_STRING
        uint8                           Status;                                 ///< Offset 0x016A Type _MJVTBL_UINT8
        uint8                           Level;                                  ///< Offset 0x016B Type _MJVTBL_UINT8
        uint8                           ClassID;                                ///< Offset 0x016C Type _MJVTBL_UINT8
        uint8                           Gender;                                 ///< Offset 0x016D Type _MJVTBL_UINT8
        bool                            Authenticated;                          ///< Offset 0x016E Type _MJVTBL_BOOL
        bool                            SorEligible;                            ///< Offset 0x016F Type _MJVTBL_BOOL
        ClientGuildRosterProfessionData Profession[2];                          ///< Offset 0x0170 Type MakeMJVTblForFixedArrayOfStruct<ClientGuildRosterProfessionData,2>::MJVTBL
    };

    std::vector<ClientGuildRosterMemberData> MemberData;                                      ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientGuildRosterMemberData>::MJVTBL
    int32                                    GuildFlags;                                      ///< Offset 0x0018 Type _MJVTBL_INT32
    std::string                              WelcomeText;                                     ///< Offset 0x001C Type _MJVTBL_STRING
    std::string                              InfoText;                                        ///< Offset 0x021D Type _MJVTBL_STRING
    uint8 *                                  CreateDate;                                      ///< Offset 0x09F0 Type _MJVTBL_NOT_IMPLEMENTED
    int32                                    NumAccounts;                                     ///< Offset 0x0A10 Type _MJVTBL_INT32
    int32                                    MaxWeeklyRep;                                    ///< Offset 0x0A14 Type _MJVTBL_INT32
};

///< SMSG_GUILD_ROSTER_UPDATE
struct ClientGuildRosterUpdate
{
    struct ClientGuildRosterMemberData
    {
        struct ClientGuildRosterProfessionData
        {
            int32 DbID;         ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Rank;         ///< Offset 0x0004 Type _MJVTBL_INT32
            int32 Step;         ///< Offset 0x0008 Type _MJVTBL_INT32
        };

        uint64                          Guid;                                   ///< Offset 0x0000 Type _MJVTBL_UINT64
        int64                           WeeklyXP;                               ///< Offset 0x0008 Type _MJVTBL_INT64
        int64                           TotalXP;                                ///< Offset 0x0010 Type _MJVTBL_INT64
        int32                           RankID;                                 ///< Offset 0x0018 Type _MJVTBL_INT32
        int32                           AreaID;                                 ///< Offset 0x001C Type _MJVTBL_INT32
        int32                           PersonalAchievementPoints;              ///< Offset 0x0020 Type _MJVTBL_INT32
        int32                           GuildReputation;                        ///< Offset 0x0024 Type _MJVTBL_INT32
        int32                           GuildRepToCap;                          ///< Offset 0x0028 Type _MJVTBL_INT32
        float                           LastSave;                               ///< Offset 0x002C Type _MJVTBL_FLOAT
        std::string                     Name;                                   ///< Offset 0x0030 Type _MJVTBL_STRING
        uint32                          VirtualRealmAddress;                    ///< Offset 0x0064 Type _MJVTBL_UINT32
        std::string                     Note;                                   ///< Offset 0x0068 Type _MJVTBL_STRING
        std::string                     OfficerNote;                            ///< Offset 0x00E9 Type _MJVTBL_STRING
        uint8                           Status;                                 ///< Offset 0x016A Type _MJVTBL_UINT8
        uint8                           Level;                                  ///< Offset 0x016B Type _MJVTBL_UINT8
        uint8                           ClassID;                                ///< Offset 0x016C Type _MJVTBL_UINT8
        uint8                           Gender;                                 ///< Offset 0x016D Type _MJVTBL_UINT8
        bool                            Authenticated;                          ///< Offset 0x016E Type _MJVTBL_BOOL
        bool                            SorEligible;                            ///< Offset 0x016F Type _MJVTBL_BOOL
        ClientGuildRosterProfessionData Profession[2];                          ///< Offset 0x0170 Type MakeMJVTblForFixedArrayOfStruct<ClientGuildRosterProfessionData,2>::MJVTBL
    };

    std::vector<ClientGuildRosterMemberData> MemberData;                                      ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientGuildRosterMemberData>::MJVTBL
};

///< SMSG_GUILD_MEMBER_RECIPES
struct ClientGuildMemberRecipes
{
    uint64 Member;                        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SkillRank;                     ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  SkillLineID;                   ///< Offset 0x000C Type _MJVTBL_INT32
    int32  SkillStep;                     ///< Offset 0x0010 Type _MJVTBL_INT32
    uint8  SkillLineBitArray[300];        ///< Offset 0x0014 Type MakeMJVTblForFixedArrayOf<unsignedchar,300,&(MJVTBL_UINT8)>::MJVTBL
};

///< SMSG_GUILD_KNOWN_RECIPES
struct ClientGuildKnownRecipes
{
    struct JamGuildKnownRecipes
    {
        int32 SkillLineID;                   ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8 SkillLineBitArray[300];        ///< Offset 0x0004 Type MakeMJVTblForFixedArrayOf<unsignedchar,300,&(MJVTBL_UINT8)>::MJVTBL
    };

    std::vector<JamGuildKnownRecipes> Recipes;                                  ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamGuildKnownRecipes>::MJVTBL
};

///< SMSG_GUILD_MEMBERS_WITH_RECIPE
struct ClientGuildMembersWithRecipe
{
    int32               SpellID;                    ///< Offset 0x0000 Type _MJVTBL_INT32
    std::vector<uint64> Members;                    ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    int32               SkillLineID;                ///< Offset 0x0020 Type _MJVTBL_INT32
};

///< SMSG_GUILD_REWARD_LIST
struct ClientGuildRewardList
{
    struct JamGuildRewardItem
    {
        uint32              ItemID;                      ///< Offset 0x0000 Type _MJVTBL_UINT32
        std::vector<uint32> AchievementsRequired;        ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32              RaceMask;                    ///< Offset 0x0020 Type _MJVTBL_UINT32
        int32               MinGuildLevel;               ///< Offset 0x0024 Type _MJVTBL_INT32
        int32               MinGuildRep;                 ///< Offset 0x0028 Type _MJVTBL_INT32
        uint64              Cost;                        ///< Offset 0x0030 Type _MJVTBL_UINT64
    };

    std::vector<JamGuildRewardItem> RewardItems;                            ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamGuildRewardItem>::MJVTBL
    uint32                          Version;                                ///< Offset 0x0018 Type _MJVTBL_TIME_T
};

///< SMSG_GUILD_NEWS
struct ClientGuildNews
{
    struct JamGuildNewsEvent
    {
        int32               Id;                         ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8 *             CompletedDate;              ///< Offset 0x0004 Type _MJVTBL_NOT_IMPLEMENTED
        int32               Type;                       ///< Offset 0x0024 Type _MJVTBL_INT32
        int32               Flags;                      ///< Offset 0x0028 Type _MJVTBL_INT32
        uint64              MemberGuid;                 ///< Offset 0x0030 Type _MJVTBL_UINT64
        std::vector<uint64> MemberList;                 ///< Offset 0x0038 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        int32               Data[2];                    ///< Offset 0x0050 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
    };

    std::vector<JamGuildNewsEvent> News;                                  ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamGuildNewsEvent>::MJVTBL
};

///< SMSG_GUILD_NEWS_DELETED
struct ClientGuildNewsDeleted
{
    int32 Id;           ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_GUILD_CRITERIA_UPDATE
struct ClientGuildCriteriaUpdate
{
    struct JamGuildCriteriaProgress
    {
        int32  CriteriaID;         ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32 DateCreated;        ///< Offset 0x0008 Type _MJVTBL_TIME_T
        uint32 DateStarted;        ///< Offset 0x0010 Type _MJVTBL_TIME_T
        uint32 DateUpdated;        ///< Offset 0x0018 Type _MJVTBL_TIME_T
        uint64 Quantity;           ///< Offset 0x0020 Type _MJVTBL_UINT64
        uint64 PlayerGUID;         ///< Offset 0x0028 Type _MJVTBL_UINT64
        int32  Flags;              ///< Offset 0x0030 Type _MJVTBL_INT32
    };

    std::vector<JamGuildCriteriaProgress> Progress;                                     ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamGuildCriteriaProgress>::MJVTBL
};

///< SMSG_GUILD_ACHIEVEMENT_EARNED
struct ClientGuildAchievementEarned
{
    int32   AchievementID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64  GuildGUID;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8 * TimeEarned;           ///< Offset 0x0010 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_GUILD_ACHIEVEMENT_DELETED
struct ClientGuildAchievementDeleted
{
    uint64  GuildGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32   AchievementID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    uint8 * TimeDeleted;          ///< Offset 0x000C Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_GUILD_CRITERIA_DELETED
struct ClientGuildCriteriaDeleted
{
    uint64 GuildGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  CriteriaID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_GUILD_ACHIEVEMENT_MEMBERS
struct ClientGuildAchievementMembers
{
    struct ClientGuildAchievementMember
    {
        uint64 MemberGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    };

    uint64                                    GuildGUID;                                        ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<ClientGuildAchievementMember> Member;                                           ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientGuildAchievementMember>::MJVTBL
    int32                                     AchievementID;                                    ///< Offset 0x0020 Type _MJVTBL_INT32
};

///< SMSG_GUILD_RANKS
struct ClientGuildRanks
{
    struct JamCliGuildRankData
    {
        uint32      RankID;                         ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32      RankOrder;                      ///< Offset 0x0004 Type _MJVTBL_UINT32
        std::string RankName;                       ///< Offset 0x0008 Type _MJVTBL_STRING
        uint32      Flags;                          ///< Offset 0x004C Type _MJVTBL_UINT32
        uint32      WithdrawGoldLimit;              ///< Offset 0x0050 Type _MJVTBL_UINT32
        uint32      TabFlags[8];                    ///< Offset 0x0054 Type MakeMJVTblForFixedArrayOf<unsignedint,8,&(MJVTBL_UINT32)>::MJVTBL
        uint32      TabWithdrawItemLimit[8];        ///< Offset 0x0074 Type MakeMJVTblForFixedArrayOf<unsignedint,8,&(MJVTBL_UINT32)>::MJVTBL
    };

    std::vector<JamCliGuildRankData> Ranks;                                   ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliGuildRankData>::MJVTBL
};

///< SMSG_GUILD_XPEARNED
struct ClientGuildXPEarned
{
    int64 Xp;           ///< Offset 0x0000 Type _MJVTBL_INT64
};

///< SMSG_GUILD_MEMBER_UPDATE_NOTE
struct ClientGuildMemberUpdateNote
{
    std::string Note;               ///< Offset 0x0000 Type _MJVTBL_STRING
    uint64      Member;             ///< Offset 0x0088 Type _MJVTBL_UINT64
    bool        IsPublic;           ///< Offset 0x0090 Type _MJVTBL_BOOL
};

///< SMSG_GUILD_INVITE
struct ClientGuildInvite
{
    uint32      EmblemColor;                        ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32       Level;                              ///< Offset 0x0004 Type _MJVTBL_INT32
    uint32      EmblemStyle;                        ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint64      GuildGUID;                          ///< Offset 0x0010 Type _MJVTBL_UINT64
    std::string GuildName;                          ///< Offset 0x0018 Type _MJVTBL_STRING
    uint32      OldGuildVirtualRealmAddress;        ///< Offset 0x007C Type _MJVTBL_UINT32
    std::string OldGuildName;                       ///< Offset 0x0080 Type _MJVTBL_STRING
    uint32      Background;                         ///< Offset 0x00E4 Type _MJVTBL_UINT32
    uint64      OldGuildGUID;                       ///< Offset 0x00E8 Type _MJVTBL_UINT64
    uint32      BorderStyle;                        ///< Offset 0x00F0 Type _MJVTBL_UINT32
    uint32      GuildVirtualRealmAddress;           ///< Offset 0x00F4 Type _MJVTBL_UINT32
    std::string InviterName;                        ///< Offset 0x00F8 Type _MJVTBL_STRING
    uint32      BorderColor;                        ///< Offset 0x012C Type _MJVTBL_UINT32
    uint32      InviterVirtualRealmAddress;         ///< Offset 0x0130 Type _MJVTBL_UINT32
};

///< SMSG_GUILD_PARTY_STATE
struct ClientGuildPartyState
{
    float GuildXPEarnedMult;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
    int32 NumMembers;               ///< Offset 0x0004 Type _MJVTBL_INT32
    bool  InGuildParty;             ///< Offset 0x0008 Type _MJVTBL_BOOL
    int32 NumRequired;              ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_GUILD_REPUTATION_WEEKLY_CAP
struct ClientGuildReputationWeeklyCap
{
    int32 RepToCap;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_GUILD_REPUTATION_REACTION_CHANGED
struct ClientGuildReputationReactionChanged
{
    uint64 MemberGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_LFGUILD_POST
struct ClientLFGuildPost
{
    struct GuildPostData
    {
        bool        Active;                  ///< Offset 0x0000 Type _MJVTBL_BOOL
        int32       PlayStyle;               ///< Offset 0x0004 Type _MJVTBL_INT32
        int32       Availability;            ///< Offset 0x0008 Type _MJVTBL_INT32
        int32       ClassRoles;              ///< Offset 0x000C Type _MJVTBL_INT32
        int32       LevelRange;              ///< Offset 0x0010 Type _MJVTBL_INT32
        uint32      SecondsRemaining;        ///< Offset 0x0018 Type _MJVTBL_TIME_T
        std::string Comment;                 ///< Offset 0x0020 Type _MJVTBL_STRING
    };

    Optional<GuildPostData> Post;                           ///< Offset 0x0000 Type MakeMJVTblForOptionalStruct<GuildPostData>::MJVTBL
};

///< SMSG_LFGUILD_BROWSE
struct ClientLFGuildBrowse
{
    struct LFGuildBrowseData
    {
        std::string GuildName;                     ///< Offset 0x0000 Type _MJVTBL_STRING
        uint64      GuildGUID;                     ///< Offset 0x0068 Type _MJVTBL_UINT64
        uint32      GuildVirtualRealm;             ///< Offset 0x0070 Type _MJVTBL_UINT32
        int32       GuildLevel;                    ///< Offset 0x0074 Type _MJVTBL_INT32
        int32       GuildMembers;                  ///< Offset 0x0078 Type _MJVTBL_INT32
        int32       GuildAchievementPoints;        ///< Offset 0x007C Type _MJVTBL_INT32
        int32       PlayStyle;                     ///< Offset 0x0080 Type _MJVTBL_INT32
        int32       Availability;                  ///< Offset 0x0084 Type _MJVTBL_INT32
        int32       ClassRoles;                    ///< Offset 0x0088 Type _MJVTBL_INT32
        int32       LevelRange;                    ///< Offset 0x008C Type _MJVTBL_INT32
        int32       EmblemStyle;                   ///< Offset 0x0090 Type _MJVTBL_INT32
        int32       EmblemColor;                   ///< Offset 0x0094 Type _MJVTBL_INT32
        int32       BorderStyle;                   ///< Offset 0x0098 Type _MJVTBL_INT32
        int32       BorderColor;                   ///< Offset 0x009C Type _MJVTBL_INT32
        int32       Background;                    ///< Offset 0x00A0 Type _MJVTBL_INT32
        std::string Comment;                       ///< Offset 0x00A4 Type _MJVTBL_STRING
        int8        Cached;                        ///< Offset 0x04A4 Type _MJVTBL_INT8
        int8        MembershipRequested;           ///< Offset 0x04A5 Type _MJVTBL_INT8
    };

    std::vector<LFGuildBrowseData> Post;                                  ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<LFGuildBrowseData>::MJVTBL
};

///< SMSG_LFGUILD_RECRUITS
struct ClientLFGuildRecruits
{
    struct LFGuildRecruitData
    {
        uint64      RecruitGUID;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
        std::string Name;                          ///< Offset 0x0008 Type _MJVTBL_STRING
        uint32      RecruitVirtualRealm;           ///< Offset 0x003C Type _MJVTBL_UINT32
        std::string Comment;                       ///< Offset 0x0040 Type _MJVTBL_STRING
        int32       CharacterClass;                ///< Offset 0x0440 Type _MJVTBL_INT32
        int32       CharacterGender;               ///< Offset 0x0444 Type _MJVTBL_INT32
        int32       CharacterLevel;                ///< Offset 0x0448 Type _MJVTBL_INT32
        int32       ClassRoles;                    ///< Offset 0x044C Type _MJVTBL_INT32
        int32       PlayStyle;                     ///< Offset 0x0450 Type _MJVTBL_INT32
        int32       Availability;                  ///< Offset 0x0454 Type _MJVTBL_INT32
        uint32      SecondsSinceCreated;           ///< Offset 0x0458 Type _MJVTBL_UINT32
        uint32      SecondsUntilExpiration;        ///< Offset 0x045C Type _MJVTBL_UINT32
    };

    std::vector<LFGuildRecruitData> Recruits;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<LFGuildRecruitData>::MJVTBL
    uint32                          UpdateTime;                             ///< Offset 0x0018 Type _MJVTBL_TIME_T
};

///< SMSG_LFGUILD_COMMAND_RESULT
struct ClientLFGuildCommandResult
{
    int32 CommandID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int8  Success;          ///< Offset 0x0004 Type _MJVTBL_INT8
};

///< SMSG_LFGUILD_APPLICATIONS
struct ClientLFGuildApplications
{
    struct LFGuildApplicationData
    {
        uint64      GuildGUID;                     ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32      GuildVirtualRealm;             ///< Offset 0x0008 Type _MJVTBL_UINT32
        std::string GuildName;                     ///< Offset 0x000C Type _MJVTBL_STRING
        int32       ClassRoles;                    ///< Offset 0x0070 Type _MJVTBL_INT32
        int32       PlayStyle;                     ///< Offset 0x0074 Type _MJVTBL_INT32
        int32       Availability;                  ///< Offset 0x0078 Type _MJVTBL_INT32
        uint32      SecondsSinceCreated;           ///< Offset 0x007C Type _MJVTBL_UINT32
        uint32      SecondsUntilExpiration;        ///< Offset 0x0080 Type _MJVTBL_UINT32
        std::string Comment;                       ///< Offset 0x0084 Type _MJVTBL_STRING
    };

    std::vector<LFGuildApplicationData> Application;                                ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<LFGuildApplicationData>::MJVTBL
    int32                               NumRemaining;                               ///< Offset 0x0018 Type _MJVTBL_INT32
};

///< SMSG_GUILD_CHALLENGE_UPDATE
struct ClientGuildChallengeUpdate
{
    int32 MaxCount[6];            ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
    int32 Xp[6];                  ///< Offset 0x0018 Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
    int32 Gold[6];                ///< Offset 0x0030 Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
    int32 CurrentCount[6];        ///< Offset 0x0048 Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
    int32 MaxLevelGold[6];        ///< Offset 0x0060 Type MakeMJVTblForFixedArrayOf<int,6,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_GUILD_CHALLENGE_COMPLETED
struct ClientGuildChallengeCompleted
{
    int32 MaxCount;             ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 ChallengeType;        ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 GoldAwarded;          ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 XpAwarded;            ///< Offset 0x000C Type _MJVTBL_INT32
    int32 CurrentCount;         ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_LFGUILD_APPLICANT_LIST_CHANGED
struct ClientLFGuildApplicantListChanged
{
};

///< SMSG_LFGUILD_APPLICATIONS_LIST_CHANGED
struct ClientLFGuildApplicationsListChanged
{
};

///< SMSG_GMGUILD_SAVE_RESPONSE
struct ClientGMGuildSaveResponse
{
    bool    Success;            ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint8 * ProfileData;        ///< Offset 0x0008 Type _MJVTBL_NOT_IMPLEMENTED
};

///< SMSG_GUILD_RESET
struct ClientGuildReset
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_GUILD_MOVE_STARTING
struct ClientGuildMoveStarting
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_GUILD_MOVED
struct ClientGuildMoved
{
    std::string TargetRealmName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    uint64      GuildGUID;              ///< Offset 0x0100 Type _MJVTBL_UINT64
};

///< SMSG_GUILD_NAME_CHANGED
struct ClientGuildNameChanged
{
    uint64      GuildGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string GuildName;          ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< SMSG_GUILD_FLAGGED_FOR_RENAME
struct ClientGuildFlaggedForRename
{
    bool FlagSet;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_GUILD_CHANGE_NAME_RESULT
struct ClientGuildChangeNameResult
{
    bool Success;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_GUILD_BANK_QUERY_RESULTS
struct ClientGuildBankQueryResults
{
    struct JamGuildBankItemInfo
    {
        struct Item_Struct
        {
            struct JamItemBonusInstanceData
            {
                struct Context_Struct
                {
                    uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
                };

                struct Bonuses_Struct
                {
                    std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
                };

                Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
                Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
            };

            int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
            Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
            Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
        };

        struct JamGuildBankSocketEnchant
        {
            int32 SocketIndex;            ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 SocketEnchantID;        ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                                  Slot;                                          ///< Offset 0x0000 Type _MJVTBL_INT32
        Item_Struct                            Item;                                          ///< Offset 0x0008 Type _MJVTBL_STRUCT
        int32                                  Count;                                         ///< Offset 0x0068 Type _MJVTBL_INT32
        int32                                  EnchantmentID;                                 ///< Offset 0x006C Type _MJVTBL_INT32
        int32                                  Charges;                                       ///< Offset 0x0070 Type _MJVTBL_INT32
        std::vector<JamGuildBankSocketEnchant> SocketEnchant;                                 ///< Offset 0x0078 Type MakeMJVTblForArrayOfStruct<JamGuildBankSocketEnchant>::MJVTBL
        int32                                  OnUseEnchantmentID;                            ///< Offset 0x0090 Type _MJVTBL_INT32
        bool                                   Locked;                                        ///< Offset 0x0094 Type _MJVTBL_BOOL
        int32                                  Flags;                                         ///< Offset 0x0098 Type _MJVTBL_INT32
    };

    struct JamGuildBankTabInfo
    {
        int32       TabIndex;           ///< Offset 0x0000 Type _MJVTBL_INT32
        std::string Name;               ///< Offset 0x0004 Type _MJVTBL_STRING
        std::string Icon;               ///< Offset 0x0045 Type _MJVTBL_STRING
    };

    std::vector<JamGuildBankItemInfo> ItemInfo;                                 ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamGuildBankItemInfo>::MJVTBL
    int32                             WithdrawalsRemaining;                     ///< Offset 0x0018 Type _MJVTBL_INT32
    int32                             Tab;                                      ///< Offset 0x001C Type _MJVTBL_INT32
    std::vector<JamGuildBankTabInfo>  TabInfo;                                  ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<JamGuildBankTabInfo>::MJVTBL
    bool                              FullUpdate;                               ///< Offset 0x0038 Type _MJVTBL_BOOL
    uint64                            Money;                                    ///< Offset 0x0040 Type _MJVTBL_UINT64
};

///< SMSG_GUILD_BANK_LOG_QUERY_RESULTS
struct ClientGuildBankLogQueryResults
{
    struct JamGuildBankLogEntry
    {
        uint64           PlayerGUID;              ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32           TimeOffset;              ///< Offset 0x0008 Type _MJVTBL_UINT32
        int8             EntryType;               ///< Offset 0x000C Type _MJVTBL_INT8
        Optional<uint64> Money;                   ///< Offset 0x0010 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        Optional<int32>  ItemID;                  ///< Offset 0x0020 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        Optional<int32>  Count;                   ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        Optional<int8>   OtherTab;                ///< Offset 0x0030 Type MakeMJVTblForOptional<signedchar,&(MJVTBL_INT8)>::MJVTBL
    };

    Optional<uint64>                  WeeklyBonusMoney;                         ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    std::vector<JamGuildBankLogEntry> Entry;                                    ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamGuildBankLogEntry>::MJVTBL
    int32                             Tab;                                      ///< Offset 0x0028 Type _MJVTBL_INT32
};

///< SMSG_GUILD_BANK_REMAINING_WITHDRAW_MONEY
struct ClientGuildBankRemainingWithdrawMoney
{
    uint64 RemainingWithdrawMoney;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_GUILD_PERMISSIONS_QUERY_RESULTS
struct ClientGuildPermissionsQueryResults
{
    struct JamGuildRankTabPermissions
    {
        int32 Flags;                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 WithdrawItemLimit;        ///< Offset 0x0004 Type _MJVTBL_INT32
    };

    int32                                   NumTabs;                                        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32                                   WithdrawGoldLimit;                              ///< Offset 0x0004 Type _MJVTBL_INT32
    int32                                   Flags;                                          ///< Offset 0x0008 Type _MJVTBL_INT32
    std::vector<JamGuildRankTabPermissions> Tab;                                            ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamGuildRankTabPermissions>::MJVTBL
    uint32                                  RankID;                                         ///< Offset 0x0028 Type _MJVTBL_UINT32
};

///< SMSG_GUILD_EVENT_LOG_QUERY_RESULTS
struct ClientGuildEventLogQueryResults
{
    struct JamClientGuildEventEntry
    {
        uint64 PlayerGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64 OtherGUID;              ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint32 TransactionDate;        ///< Offset 0x0010 Type _MJVTBL_UINT32
        uint8  TransactionType;        ///< Offset 0x0014 Type _MJVTBL_UINT8
        uint8  RankID;                 ///< Offset 0x0015 Type _MJVTBL_UINT8
    };

    std::vector<JamClientGuildEventEntry> Entry;                                        ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientGuildEventEntry>::MJVTBL
};

///< SMSG_GUILD_BANK_TEXT_QUERY_RESULT
struct ClientGuildBankTextQueryResult
{
    int32       Tab;                ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string Text;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< SMSG_GUILD_MEMBER_DAILY_RESET
struct ClientGuildMemberDailyReset
{
};

///< SMSG_QUERY_GUILD_INFO_RESPONSE
struct ClientQueryGuildInfoResponse
{
    struct Info_Struct
    {
        struct JamCliGuildInfoRank
        {
            int32       M_rankID;           ///< Offset 0x0000 Type _MJVTBL_INT32
            int32       M_rankOrder;        ///< Offset 0x0004 Type _MJVTBL_INT32
            std::string M_rankName;         ///< Offset 0x0008 Type _MJVTBL_STRING
        };

        uint64                           M_guildGUID;                             ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                           M_virtualRealmAddress;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        std::string                      M_guildName;                             ///< Offset 0x000C Type _MJVTBL_STRING
        std::vector<JamCliGuildInfoRank> M_ranks;                                 ///< Offset 0x0070 Type MakeMJVTblForArrayOfStruct<JamCliGuildInfoRank>::MJVTBL
        int32                            M_emblemStyle;                           ///< Offset 0x0088 Type _MJVTBL_INT32
        int32                            M_emblemColor;                           ///< Offset 0x008C Type _MJVTBL_INT32
        int32                            M_borderStyle;                           ///< Offset 0x0090 Type _MJVTBL_INT32
        int32                            M_borderColor;                           ///< Offset 0x0094 Type _MJVTBL_INT32
        int32                            M_backgroundColor;                       ///< Offset 0x0098 Type _MJVTBL_INT32
    };

    uint64      GuildGuid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool        Allow;              ///< Offset 0x0008 Type _MJVTBL_BOOL
    Info_Struct Info;               ///< Offset 0x0010 Type _MJVTBL_STRUCT
};

///< SMSG_GUILD_INVITE_DECLINED
struct ClientGuildInviteDeclined
{
    std::string Name;                       ///< Offset 0x0000 Type _MJVTBL_STRING
    bool        AutoDecline;                ///< Offset 0x0031 Type _MJVTBL_BOOL
    uint32      VirtualRealmAddress;        ///< Offset 0x0034 Type _MJVTBL_UINT32
};

///< SMSG_GUILD_INVITE_EXPIRED
struct ClientGuildInviteExpired
{
};

///< SMSG_GUILD_EVENT_PLAYER_JOINED
struct ClientGuildEventPlayerJoined
{
    uint64      Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Name;                       ///< Offset 0x0008 Type _MJVTBL_STRING
    uint32      VirtualRealmAddress;        ///< Offset 0x003C Type _MJVTBL_UINT32
};

///< SMSG_GUILD_EVENT_PLAYER_LEFT
struct ClientGuildEventPlayerLeft
{
    std::string LeaverName;                        ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      LeaverVirtualRealmAddress;         ///< Offset 0x0034 Type _MJVTBL_UINT32
    bool        Removed;                           ///< Offset 0x0038 Type _MJVTBL_BOOL
    uint64      LeaverGUID;                        ///< Offset 0x0040 Type _MJVTBL_UINT64
    uint32      RemoverVirtualRealmAddress;        ///< Offset 0x0048 Type _MJVTBL_UINT32
    std::string RemoverName;                       ///< Offset 0x004C Type _MJVTBL_STRING
    uint64      RemoverGUID;                       ///< Offset 0x0080 Type _MJVTBL_UINT64
};

///< SMSG_GUILD_EVENT_NEW_LEADER
struct ClientGuildEventNewLeader
{
    uint32      NewLeaderVirtualRealmAddress;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32      OldLeaderVirtualRealmAddress;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    std::string NewLeaderName;                       ///< Offset 0x0008 Type _MJVTBL_STRING
    uint64      NewLeaderGUID;                       ///< Offset 0x0040 Type _MJVTBL_UINT64
    bool        SelfPromoted;                        ///< Offset 0x0048 Type _MJVTBL_BOOL
    uint64      OldLeaderGUID;                       ///< Offset 0x0050 Type _MJVTBL_UINT64
    std::string OldLeaderName;                       ///< Offset 0x0058 Type _MJVTBL_STRING
};

///< SMSG_GUILD_EVENT_DISBANDED
struct ClientGuildEventDisbanded
{
};

///< SMSG_GUILD_EVENT_MOTD
struct ClientGuildEventMotd
{
    std::string MotdText;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< SMSG_GUILD_EVENT_PRESENCE_CHANGE
struct ClientGuildEventPresenceChange
{
    bool        LoggedOn;                   ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32      VirtualRealmAddress;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    std::string Name;                       ///< Offset 0x0008 Type _MJVTBL_STRING
    uint64      Guid;                       ///< Offset 0x0040 Type _MJVTBL_UINT64
    bool        Mobile;                     ///< Offset 0x0048 Type _MJVTBL_BOOL
};

///< SMSG_GUILD_EVENT_RANKS_UPDATED
struct ClientGuildEventRanksUpdated
{
};

///< SMSG_GUILD_EVENT_RANK_CHANGED
struct ClientGuildEventRankChanged
{
    int32 RankID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_GUILD_EVENT_TAB_ADDED
struct ClientGuildEventTabAdded
{
};

///< SMSG_GUILD_EVENT_TAB_DELETED
struct ClientGuildEventTabDeleted
{
};

///< SMSG_GUILD_EVENT_TAB_MODIFIED
struct ClientGuildEventTabModified
{
    std::string Icon;               ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       Tab;                ///< Offset 0x0104 Type _MJVTBL_INT32
    std::string Name;               ///< Offset 0x0108 Type _MJVTBL_STRING
};

///< SMSG_GUILD_EVENT_TAB_TEXT_CHANGED
struct ClientGuildEventTabTextChanged
{
    int32 Tab;          ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_GUILD_EVENT_BANK_MONEY_CHANGED
struct ClientGuildEventBankMoneyChanged
{
    uint64 Money;         ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_GUILD_EVENT_BANK_CONTENTS_CHANGED
struct ClientGuildEventBankContentsChanged
{
};

///< SMSG_ON_MONSTER_MOVE
struct ClientOnMonsterMove
{
    struct SplineData_Struct
    {
        struct Move_Struct
        {
            struct JamMonsterSplineFilter
            {
                struct JamMonsterSplineFilterKey
                {
                    int16  Idx;           ///< Offset 0x0000 Type _MJVTBL_INT16
                    uint16 Speed;         ///< Offset 0x0002 Type _MJVTBL_UINT16
                };

                std::vector<JamMonsterSplineFilterKey> FilterKeys;                                    ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamMonsterSplineFilterKey>::MJVTBL
                uint16                                 FilterFlags;                                   ///< Offset 0x0018 Type _MJVTBL_UINT16
                float                                  BaseSpeed;                                     ///< Offset 0x001C Type _MJVTBL_FLOAT
                int16                                  StartOffset;                                   ///< Offset 0x0020 Type _MJVTBL_INT16
                float                                  DistToPrevFilterKey;                           ///< Offset 0x0024 Type _MJVTBL_FLOAT
                int16                                  AddedToStart;                                  ///< Offset 0x0028 Type _MJVTBL_INT16
            };

            uint32                           Flags;                                   ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint8                            Face;                                    ///< Offset 0x0004 Type _MJVTBL_UINT8
            uint8                            AnimTier;                                ///< Offset 0x0005 Type _MJVTBL_UINT8
            uint32                           TierTransStartTime;                      ///< Offset 0x0008 Type _MJVTBL_UINT32
            int32                            Elapsed;                                 ///< Offset 0x000C Type _MJVTBL_INT32
            uint32                           MoveTime;                                ///< Offset 0x0010 Type _MJVTBL_UINT32
            float                            JumpGravity;                             ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint32                           SpecialTime;                             ///< Offset 0x0018 Type _MJVTBL_UINT32
            std::vector<G3D::Vector3>        Points;                                  ///< Offset 0x0020 Type MakeMJVTblForArrayOf<C3Vector,&(MJVTBL_V3)>::MJVTBL
            uint8                            Mode;                                    ///< Offset 0x0038 Type _MJVTBL_UINT8
            uint8                            VehicleExitVoluntary;                    ///< Offset 0x0039 Type _MJVTBL_UINT8
            uint64                           TransportGUID;                           ///< Offset 0x0040 Type _MJVTBL_UINT64
            int8                             VehicleSeat;                             ///< Offset 0x0048 Type _MJVTBL_INT8
            std::vector<uint32>              PackedDeltas;                            ///< Offset 0x0050 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<JamMonsterSplineFilter> SplineFilter;                            ///< Offset 0x0068 Type MakeMJVTblForOptionalStruct<JamMonsterSplineFilter>::MJVTBL
            float                            FaceDirection;                           ///< Offset 0x00A0 Type _MJVTBL_FLOAT
            uint64                           FaceGUID;                                ///< Offset 0x00A8 Type _MJVTBL_UINT64
            G3D::Vector3                     FaceSpot;                                ///< Offset 0x00B0 Type _MJVTBL_V3
        };

        uint32       ID;                  ///< Offset 0x0000 Type _MJVTBL_UINT32
        G3D::Vector3 Destination;         ///< Offset 0x0004 Type _MJVTBL_V3
        bool         CrzTeleport;         ///< Offset 0x0010 Type _MJVTBL_BOOL
        Move_Struct  Move;                ///< Offset 0x0018 Type _MJVTBL_STRUCT
    };

    SplineData_Struct SplineData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64            MoverGUID;                ///< Offset 0x00D8 Type _MJVTBL_UINT64
    G3D::Vector3      Position;                 ///< Offset 0x00E0 Type _MJVTBL_V3
};

///< SMSG_MOVE_SET_ACTIVE_MOVER
struct ClientMoveSetActiveMover
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_UPDATE_RUN_SPEED
struct ClientMoveUpdateRunSpeed
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    float         Speed;                ///< Offset 0x00A8 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_UPDATE_RUN_BACK_SPEED
struct ClientMoveUpdateRunBackSpeed
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    float         Speed;                ///< Offset 0x0000 Type _MJVTBL_FLOAT
    Status_Struct Status;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_UPDATE_WALK_SPEED
struct ClientMoveUpdateWalkSpeed
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    float         Speed;                ///< Offset 0x00A8 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_UPDATE_SWIM_SPEED
struct ClientMoveUpdateSwimSpeed
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    float         Speed;                ///< Offset 0x00A8 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_UPDATE_SWIM_BACK_SPEED
struct ClientMoveUpdateSwimBackSpeed
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    float         Speed;                ///< Offset 0x00A8 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_UPDATE_FLIGHT_SPEED
struct ClientMoveUpdateFlightSpeed
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    float         Speed;                ///< Offset 0x00A8 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_UPDATE_FLIGHT_BACK_SPEED
struct ClientMoveUpdateFlightBackSpeed
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    float         Speed;                ///< Offset 0x0000 Type _MJVTBL_FLOAT
    Status_Struct Status;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_UPDATE_TURN_RATE
struct ClientMoveUpdateTurnRate
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    float         Speed;                ///< Offset 0x0000 Type _MJVTBL_FLOAT
    Status_Struct Status;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_UPDATE_PITCH_RATE
struct ClientMoveUpdatePitchRate
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    float         Speed;                ///< Offset 0x0000 Type _MJVTBL_FLOAT
    Status_Struct Status;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_UPDATE_COLLISION_HEIGHT
struct ClientMoveUpdateCollisionHeight
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    float         Scale;                ///< Offset 0x0000 Type _MJVTBL_FLOAT
    Status_Struct Status;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    float         Height;               ///< Offset 0x00B0 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_UPDATE
struct ClientMoveUpdate
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_UPDATE_TELEPORT
struct ClientMoveUpdateTeleport
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    struct JamCliMovementForce
    {
        uint32       ID;                  ///< Offset 0x0000 Type _MJVTBL_UINT32
        G3D::Vector3 Direction;           ///< Offset 0x0004 Type _MJVTBL_V3
        uint32       TransportID;         ///< Offset 0x0010 Type _MJVTBL_UINT32
        float        Magnitude;           ///< Offset 0x0014 Type _MJVTBL_FLOAT
        uint8        Type;                ///< Offset 0x0018 Type _MJVTBL_UINT8
    };

    Status_Struct                    Status;                                  ///< Offset 0x0000 Type _MJVTBL_STRUCT
    std::vector<JamCliMovementForce> MovementForces;                          ///< Offset 0x00A8 Type MakeMJVTblForArrayOfStruct<JamCliMovementForce>::MJVTBL
    Optional<float>                  SwimBackSpeed;                           ///< Offset 0x00C0 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    Optional<float>                  FlightSpeed;                             ///< Offset 0x00C8 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    Optional<float>                  SwimSpeed;                               ///< Offset 0x00D0 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    Optional<float>                  WalkSpeed;                               ///< Offset 0x00D8 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    Optional<float>                  TurnRate;                                ///< Offset 0x00E0 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    Optional<float>                  RunSpeed;                                ///< Offset 0x00E8 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    Optional<float>                  FlightBackSpeed;                         ///< Offset 0x00F0 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    Optional<float>                  RunBackSpeed;                            ///< Offset 0x00F8 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    Optional<float>                  PitchRate;                               ///< Offset 0x0100 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
};

///< SMSG_MOVE_UPDATE_KNOCK_BACK
struct ClientMoveUpdateKnockBack
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_UPDATE_APPLY_MOVEMENT_FORCE
struct ClientMoveUpdateApplyMovementForce
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    struct Force_Struct
    {
        uint32       ID;                  ///< Offset 0x0000 Type _MJVTBL_UINT32
        G3D::Vector3 Direction;           ///< Offset 0x0004 Type _MJVTBL_V3
        uint32       TransportID;         ///< Offset 0x0010 Type _MJVTBL_UINT32
        float        Magnitude;           ///< Offset 0x0014 Type _MJVTBL_FLOAT
        uint8        Type;                ///< Offset 0x0018 Type _MJVTBL_UINT8
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    Force_Struct  Force;                ///< Offset 0x00A8 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_UPDATE_REMOVE_MOVEMENT_FORCE
struct ClientMoveUpdateRemoveMovementForce
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    uint32        MovementForceID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    Status_Struct Status;                 ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SPLINE_SET_RUN_SPEED
struct ClientMoveSplineSetRunSpeed
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SPLINE_SET_RUN_BACK_SPEED
struct ClientMoveSplineSetRunBackSpeed
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SPLINE_SET_SWIM_SPEED
struct ClientMoveSplineSetSwimSpeed
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SPLINE_SET_SWIM_BACK_SPEED
struct ClientMoveSplineSetSwimBackSpeed
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SPLINE_SET_FLIGHT_SPEED
struct ClientMoveSplineSetFlightSpeed
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SPLINE_SET_FLIGHT_BACK_SPEED
struct ClientMoveSplineSetFlightBackSpeed
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SPLINE_SET_WALK_BACK_SPEED
struct ClientMoveSplineSetWalkBackSpeed
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SPLINE_SET_TURN_RATE
struct ClientMoveSplineSetTurnRate
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SPLINE_SET_PITCH_RATE
struct ClientMoveSplineSetPitchRate
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;            ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_RUN_SPEED
struct ClientMoveSetRunSpeed
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;                ///< Offset 0x0008 Type _MJVTBL_FLOAT
    uint32 SequenceIndex;        ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_RUN_BACK_SPEED
struct ClientMoveSetRunBackSpeed
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    float  Speed;                ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_SWIM_SPEED
struct ClientMoveSetSwimSpeed
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    float  Speed;                ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_SWIM_BACK_SPEED
struct ClientMoveSetSwimBackSpeed
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    float  Speed;                ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_FLIGHT_SPEED
struct ClientMoveSetFlightSpeed
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  Speed;                ///< Offset 0x0008 Type _MJVTBL_FLOAT
    uint32 SequenceIndex;        ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_FLIGHT_BACK_SPEED
struct ClientMoveSetFlightBackSpeed
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    float  Speed;                ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_WALK_SPEED
struct ClientMoveSetWalkSpeed
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    float  Speed;                ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_TURN_RATE
struct ClientMoveSetTurnRate
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    float  Speed;                ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_PITCH_RATE
struct ClientMoveSetPitchRate
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    float  Speed;                ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_ROOT
struct ClientMoveRoot
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_UNROOT
struct ClientMoveUnroot
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_WATER_WALK
struct ClientMoveSetWaterWalk
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_LAND_WALK
struct ClientMoveSetLandWalk
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_FEATHER_FALL
struct ClientMoveSetFeatherFall
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_NORMAL_FALL
struct ClientMoveSetNormalFall
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_HOVERING
struct ClientMoveSetHovering
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_UNSET_HOVERING
struct ClientMoveUnsetHovering
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_KNOCK_BACK
struct ClientMoveKnockBack
{
    uint64       MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    G3D::Vector2 Direction;            ///< Offset 0x0008 Type _MJVTBL_V2
    float        HorzSpeed;            ///< Offset 0x0010 Type _MJVTBL_FLOAT
    uint32       SequenceIndex;        ///< Offset 0x0014 Type _MJVTBL_UINT32
    float        VertSpeed;            ///< Offset 0x0018 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_TELEPORT
struct ClientMoveTeleport
{
    struct JamVehicleTeleport
    {
        uint8 VehicleSeatIndex;            ///< Offset 0x0000 Type _MJVTBL_UINT8
        bool  VehicleExitVoluntary;        ///< Offset 0x0001 Type _MJVTBL_BOOL
        bool  VehicleExitTeleport;         ///< Offset 0x0002 Type _MJVTBL_BOOL
    };

    G3D::Vector3                 Position;                            ///< Offset 0x0000 Type _MJVTBL_V3
    Optional<JamVehicleTeleport> Vehicle;                             ///< Offset 0x000C Type MakeMJVTblForOptionalStruct<JamVehicleTeleport>::MJVTBL
    uint32                       SequenceIndex;                       ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint64                       MoverGUID;                           ///< Offset 0x0018 Type _MJVTBL_UINT64
    Optional<uint64>             TransportGUID;                       ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    float                        Facing;                              ///< Offset 0x0030 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_CAN_FLY
struct ClientMoveSetCanFly
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_UNSET_CAN_FLY
struct ClientMoveUnsetCanFly
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_CAN_TURN_WHILE_FALLING
struct ClientMoveSetCanTurnWhileFalling
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_UNSET_CAN_TURN_WHILE_FALLING
struct ClientMoveUnsetCanTurnWhileFalling
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_IGNORE_MOVEMENT_FORCES
struct ClientMoveSetIgnoreMovementForces
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_UNSET_IGNORE_MOVEMENT_FORCES
struct ClientMoveUnsetIgnoreMovementForces
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_ENABLE_TRANSITION_BETWEEN_SWIM_AND_FLY
struct ClientMoveEnableTransitionBetweenSwimAndFly
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_DISABLE_TRANSITION_BETWEEN_SWIM_AND_FLY
struct ClientMoveDisableTransitionBetweenSwimAndFly
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_DISABLE_GRAVITY
struct ClientMoveDisableGravity
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_ENABLE_GRAVITY
struct ClientMoveEnableGravity
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_DISABLE_COLLISION
struct ClientMoveDisableCollision
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_ENABLE_COLLISION
struct ClientMoveEnableCollision
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_COLLISION_HEIGHT
struct ClientMoveSetCollisionHeight
{
    float                          Scale;                                 ///< Offset 0x0000 Type _MJVTBL_FLOAT
    uint64                         MoverGUID;                             ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32                         MountDisplayID;                        ///< Offset 0x0010 Type _MJVTBL_UINT32
    UPDATE_COLLISION_HEIGHT_REASON Reason;                                ///< Offset 0x0014 Type _MJVTBL_UPDATE_COLLISION_HEIGHT_REASON
    uint32                         SequenceIndex;                         ///< Offset 0x0018 Type _MJVTBL_UINT32
    float                          Height;                                ///< Offset 0x001C Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_VEHICLE_REC_ID
struct ClientMoveSetVehicleRecID
{
    uint64 MoverGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    int32  VehicleRecID;         ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_MOVE_APPLY_MOVEMENT_FORCE
struct ClientMoveApplyMovementForce
{
    struct Force_Struct
    {
        uint32       ID;                  ///< Offset 0x0000 Type _MJVTBL_UINT32
        G3D::Vector3 Direction;           ///< Offset 0x0004 Type _MJVTBL_V3
        uint32       TransportID;         ///< Offset 0x0010 Type _MJVTBL_UINT32
        float        Magnitude;           ///< Offset 0x0014 Type _MJVTBL_FLOAT
        uint8        Type;                ///< Offset 0x0018 Type _MJVTBL_UINT8
    };

    Force_Struct Force;                ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64       MoverGUID;            ///< Offset 0x0020 Type _MJVTBL_UINT64
    uint32       SequenceIndex;        ///< Offset 0x0028 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_REMOVE_MOVEMENT_FORCE
struct ClientMoveRemoveMovementForce
{
    uint64 MoverGUID;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SequenceIndex;          ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 MovementForceID;        ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SET_COMPOUND_STATE
struct ClientMoveSetCompoundState
{
    struct JamMoveStateChange
    {
        struct JamKnockBackInfo
        {
            float        HorzSpeed;            ///< Offset 0x0000 Type _MJVTBL_FLOAT
            G3D::Vector2 Direction;            ///< Offset 0x0004 Type _MJVTBL_V2
            float        InitVertSpeed;        ///< Offset 0x000C Type _MJVTBL_FLOAT
        };

        struct JamCollisionHeightInfo
        {
            float                          Height;                                ///< Offset 0x0000 Type _MJVTBL_FLOAT
            float                          Scale;                                 ///< Offset 0x0004 Type _MJVTBL_FLOAT
            UPDATE_COLLISION_HEIGHT_REASON Reason;                                ///< Offset 0x0008 Type _MJVTBL_UPDATE_COLLISION_HEIGHT_REASON
        };

        struct JamCliMovementForce
        {
            uint32       ID;                  ///< Offset 0x0000 Type _MJVTBL_UINT32
            G3D::Vector3 Direction;           ///< Offset 0x0004 Type _MJVTBL_V3
            uint32       TransportID;         ///< Offset 0x0010 Type _MJVTBL_UINT32
            float        Magnitude;           ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8        Type;                ///< Offset 0x0018 Type _MJVTBL_UINT8
        };

        uint16                           MessageID;                               ///< Offset 0x0000 Type _MJVTBL_UINT16
        uint32                           SequenceIndex;                           ///< Offset 0x0004 Type _MJVTBL_UINT32
        Optional<float>                  Speed;                                   ///< Offset 0x0008 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
        Optional<JamKnockBackInfo>       KnockBack;                               ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamKnockBackInfo>::MJVTBL
        Optional<int32>                  VehicleRecID;                            ///< Offset 0x0024 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        Optional<JamCollisionHeightInfo> CollisionHeight;                         ///< Offset 0x002C Type MakeMJVTblForOptionalStruct<JamCollisionHeightInfo>::MJVTBL
        Optional<JamCliMovementForce>    MovementForce;                           ///< Offset 0x003C Type MakeMJVTblForOptionalStruct<JamCliMovementForce>::MJVTBL
    };

    uint64                          MoverGUID;                              ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<JamMoveStateChange> StateChanges;                           ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamMoveStateChange>::MJVTBL
};

///< SMSG_MOVE_SKIP_TIME
struct ClientMoveSkipTime
{
    uint64 MoverGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 TimeSkipped;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_SPLINE_ROOT
struct ClientMoveSplineRoot
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_UNROOT
struct ClientMoveSplineUnroot
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_DISABLE_GRAVITY
struct ClientMoveSplineDisableGravity
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_ENABLE_GRAVITY
struct ClientMoveSplineEnableGravity
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_DISABLE_COLLISION
struct ClientMoveSplineDisableCollision
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_ENABLE_COLLISION
struct ClientMoveSplineEnableCollision
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_SET_FEATHER_FALL
struct ClientMoveSplineSetFeatherFall
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_SET_NORMAL_FALL
struct ClientMoveSplineSetNormalFall
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_SET_HOVER
struct ClientMoveSplineSetHover
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_UNSET_HOVER
struct ClientMoveSplineUnsetHover
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_SET_WATER_WALK
struct ClientMoveSplineSetWaterWalk
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_SET_LAND_WALK
struct ClientMoveSplineSetLandWalk
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_START_SWIM
struct ClientMoveSplineStartSwim
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_STOP_SWIM
struct ClientMoveSplineStopSwim
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_SET_RUN_MODE
struct ClientMoveSplineSetRunMode
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_SET_WALK_MODE
struct ClientMoveSplineSetWalkMode
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_SET_FLYING
struct ClientMoveSplineSetFlying
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_MOVE_SPLINE_UNSET_FLYING
struct ClientMoveSplineUnsetFlying
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_FLIGHT_SPLINE_SYNC
struct ClientFlightSplineSync
{
    uint64 Guid;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    float  SplineDist;        ///< Offset 0x0008 Type _MJVTBL_FLOAT
};

///< SMSG_DAILY_QUESTS_RESET
struct ClientDailyQuestsReset
{
    int32 Count;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_SET_QUEST_COMPLETED_BIT
struct ClientSetQuestCompletedBit
{
    int32 Bit;            ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 QuestID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_CLEAR_QUEST_COMPLETED_BIT
struct ClientClearQuestCompletedBit
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Bit;            ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_CLEAR_QUEST_COMPLETED_BITS
struct ClientClearQuestCompletedBits
{
    std::vector<int32> Qbits;                     ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_QUEST_COMPLETION_NPCRESPONSE
struct ClientQuestCompletionNPCResponse
{
    struct JamQuestCompletionNPC
    {
        int32              QuestID;                   ///< Offset 0x0000 Type _MJVTBL_INT32
        std::vector<int32> Npc;                       ///< Offset 0x0008 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    };

    std::vector<JamQuestCompletionNPC> QuestCompletionNPCs;                       ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamQuestCompletionNPC>::MJVTBL
};

///< SMSG_QUEST_GIVER_QUEST_COMPLETE
struct ClientQuestGiverQuestComplete
{
    bool  UseQuestReward;           ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 SkillLineIDReward;        ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 MoneyReward;              ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 NumSkillUpsReward;        ///< Offset 0x000C Type _MJVTBL_INT32
    int32 XpReward;                 ///< Offset 0x0010 Type _MJVTBL_INT32
    int32 QuestId;                  ///< Offset 0x0014 Type _MJVTBL_INT32
    int32 TalentReward;             ///< Offset 0x0018 Type _MJVTBL_INT32
    bool  LaunchGossip;             ///< Offset 0x001C Type _MJVTBL_BOOL
};

///< SMSG_IS_QUEST_COMPLETE_RESPONSE
struct ClientIsQuestCompleteResponse
{
    int32 QuestID;         ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Complete;        ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< SMSG_QUEST_GIVER_INVALID_QUEST
struct ClientQuestGiverInvalidQuest
{
    int32       Reason;             ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string ReasonText;         ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< SMSG_QUEST_GIVER_QUEST_FAILED
struct ClientQuestGiverQuestFailed
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Reason;         ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< SMSG_QUEST_LOG_FULL
struct ClientQuestLogFull
{
};

///< SMSG_QUEST_UPDATE_COMPLETE
struct ClientQuestUpdateComplete
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_QUEST_UPDATE_FAILED
struct ClientQuestUpdateFailed
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_QUEST_UPDATE_FAILED_TIMER
struct ClientQuestUpdateFailedTimer
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_QUEST_UPDATE_ADD_CREDIT
struct ClientQuestUpdateAddCredit
{
    uint64 VictimGUID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  ObjectID;             ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  QuestID;              ///< Offset 0x000C Type _MJVTBL_INT32
    uint16 Count;                ///< Offset 0x0010 Type _MJVTBL_UINT16
    uint16 Required;             ///< Offset 0x0012 Type _MJVTBL_UINT16
    uint8  ObjectiveType;        ///< Offset 0x0014 Type _MJVTBL_UINT8
};

///< SMSG_QUEST_UPDATE_ADD_CREDIT_SIMPLE
struct ClientQuestUpdateAddCreditSimple
{
    int32 QuestID;              ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 ObjectID;             ///< Offset 0x0004 Type _MJVTBL_INT32
    uint8 ObjectiveType;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< SMSG_QUEST_UPDATE_ADD_PV_PCREDIT
struct ClientQuestUpdateAddPvPCredit
{
    int32  QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    uint16 Count;          ///< Offset 0x0004 Type _MJVTBL_UINT16
};

///< SMSG_QUEST_CONFIRM_ACCEPT
struct ClientQuestConfirmAccept
{
    std::string QuestTitle;         ///< Offset 0x0000 Type _MJVTBL_STRING
    uint64      InitiatedBy;        ///< Offset 0x0400 Type _MJVTBL_UINT64
    int32       QuestID;            ///< Offset 0x0408 Type _MJVTBL_INT32
};

///< SMSG_QUEST_PUSH_RESULT
struct ClientQuestPushResult
{
    uint64 SenderGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  Result;            ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< SMSG_QUEST_GIVER_STATUS_MULTIPLE
struct ClientQuestGiverStatusMultiple
{
    struct QuestGiverStatus
    {
        uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Status;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    };

    std::vector<QuestGiverStatus> QuestGiver;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<QuestGiverStatus>::MJVTBL
};

///< SMSG_QUEST_GIVER_QUEST_DETAILS
struct ClientQuestGiverQuestDetails
{
    struct JamCliQuestInfoObjectiveSimple
    {
        int32 Id;              ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 ObjectID;        ///< Offset 0x0004 Type _MJVTBL_INT32
        int32 Amount;          ///< Offset 0x0008 Type _MJVTBL_INT32
        uint8 Type;            ///< Offset 0x000C Type _MJVTBL_UINT8
    };

    struct QuestRewards_Struct
    {
        struct QuestChoiceItem
        {
            int32 ItemID;          ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Quantity;        ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32           ChoiceItemCount;                 ///< Offset 0x0000 Type _MJVTBL_INT32
        int32           ItemCount;                       ///< Offset 0x0004 Type _MJVTBL_INT32
        int32           Money;                           ///< Offset 0x0008 Type _MJVTBL_INT32
        int32           Xp;                              ///< Offset 0x000C Type _MJVTBL_INT32
        int32           Title;                           ///< Offset 0x0010 Type _MJVTBL_INT32
        int32           Talents;                         ///< Offset 0x0014 Type _MJVTBL_INT32
        int32           FactionFlags;                    ///< Offset 0x0018 Type _MJVTBL_INT32
        int32           SpellCompletionDisplayID;        ///< Offset 0x001C Type _MJVTBL_INT32
        int32           SpellCompletionID;               ///< Offset 0x0020 Type _MJVTBL_INT32
        int32           SkillLineID;                     ///< Offset 0x0024 Type _MJVTBL_INT32
        int32           NumSkillUps;                     ///< Offset 0x0028 Type _MJVTBL_INT32
        QuestChoiceItem ChoiceItems[6];                  ///< Offset 0x002C Type MakeMJVTblForFixedArrayOfStruct<QuestChoiceItem,6>::MJVTBL
        int32           ItemID[4];                       ///< Offset 0x005C Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        int32           ItemQty[4];                      ///< Offset 0x006C Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        int32           FactionID[5];                    ///< Offset 0x007C Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
        int32           FactionValue[5];                 ///< Offset 0x0090 Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
        int32           FactionOverride[5];              ///< Offset 0x00A4 Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
        int32           CurrencyID[4];                   ///< Offset 0x00B8 Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        int32           CurrencyQty[4];                  ///< Offset 0x00C8 Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
    };

    struct QuestDescEmote
    {
        int32  Type;          ///< Offset 0x0000 Type _MJVTBL_INT32
        uint32 Delay;         ///< Offset 0x0004 Type _MJVTBL_UINT32
    };

    std::string                                 PortraitTurnInName;                                 ///< Offset 0x0000 Type _MJVTBL_STRING
    bool                                        DisplayPopup;                                       ///< Offset 0x0100 Type _MJVTBL_BOOL
    std::string                                 PortraitGiverName;                                  ///< Offset 0x0101 Type _MJVTBL_STRING
    std::vector<JamCliQuestInfoObjectiveSimple> Objectives;                                         ///< Offset 0x0208 Type MakeMJVTblForArrayOfStruct<JamCliQuestInfoObjectiveSimple>::MJVTBL
    std::string                                 PortraitGiverText;                                  ///< Offset 0x0220 Type _MJVTBL_STRING
    bool                                        StartCheat;                                         ///< Offset 0x0620 Type _MJVTBL_BOOL
    QuestRewards_Struct                         QuestRewards;                                       ///< Offset 0x0624 Type _MJVTBL_STRUCT
    uint64                                      QuestGiverGUID;                                     ///< Offset 0x0700 Type _MJVTBL_UINT64
    int32                                       QuestID;                                            ///< Offset 0x0708 Type _MJVTBL_INT32
    std::string                                 QuestTitle;                                         ///< Offset 0x070C Type _MJVTBL_STRING
    bool                                        AutoLaunched;                                       ///< Offset 0x090C Type _MJVTBL_BOOL
    std::vector<QuestDescEmote>                 DescEmotes;                                         ///< Offset 0x0910 Type MakeMJVTblForArrayOfStruct<QuestDescEmote>::MJVTBL
    int32                                       QuestPackageID;                                     ///< Offset 0x0928 Type _MJVTBL_INT32
    int32                                       PortraitGiver;                                      ///< Offset 0x092C Type _MJVTBL_INT32
    std::string                                 DescriptionText;                                    ///< Offset 0x0930 Type _MJVTBL_STRING
    uint64                                      InformUnit;                                         ///< Offset 0x14E8 Type _MJVTBL_UINT64
    int32                                       SuggestedPartyMembers;                              ///< Offset 0x14F0 Type _MJVTBL_INT32
    int32                                       PortraitTurnIn;                                     ///< Offset 0x14F4 Type _MJVTBL_INT32
    std::vector<int32>                          LearnSpells;                                        ///< Offset 0x14F8 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    std::string                                 PortraitTurnInText;                                 ///< Offset 0x1510 Type _MJVTBL_STRING
    std::string                                 LogDescription;                                     ///< Offset 0x1910 Type _MJVTBL_STRING
    int32                                       QuestFlags[2];                                      ///< Offset 0x24C8 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
};

///< SMSG_QUEST_GIVER_REQUEST_ITEMS
struct ClientQuestGiverRequestItems
{
    struct QuestData_Struct
    {
        struct QuestObjectiveCollect
        {
            int32 ObjectID;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;          ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        struct QuestCurrency
        {
            int32 CurrencyID;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;            ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        uint64                             QuestGiverGUID;                            ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32                              QuestGiverCreatureID;                      ///< Offset 0x0008 Type _MJVTBL_INT32
        int32                              QuestID;                                   ///< Offset 0x000C Type _MJVTBL_INT32
        int32                              CompEmoteDelay;                            ///< Offset 0x0010 Type _MJVTBL_INT32
        int32                              CompEmoteType;                             ///< Offset 0x0014 Type _MJVTBL_INT32
        bool                               AutoLaunched;                              ///< Offset 0x0018 Type _MJVTBL_BOOL
        int32                              SuggestPartyMembers;                       ///< Offset 0x001C Type _MJVTBL_INT32
        int32                              MoneyToGet;                                ///< Offset 0x0020 Type _MJVTBL_INT32
        std::vector<QuestObjectiveCollect> QuestObjectiveCollect;                     ///< Offset 0x0028 Type MakeMJVTblForArrayOfStruct<QuestObjectiveCollect>::MJVTBL
        std::vector<QuestCurrency>         QuestCurrency;                             ///< Offset 0x0040 Type MakeMJVTblForArrayOfStruct<QuestCurrency>::MJVTBL
        int32                              StatusFlags;                               ///< Offset 0x0058 Type _MJVTBL_INT32
        int32                              QuestFlags[2];                             ///< Offset 0x005C Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
    };

    std::string      QuestTitle;              ///< Offset 0x0000 Type _MJVTBL_STRING
    QuestData_Struct QuestData;               ///< Offset 0x0200 Type _MJVTBL_STRUCT
    std::string      CompletionText;          ///< Offset 0x0268 Type _MJVTBL_STRING
};

///< SMSG_QUEST_GIVER_OFFER_REWARD_MESSAGE
struct ClientQuestGiverOfferRewardMessage
{
    struct QuestData_Struct
    {
        struct QuestRewards_Struct
        {
            struct QuestChoiceItem
            {
                int32 ItemID;          ///< Offset 0x0000 Type _MJVTBL_INT32
                int32 Quantity;        ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            int32           ChoiceItemCount;                 ///< Offset 0x0000 Type _MJVTBL_INT32
            int32           ItemCount;                       ///< Offset 0x0004 Type _MJVTBL_INT32
            int32           Money;                           ///< Offset 0x0008 Type _MJVTBL_INT32
            int32           Xp;                              ///< Offset 0x000C Type _MJVTBL_INT32
            int32           Title;                           ///< Offset 0x0010 Type _MJVTBL_INT32
            int32           Talents;                         ///< Offset 0x0014 Type _MJVTBL_INT32
            int32           FactionFlags;                    ///< Offset 0x0018 Type _MJVTBL_INT32
            int32           SpellCompletionDisplayID;        ///< Offset 0x001C Type _MJVTBL_INT32
            int32           SpellCompletionID;               ///< Offset 0x0020 Type _MJVTBL_INT32
            int32           SkillLineID;                     ///< Offset 0x0024 Type _MJVTBL_INT32
            int32           NumSkillUps;                     ///< Offset 0x0028 Type _MJVTBL_INT32
            QuestChoiceItem ChoiceItems[6];                  ///< Offset 0x002C Type MakeMJVTblForFixedArrayOfStruct<QuestChoiceItem,6>::MJVTBL
            int32           ItemID[4];                       ///< Offset 0x005C Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
            int32           ItemQty[4];                      ///< Offset 0x006C Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
            int32           FactionID[5];                    ///< Offset 0x007C Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
            int32           FactionValue[5];                 ///< Offset 0x0090 Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
            int32           FactionOverride[5];              ///< Offset 0x00A4 Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
            int32           CurrencyID[4];                   ///< Offset 0x00B8 Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
            int32           CurrencyQty[4];                  ///< Offset 0x00C8 Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        };

        struct QuestDescEmote
        {
            int32  Type;          ///< Offset 0x0000 Type _MJVTBL_INT32
            uint32 Delay;         ///< Offset 0x0004 Type _MJVTBL_UINT32
        };

        uint64                      QuestGiverGUID;                     ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32                       QuestGiverCreatureID;               ///< Offset 0x0008 Type _MJVTBL_INT32
        int32                       QuestID;                            ///< Offset 0x000C Type _MJVTBL_INT32
        bool                        AutoLaunched;                       ///< Offset 0x0010 Type _MJVTBL_BOOL
        int32                       SuggestedPartyMembers;              ///< Offset 0x0014 Type _MJVTBL_INT32
        QuestRewards_Struct         QuestRewards;                       ///< Offset 0x0018 Type _MJVTBL_STRUCT
        std::vector<QuestDescEmote> Emotes;                             ///< Offset 0x00F0 Type MakeMJVTblForArrayOfStruct<QuestDescEmote>::MJVTBL
        int32                       QuestFlags[2];                      ///< Offset 0x0108 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
    };

    int32            PortraitTurnIn;            ///< Offset 0x0000 Type _MJVTBL_INT32
    int32            PortraitGiver;             ///< Offset 0x0004 Type _MJVTBL_INT32
    std::string      PortraitGiverText;         ///< Offset 0x0008 Type _MJVTBL_STRING
    std::string      QuestTitle;                ///< Offset 0x0408 Type _MJVTBL_STRING
    std::string      PortraitTurnInText;        ///< Offset 0x0608 Type _MJVTBL_STRING
    std::string      PortraitGiverName;         ///< Offset 0x0A08 Type _MJVTBL_STRING
    std::string      RewardText;                ///< Offset 0x0B08 Type _MJVTBL_STRING
    std::string      PortraitTurnInName;        ///< Offset 0x16C0 Type _MJVTBL_STRING
    QuestData_Struct QuestData;                 ///< Offset 0x17C0 Type _MJVTBL_STRUCT
    int32            QuestPackageID;            ///< Offset 0x18D0 Type _MJVTBL_INT32
};

///< SMSG_QUERY_QUEST_INFO_RESPONSE
struct ClientQueryQuestInfoResponse
{
    struct Info_Struct
    {
        struct JamCliQuestInfoObjective
        {
            int32              Id;                        ///< Offset 0x0000 Type _MJVTBL_INT32
            uint8              Type;                      ///< Offset 0x0004 Type _MJVTBL_UINT8
            int8               StorageIndex;              ///< Offset 0x0005 Type _MJVTBL_INT8
            int32              ObjectID;                  ///< Offset 0x0008 Type _MJVTBL_INT32
            int32              Amount;                    ///< Offset 0x000C Type _MJVTBL_INT32
            int32              Flags;                     ///< Offset 0x0010 Type _MJVTBL_INT32
            std::string        Description;               ///< Offset 0x0014 Type _MJVTBL_STRING
            std::vector<int32> VisualEffects;             ///< Offset 0x0118 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliQuestInfoChoiceItem
        {
            int32 ItemID;           ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Quantity;         ///< Offset 0x0004 Type _MJVTBL_INT32
            int32 DisplayID;        ///< Offset 0x0008 Type _MJVTBL_INT32
        };

        int32                                 M_questId;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                                 M_questType;                                  ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                                 M_questLevel;                                 ///< Offset 0x0008 Type _MJVTBL_INT32
        int32                                 M_questPackageID;                             ///< Offset 0x000C Type _MJVTBL_INT32
        int32                                 M_questMinLevel;                              ///< Offset 0x0010 Type _MJVTBL_INT32
        int32                                 M_questSortID;                                ///< Offset 0x0014 Type _MJVTBL_INT32
        int32                                 M_questInfoID;                                ///< Offset 0x0018 Type _MJVTBL_INT32
        int32                                 M_suggestedGroupNum;                          ///< Offset 0x001C Type _MJVTBL_INT32
        int32                                 M_rewardNextQuest;                            ///< Offset 0x0020 Type _MJVTBL_INT32
        int32                                 M_rewardXPDifficulty;                         ///< Offset 0x0024 Type _MJVTBL_INT32
        int32                                 M_rewardMoney;                                ///< Offset 0x0028 Type _MJVTBL_INT32
        int32                                 M_rewardMoneyDifficulty;                      ///< Offset 0x002C Type _MJVTBL_INT32
        int32                                 M_rewardBonusMoney;                           ///< Offset 0x0030 Type _MJVTBL_INT32
        int32                                 M_rewardDisplaySpell;                         ///< Offset 0x0034 Type _MJVTBL_INT32
        int32                                 M_rewardSpell;                                ///< Offset 0x0038 Type _MJVTBL_INT32
        int32                                 M_rewardHonor;                                ///< Offset 0x003C Type _MJVTBL_INT32
        float                                 M_rewardKillHonor;                            ///< Offset 0x0040 Type _MJVTBL_FLOAT
        int32                                 M_startItem;                                  ///< Offset 0x0044 Type _MJVTBL_INT32
        int32                                 M_flags;                                      ///< Offset 0x0048 Type _MJVTBL_INT32
        int32                                 M_flagsEx;                                    ///< Offset 0x004C Type _MJVTBL_INT32
        int32                                 M_POIContinent;                               ///< Offset 0x0050 Type _MJVTBL_INT32
        float                                 M_POIx;                                       ///< Offset 0x0054 Type _MJVTBL_FLOAT
        float                                 M_POIy;                                       ///< Offset 0x0058 Type _MJVTBL_FLOAT
        int32                                 M_POIPriority;                                ///< Offset 0x005C Type _MJVTBL_INT32
        std::string                           M_logTitle;                                   ///< Offset 0x0060 Type _MJVTBL_STRING
        std::string                           M_logDescription;                             ///< Offset 0x0260 Type _MJVTBL_STRING
        std::string                           M_questDescription;                           ///< Offset 0x0E18 Type _MJVTBL_STRING
        std::string                           M_areaDescription;                            ///< Offset 0x19D0 Type _MJVTBL_STRING
        int32                                 M_rewardTitle;                                ///< Offset 0x1BD0 Type _MJVTBL_INT32
        int32                                 M_rewardTalents;                              ///< Offset 0x1BD4 Type _MJVTBL_INT32
        int32                                 M_rewardArenaPoints;                          ///< Offset 0x1BD8 Type _MJVTBL_INT32
        int32                                 M_rewardSkillLineID;                          ///< Offset 0x1BDC Type _MJVTBL_INT32
        int32                                 M_rewardNumSkillUps;                          ///< Offset 0x1BE0 Type _MJVTBL_INT32
        int32                                 M_portraitGiver;                              ///< Offset 0x1BE4 Type _MJVTBL_INT32
        int32                                 M_portraitTurnIn;                             ///< Offset 0x1BE8 Type _MJVTBL_INT32
        std::string                           M_portraitGiverText;                          ///< Offset 0x1BEC Type _MJVTBL_STRING
        std::string                           M_portraitGiverName;                          ///< Offset 0x1FEC Type _MJVTBL_STRING
        std::string                           M_portraitTurnInText;                         ///< Offset 0x20EC Type _MJVTBL_STRING
        std::string                           M_portraitTurnInName;                         ///< Offset 0x24EC Type _MJVTBL_STRING
        std::string                           M_questCompletionLog;                         ///< Offset 0x25EC Type _MJVTBL_STRING
        int32                                 M_rewardFactionFlags;                         ///< Offset 0x2DEC Type _MJVTBL_INT32
        int32                                 M_acceptedSoundKitID;                         ///< Offset 0x2DF0 Type _MJVTBL_INT32
        int32                                 M_completeSoundKitID;                         ///< Offset 0x2DF4 Type _MJVTBL_INT32
        int32                                 M_areaGroupID;                                ///< Offset 0x2DF8 Type _MJVTBL_INT32
        int32                                 M_timeAllowed;                                ///< Offset 0x2DFC Type _MJVTBL_INT32
        std::vector<JamCliQuestInfoObjective> M_objectives;                                 ///< Offset 0x2E00 Type MakeMJVTblForArrayOfStruct<JamCliQuestInfoObjective>::MJVTBL
        int32                                 M_rewardItems[4];                             ///< Offset 0x2E18 Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        int32                                 M_rewardAmount[4];                            ///< Offset 0x2E28 Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        int32                                 M_itemDrop[4];                                ///< Offset 0x2E38 Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        int32                                 M_itemDropQuantity[4];                        ///< Offset 0x2E48 Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        JamCliQuestInfoChoiceItem             M_unfilteredChoiceItems[6];                   ///< Offset 0x2E58 Type MakeMJVTblForFixedArrayOfStruct<JamCliQuestInfoChoiceItem,6>::MJVTBL
        int32                                 M_rewardFactionID[5];                         ///< Offset 0x2EA0 Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
        int32                                 M_rewardFactionValue[5];                      ///< Offset 0x2EB4 Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
        int32                                 M_rewardFactionOverride[5];                   ///< Offset 0x2EC8 Type MakeMJVTblForFixedArrayOf<int,5,&(MJVTBL_INT32)>::MJVTBL
        int32                                 M_rewardCurrencyID[4];                        ///< Offset 0x2EDC Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
        int32                                 M_rewardCurrencyQty[4];                       ///< Offset 0x2EEC Type MakeMJVTblForFixedArrayOf<int,4,&(MJVTBL_INT32)>::MJVTBL
    };

    bool        Allow;              ///< Offset 0x0000 Type _MJVTBL_BOOL
    Info_Struct Info;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint32      QuestID;            ///< Offset 0x2F08 Type _MJVTBL_UINT32
};

///< SMSG_GOSSIP_COMPLETE
struct ClientGossipComplete
{
};

///< SMSG_GOSSIP_MESSAGE
struct ClientGossipMessage
{
    struct ClientGossipOptions
    {
        int32       ClientOption;        ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8       OptionNPC;           ///< Offset 0x0004 Type _MJVTBL_UINT8
        int8        OptionFlags;         ///< Offset 0x0005 Type _MJVTBL_INT8
        int32       OptionCost;          ///< Offset 0x0008 Type _MJVTBL_INT32
        std::string Text;                ///< Offset 0x000C Type _MJVTBL_STRING
        std::string Confirm;             ///< Offset 0x0BC4 Type _MJVTBL_STRING
    };

    struct ClientGossipText
    {
        int32       QuestID;              ///< Offset 0x0000 Type _MJVTBL_INT32
        int32       QuestType;            ///< Offset 0x0004 Type _MJVTBL_INT32
        int32       QuestLevel;           ///< Offset 0x0008 Type _MJVTBL_INT32
        bool        Repeatable;           ///< Offset 0x000C Type _MJVTBL_BOOL
        std::string QuestTitle;           ///< Offset 0x000D Type _MJVTBL_STRING
        int32       QuestFlags[2];        ///< Offset 0x0210 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
    };

    std::vector<ClientGossipOptions> GossipOptions;                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientGossipOptions>::MJVTBL
    int32                            FriendshipFactionID;                     ///< Offset 0x0018 Type _MJVTBL_INT32
    uint64                           GossipGUID;                              ///< Offset 0x0020 Type _MJVTBL_UINT64
    std::vector<ClientGossipText>    GossipQuestText;                         ///< Offset 0x0028 Type MakeMJVTblForArrayOfStruct<ClientGossipText>::MJVTBL
    int32                            TextID;                                  ///< Offset 0x0040 Type _MJVTBL_INT32
    int32                            GossipID;                                ///< Offset 0x0044 Type _MJVTBL_INT32
};

///< SMSG_QUEST_GIVER_QUEST_LIST_MESSAGE
struct ClientQuestGiverQuestListMessage
{
    struct ClientGossipText
    {
        int32       QuestID;              ///< Offset 0x0000 Type _MJVTBL_INT32
        int32       QuestType;            ///< Offset 0x0004 Type _MJVTBL_INT32
        int32       QuestLevel;           ///< Offset 0x0008 Type _MJVTBL_INT32
        bool        Repeatable;           ///< Offset 0x000C Type _MJVTBL_BOOL
        std::string QuestTitle;           ///< Offset 0x000D Type _MJVTBL_STRING
        int32       QuestFlags[2];        ///< Offset 0x0210 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
    };

    int32                         GreetEmoteDelay;                      ///< Offset 0x0000 Type _MJVTBL_INT32
    int32                         GreetEmoteType;                       ///< Offset 0x0004 Type _MJVTBL_INT32
    uint64                        QuestGiverGUID;                       ///< Offset 0x0008 Type _MJVTBL_UINT64
    std::vector<ClientGossipText> QuestDataText;                        ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<ClientGossipText>::MJVTBL
    std::string                   Greeting;                             ///< Offset 0x0028 Type _MJVTBL_STRING
};

///< SMSG_QUEST_GIVER_STATUS
struct ClientQuestGiverStatus
{
    uint64 QuestGiverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 StatusFlags;           ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_QUEST_FORCE_REMOVED
struct ClientQuestForceRemoved
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< SMSG_QUEST_POIQUERY_RESPONSE
struct ClientQuestPOIQueryResponse
{
    struct JamQuestPOIData
    {
        struct JamQuestPOIBlobData
        {
            struct JamQuestPOIBlobPoint
            {
                int32 X;            ///< Offset 0x0000 Type _MJVTBL_INT32
                int32 Y;            ///< Offset 0x0004 Type _MJVTBL_INT32
            };

            int32                             BlobIndex;                                ///< Offset 0x0000 Type _MJVTBL_INT32
            int32                             ObjectiveIndex;                           ///< Offset 0x0004 Type _MJVTBL_INT32
            int32                             QuestObjectiveID;                         ///< Offset 0x0008 Type _MJVTBL_INT32
            int32                             QuestObjectID;                            ///< Offset 0x000C Type _MJVTBL_INT32
            int32                             MapID;                                    ///< Offset 0x0010 Type _MJVTBL_INT32
            int32                             WorldMapAreaID;                           ///< Offset 0x0014 Type _MJVTBL_INT32
            int32                             Floor;                                    ///< Offset 0x0018 Type _MJVTBL_INT32
            int32                             Priority;                                 ///< Offset 0x001C Type _MJVTBL_INT32
            int32                             Flags;                                    ///< Offset 0x0020 Type _MJVTBL_INT32
            int32                             WorldEffectID;                            ///< Offset 0x0024 Type _MJVTBL_INT32
            int32                             PlayerConditionID;                        ///< Offset 0x0028 Type _MJVTBL_INT32
            int32                             NumPoints;                                ///< Offset 0x002C Type _MJVTBL_INT32
            std::vector<JamQuestPOIBlobPoint> Points;                                   ///< Offset 0x0030 Type MakeMJVTblForArrayOfStruct<JamQuestPOIBlobPoint>::MJVTBL
        };

        int32                            QuestID;                                 ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                            NumBlobs;                                ///< Offset 0x0004 Type _MJVTBL_INT32
        std::vector<JamQuestPOIBlobData> Blobs;                                   ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamQuestPOIBlobData>::MJVTBL
    };

    std::vector<JamQuestPOIData> QuestPOIData;                        ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamQuestPOIData>::MJVTBL
    int32                        NumPOIs;                             ///< Offset 0x0018 Type _MJVTBL_INT32
};

///< SMSG_SPELL_CHANCE_PROC_LOG
struct ClientSpellChanceProcLog
{
    uint64 Guid;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 TargetGUID;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  ProcType;           ///< Offset 0x0010 Type _MJVTBL_INT32
    float  Roll;               ///< Offset 0x0014 Type _MJVTBL_FLOAT
    float  Needed;             ///< Offset 0x0018 Type _MJVTBL_FLOAT
    int32  SpellID;            ///< Offset 0x001C Type _MJVTBL_INT32
    int32  ProcSubType;        ///< Offset 0x0020 Type _MJVTBL_INT32
};

///< SMSG_SPELL_PROC_SCRIPT_LOG
struct ClientSpellProcScriptLog
{
    uint64 Caster;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int8   Result;         ///< Offset 0x000C Type _MJVTBL_INT8
};

///< SMSG_CHEAT_IGNORE_DIMISHING_RETURNS
struct ClientCheatIgnoreDimishingReturns
{
    bool Enabled;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_MIRROR_IMAGE_CREATURE_DATA
struct ClientMirrorImageCreatureData
{
    uint64 UnitGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  DisplayID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_MIRROR_IMAGE_COMPONENTED_DATA
struct ClientMirrorImageComponentedData
{
    uint8              FaceVariation;             ///< Offset 0x0000 Type _MJVTBL_UINT8
    std::vector<int32> ItemDisplayID;             ///< Offset 0x0008 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    uint8              SkinColor;                 ///< Offset 0x0020 Type _MJVTBL_UINT8
    uint8              Gender;                    ///< Offset 0x0021 Type _MJVTBL_UINT8
    uint8              HairColor;                 ///< Offset 0x0022 Type _MJVTBL_UINT8
    uint8              ClassID;                   ///< Offset 0x0023 Type _MJVTBL_UINT8
    uint64             UnitGUID;                  ///< Offset 0x0028 Type _MJVTBL_UINT64
    uint8              RaceID;                    ///< Offset 0x0030 Type _MJVTBL_UINT8
    uint64             GuildGUID;                 ///< Offset 0x0038 Type _MJVTBL_UINT64
    uint8              HairVariation;             ///< Offset 0x0040 Type _MJVTBL_UINT8
    uint8              BeardVariation;            ///< Offset 0x0041 Type _MJVTBL_UINT8
    int32              DisplayID;                 ///< Offset 0x0044 Type _MJVTBL_INT32
};

///< SMSG_SPELL_COOLDOWN
struct ClientSpellCooldown
{
    struct ClientSpellCooldownStruct
    {
        uint32 SrecID;                ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32 ForcedCooldown;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    };

    std::vector<ClientSpellCooldownStruct> SpellCooldowns;                                ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientSpellCooldownStruct>::MJVTBL
    uint64                                 Caster;                                        ///< Offset 0x0018 Type _MJVTBL_UINT64
    uint8                                  Flags;                                         ///< Offset 0x0020 Type _MJVTBL_UINT8
};

///< SMSG_CATEGORY_COOLDOWN
struct ClientCategoryCooldown
{
    struct JamCategoryCooldown
    {
        int32 Category;           ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 ModCooldown;        ///< Offset 0x0004 Type _MJVTBL_INT32
    };

    std::vector<JamCategoryCooldown> CategoryCooldowns;                       ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCategoryCooldown>::MJVTBL
};

///< SMSG_WEEKLY_SPELL_USAGE
struct ClientWeeklySpellUsage
{
    struct JamWeeklySpellUse
    {
        int32 Category;        ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8 Uses;            ///< Offset 0x0004 Type _MJVTBL_UINT8
    };

    std::vector<JamWeeklySpellUse> Usage;                                 ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamWeeklySpellUse>::MJVTBL
};

///< SMSG_UPDATE_WEEKLY_SPELL_USAGE
struct ClientUpdateWeeklySpellUsage
{
    struct Usage_Struct
    {
        int32 Category;        ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8 Uses;            ///< Offset 0x0004 Type _MJVTBL_UINT8
    };

    Usage_Struct Usage;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_SPELL_DISPELL_LOG
struct ClientSpellDispellLog
{
    struct JamClientSpellDispellData
    {
        int32           SpellID;                ///< Offset 0x0000 Type _MJVTBL_INT32
        bool            Harmful;                ///< Offset 0x0004 Type _MJVTBL_BOOL
        Optional<int32> Rolled;                 ///< Offset 0x0008 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        Optional<int32> Needed;                 ///< Offset 0x0010 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
    };

    std::vector<JamClientSpellDispellData> DispellData;                                   ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientSpellDispellData>::MJVTBL
    bool                                   IsBreak;                                       ///< Offset 0x0018 Type _MJVTBL_BOOL
    uint64                                 TargetGUID;                                    ///< Offset 0x0020 Type _MJVTBL_UINT64
    bool                                   IsSteal;                                       ///< Offset 0x0028 Type _MJVTBL_BOOL
    int32                                  DispelledBySpellID;                            ///< Offset 0x002C Type _MJVTBL_INT32
    uint64                                 CasterGUID;                                    ///< Offset 0x0030 Type _MJVTBL_UINT64
};

///< SMSG_SPELL_PERIODIC_AURA_LOG
struct ClientSpellPeriodicAuraLog
{
    struct JamPeriodicAuraLogEffect
    {
        struct JamPeriodicAuraLogEffectDebugInfo
        {
            float CritRollMade;          ///< Offset 0x0000 Type _MJVTBL_FLOAT
            float CritRollNeeded;        ///< Offset 0x0004 Type _MJVTBL_FLOAT
        };

        int32                                       Effect;                                             ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                                       Amount;                                             ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                                       OverHealOrKill;                                     ///< Offset 0x0008 Type _MJVTBL_INT32
        int32                                       SchoolMaskOrPower;                                  ///< Offset 0x000C Type _MJVTBL_INT32
        int32                                       AbsorbedOrAmplitude;                                ///< Offset 0x0010 Type _MJVTBL_INT32
        int32                                       Resisted;                                           ///< Offset 0x0014 Type _MJVTBL_INT32
        bool                                        Crit;                                               ///< Offset 0x0018 Type _MJVTBL_BOOL
        bool                                        Multistrike;                                        ///< Offset 0x0019 Type _MJVTBL_BOOL
        Optional<JamPeriodicAuraLogEffectDebugInfo> DebugInfo;                                          ///< Offset 0x001C Type MakeMJVTblForOptionalStruct<JamPeriodicAuraLogEffectDebugInfo>::MJVTBL
    };

    struct JamSpellCastLogData
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    uint64                                TargetGUID;                                   ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<JamPeriodicAuraLogEffect> Entries;                                      ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamPeriodicAuraLogEffect>::MJVTBL
    Optional<JamSpellCastLogData>         LogData;                                      ///< Offset 0x0020 Type MakeMJVTblForOptionalStruct<JamSpellCastLogData>::MJVTBL
    uint64                                CasterGUID;                                   ///< Offset 0x0050 Type _MJVTBL_UINT64
    int32                                 SpellID;                                      ///< Offset 0x0058 Type _MJVTBL_INT32
};

///< SMSG_SPELL_ENERGIZE_LOG
struct ClientSpellEnergizeLog
{
    struct JamSpellCastLogData
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    int32                         SpellID;                              ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64                        TargetGUID;                           ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64                        CasterGUID;                           ///< Offset 0x0010 Type _MJVTBL_UINT64
    Optional<JamSpellCastLogData> LogData;                              ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<JamSpellCastLogData>::MJVTBL
    int32                         Amount;                               ///< Offset 0x0048 Type _MJVTBL_INT32
    int32                         Type;                                 ///< Offset 0x004C Type _MJVTBL_INT32
};

///< SMSG_SPELL_HEAL_LOG
struct ClientSpellHealLog
{
    struct JamSpellCastLogData
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    Optional<float>               CritRollMade;                         ///< Offset 0x0000 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    int32                         SpellID;                              ///< Offset 0x0008 Type _MJVTBL_INT32
    Optional<JamSpellCastLogData> LogData;                              ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamSpellCastLogData>::MJVTBL
    int32                         OverHeal;                             ///< Offset 0x0040 Type _MJVTBL_INT32
    Optional<float>               CritRollNeeded;                       ///< Offset 0x0044 Type MakeMJVTblForOptional<float,&(MJVTBL_FLOAT)>::MJVTBL
    bool                          Crit;                                 ///< Offset 0x004C Type _MJVTBL_BOOL
    bool                          Multistrike;                          ///< Offset 0x004D Type _MJVTBL_BOOL
    int32                         Absorbed;                             ///< Offset 0x0050 Type _MJVTBL_INT32
    uint64                        CasterGUID;                           ///< Offset 0x0058 Type _MJVTBL_UINT64
    int32                         Health;                               ///< Offset 0x0060 Type _MJVTBL_INT32
    uint64                        TargetGUID;                           ///< Offset 0x0068 Type _MJVTBL_UINT64
};

///< SMSG_SPELL_INTERRUPT_LOG
struct ClientSpellInterruptLog
{
    uint64 Victim;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Caster;                    ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  SpellID;                   ///< Offset 0x0010 Type _MJVTBL_INT32
    int32  InterruptedSpellID;        ///< Offset 0x0014 Type _MJVTBL_INT32
};

///< SMSG_ENVIRONMENTAL_DAMAGE_LOG
struct ClientEnvironmentalDamageLog
{
    struct JamSpellCastLogData
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    Optional<JamSpellCastLogData> LogData;                              ///< Offset 0x0000 Type MakeMJVTblForOptionalStruct<JamSpellCastLogData>::MJVTBL
    int32                         Absorbed;                             ///< Offset 0x0030 Type _MJVTBL_INT32
    uint64                        Victim;                               ///< Offset 0x0038 Type _MJVTBL_UINT64
    uint8                         Type;                                 ///< Offset 0x0040 Type _MJVTBL_UINT8
    int32                         Resisted;                             ///< Offset 0x0044 Type _MJVTBL_INT32
    int32                         Amount;                               ///< Offset 0x0048 Type _MJVTBL_INT32
};

///< SMSG_AURA_UPDATE
struct ClientAuraUpdate
{
    struct JamClientAuraInfo
    {
        struct JamClientAuraDataInfo
        {
            int32              SpellID;                   ///< Offset 0x0000 Type _MJVTBL_INT32
            uint8              Flags;                     ///< Offset 0x0004 Type _MJVTBL_UINT8
            uint32             ActiveFlags;               ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint16             CastLevel;                 ///< Offset 0x000C Type _MJVTBL_UINT16
            uint8              Applications;              ///< Offset 0x000E Type _MJVTBL_UINT8
            Optional<uint64>   CastUnit;                  ///< Offset 0x0010 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
            Optional<int32>    Duration;                  ///< Offset 0x0020 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            Optional<int32>    Remaining;                 ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            std::vector<float> Points;                    ///< Offset 0x0030 Type MakeMJVTblForArrayOf<float,&(MJVTBL_FLOAT)>::MJVTBL
            std::vector<float> EstimatedPoints;           ///< Offset 0x0048 Type MakeMJVTblForArrayOf<float,&(MJVTBL_FLOAT)>::MJVTBL
        };

        uint8                           Slot;                                   ///< Offset 0x0000 Type _MJVTBL_UINT8
        Optional<JamClientAuraDataInfo> AuraData;                               ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamClientAuraDataInfo>::MJVTBL
    };

    bool                           UpdateAll;                             ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64                         UnitGUID;                              ///< Offset 0x0008 Type _MJVTBL_UINT64
    std::vector<JamClientAuraInfo> Auras;                                 ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamClientAuraInfo>::MJVTBL
};

///< SMSG_AURA_POINTS_DEPLETED
struct ClientAuraPointsDepleted
{
    uint64 Unit;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  Slot;               ///< Offset 0x0008 Type _MJVTBL_UINT8
    uint8  EffectIndex;        ///< Offset 0x0009 Type _MJVTBL_UINT8
};

///< SMSG_PET_CLEAR_SPELLS
struct ClientPetClearSpells
{
};

///< SMSG_PET_SPELLS_MESSAGE
struct ClientPetSpellsMessage
{
    struct Spells_Struct
    {
        struct PetSpellCooldown
        {
            int32  SpellID;                 ///< Offset 0x0000 Type _MJVTBL_INT32
            int32  Duration;                ///< Offset 0x0004 Type _MJVTBL_INT32
            int32  CategoryDuration;        ///< Offset 0x0008 Type _MJVTBL_INT32
            uint16 Category;                ///< Offset 0x000C Type _MJVTBL_UINT16
        };

        struct PetSpellHistory
        {
            int32 CategoryID;             ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 RecoveryTime;           ///< Offset 0x0004 Type _MJVTBL_INT32
            int8  ConsumedCharges;        ///< Offset 0x0008 Type _MJVTBL_INT8
        };

        uint64                        PetGUID;                              ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint16                        CreatureFamily;                       ///< Offset 0x0008 Type _MJVTBL_UINT16
        uint16                        Specialization;                       ///< Offset 0x000A Type _MJVTBL_UINT16
        uint32                        TimeLimit;                            ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                        PetModeAndOrders;                     ///< Offset 0x0010 Type _MJVTBL_UINT32
        std::vector<uint32>           Actions;                              ///< Offset 0x0018 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        std::vector<PetSpellCooldown> Cooldowns;                            ///< Offset 0x0030 Type MakeMJVTblForArrayOfStruct<PetSpellCooldown>::MJVTBL
        std::vector<PetSpellHistory>  SpellHistory;                         ///< Offset 0x0048 Type MakeMJVTblForArrayOfStruct<PetSpellHistory>::MJVTBL
        uint32                        ActionButtons[10];                    ///< Offset 0x0060 Type MakeMJVTblForFixedArrayOf<unsignedint,10,&(MJVTBL_UINT32)>::MJVTBL
    };

    Spells_Struct Spells;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_CLEAR_COOLDOWNS
struct ClientClearCooldowns
{
    std::vector<int32> SpellID;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    uint64             Guid;                      ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< SMSG_INCREASE_CAST_TIME_FOR_SPELL
struct ClientIncreaseCastTimeForSpell
{
    uint64 Caster;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 CastTime;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    int32  SpellID;         ///< Offset 0x000C Type _MJVTBL_INT32
};

///< SMSG_CLEAR_ALL_SPELL_CHARGES
struct ClientClearAllSpellCharges
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_CLEAR_SPELL_CHARGES
struct ClientClearSpellCharges
{
    uint64 Unit;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Category;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_SET_SPELL_CHARGES
struct ClientSetSpellCharges
{
    bool  IsPet;           ///< Offset 0x0000 Type _MJVTBL_BOOL
    float Count;           ///< Offset 0x0004 Type _MJVTBL_FLOAT
    int32 Category;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_SEND_KNOWN_SPELLS
struct ClientSendKnownSpells
{
    bool                InitialLogin;               ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<uint32> KnownSpells;                ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
};

///< SMSG_SEND_SPELL_HISTORY
struct ClientSendSpellHistory
{
    struct SpellHistoryEntry
    {
        uint32 SpellID;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32 ItemID;                      ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint32 Category;                    ///< Offset 0x0008 Type _MJVTBL_UINT32
        int32  RecoveryTime;                ///< Offset 0x000C Type _MJVTBL_INT32
        int32  CategoryRecoveryTime;        ///< Offset 0x0010 Type _MJVTBL_INT32
        bool   OnHold;                      ///< Offset 0x0014 Type _MJVTBL_BOOL
    };

    std::vector<SpellHistoryEntry> Entries;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<SpellHistoryEntry>::MJVTBL
};

///< SMSG_REFRESH_SPELL_HISTORY
struct ClientRefreshSpellHistory
{
    struct SpellHistoryEntry
    {
        uint32 SpellID;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32 ItemID;                      ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint32 Category;                    ///< Offset 0x0008 Type _MJVTBL_UINT32
        int32  RecoveryTime;                ///< Offset 0x000C Type _MJVTBL_INT32
        int32  CategoryRecoveryTime;        ///< Offset 0x0010 Type _MJVTBL_INT32
        bool   OnHold;                      ///< Offset 0x0014 Type _MJVTBL_BOOL
    };

    std::vector<SpellHistoryEntry> Entries;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<SpellHistoryEntry>::MJVTBL
};

///< SMSG_SEND_SPELL_CHARGES
struct ClientSendSpellCharges
{
    struct SpellChargeEntry
    {
        uint32 Category;                ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32 NextRecoveryTime;        ///< Offset 0x0004 Type _MJVTBL_UINT32
        uint8  ConsumedCharges;         ///< Offset 0x0008 Type _MJVTBL_UINT8
    };

    std::vector<SpellChargeEntry> Entries;                              ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<SpellChargeEntry>::MJVTBL
};

///< SMSG_SEND_UNLEARN_SPELLS
struct ClientSendUnlearnSpells
{
    std::vector<uint32> Spells;                     ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
};

///< SMSG_SPELL_OR_DAMAGE_IMMUNE
struct ClientSpellOrDamageImmune
{
    uint64 VictimGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   IsPeriodic;        ///< Offset 0x0008 Type _MJVTBL_BOOL
    uint32 SpellID;           ///< Offset 0x000C Type _MJVTBL_UINT32
    uint64 CasterGUID;        ///< Offset 0x0010 Type _MJVTBL_UINT64
};

///< SMSG_DISPEL_FAILED
struct ClientDispelFailed
{
    std::vector<int32> FailedSpells;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
    uint32             SpellID;                   ///< Offset 0x0018 Type _MJVTBL_UINT32
    uint64             VictimGUID;                ///< Offset 0x0020 Type _MJVTBL_UINT64
    uint64             CasterGUID;                ///< Offset 0x0028 Type _MJVTBL_UINT64
};

///< SMSG_SPELL_DAMAGE_SHIELD
struct ClientSpellDamageShield
{
    struct JamSpellCastLogData
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    int32                         SpellID;                              ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64                        Defender;                             ///< Offset 0x0008 Type _MJVTBL_UINT64
    Optional<JamSpellCastLogData> LogData;                              ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamSpellCastLogData>::MJVTBL
    int32                         OverKill;                             ///< Offset 0x0040 Type _MJVTBL_INT32
    int32                         TotalDamage;                          ///< Offset 0x0044 Type _MJVTBL_INT32
    uint64                        Attacker;                             ///< Offset 0x0048 Type _MJVTBL_UINT64
    int32                         LogAbsorbed;                          ///< Offset 0x0050 Type _MJVTBL_INT32
    int32                         SchoolMask;                           ///< Offset 0x0054 Type _MJVTBL_INT32
};

///< SMSG_SPELL_NON_MELEE_DAMAGE_LOG
struct ClientSpellNonMeleeDamageLog
{
    struct JamSpellCastLogData
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    struct ClientSpellNonMeleeDamageLogDebugInfo
    {
        float CritRoll;            ///< Offset 0x0000 Type _MJVTBL_FLOAT
        float CritNeeded;          ///< Offset 0x0004 Type _MJVTBL_FLOAT
        float HitRoll;             ///< Offset 0x0008 Type _MJVTBL_FLOAT
        float HitNeeded;           ///< Offset 0x000C Type _MJVTBL_FLOAT
        float MissChance;          ///< Offset 0x0010 Type _MJVTBL_FLOAT
        float DodgeChance;         ///< Offset 0x0014 Type _MJVTBL_FLOAT
        float ParryChance;         ///< Offset 0x0018 Type _MJVTBL_FLOAT
        float BlockChance;         ///< Offset 0x001C Type _MJVTBL_FLOAT
        float GlanceChance;        ///< Offset 0x0020 Type _MJVTBL_FLOAT
        float CrushChance;         ///< Offset 0x0024 Type _MJVTBL_FLOAT
    };

    int32                                           Absorbed;                                               ///< Offset 0x0000 Type _MJVTBL_INT32
    int32                                           ShieldBlock;                                            ///< Offset 0x0004 Type _MJVTBL_INT32
    uint64                                          Me;                                                     ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32                                           SpellID;                                                ///< Offset 0x0010 Type _MJVTBL_INT32
    int32                                           Resisted;                                               ///< Offset 0x0014 Type _MJVTBL_INT32
    bool                                            Periodic;                                               ///< Offset 0x0018 Type _MJVTBL_BOOL
    uint8                                           SchoolMask;                                             ///< Offset 0x0019 Type _MJVTBL_UINT8
    uint64                                          CasterGUID;                                             ///< Offset 0x0020 Type _MJVTBL_UINT64
    Optional<JamSpellCastLogData>                   LogData;                                                ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamSpellCastLogData>::MJVTBL
    int32                                           Damage;                                                 ///< Offset 0x0058 Type _MJVTBL_INT32
    Optional<ClientSpellNonMeleeDamageLogDebugInfo> DebugInfo;                                              ///< Offset 0x005C Type MakeMJVTblForOptionalStruct<ClientSpellNonMeleeDamageLogDebugInfo>::MJVTBL
    int32                                           Flags;                                                  ///< Offset 0x0088 Type _MJVTBL_INT32
    int32                                           OverKill;                                               ///< Offset 0x008C Type _MJVTBL_INT32
};

///< SMSG_SPELL_INSTAKILL_LOG
struct ClientSpellInstakillLog
{
    uint64 Target;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Caster;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  SpellID;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< SMSG_SPELL_UPDATE_CHAIN_TARGETS
struct ClientSpellUpdateChainTargets
{
    uint64              Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<uint64> Targets;                    ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    int32               SpellID;                    ///< Offset 0x0020 Type _MJVTBL_INT32
};

///< SMSG_SPELL_CHANNEL_START
struct ClientSpellChannelStart
{
    struct SpellChannelStartInterruptImmunities
    {
        int32 SchoolImmunities;        ///< Offset 0x0000 Type _MJVTBL_INT32
        int32 Immunities;              ///< Offset 0x0004 Type _MJVTBL_INT32
    };

    struct SpellTargetedHealPrediction
    {
        struct Predict_Struct
        {
            uint64 BeaconGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
            int32  Points;            ///< Offset 0x0008 Type _MJVTBL_INT32
            uint8  Type;              ///< Offset 0x000C Type _MJVTBL_UINT8
        };

        uint64         TargetGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
        Predict_Struct Predict;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    };

    int32                                          SpellID;                                               ///< Offset 0x0000 Type _MJVTBL_INT32
    Optional<SpellChannelStartInterruptImmunities> InterruptImmunities;                                   ///< Offset 0x0004 Type MakeMJVTblForOptionalStruct<SpellChannelStartInterruptImmunities>::MJVTBL
    uint64                                         CasterGUID;                                            ///< Offset 0x0010 Type _MJVTBL_UINT64
    Optional<SpellTargetedHealPrediction>          HealPrediction;                                        ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<SpellTargetedHealPrediction>::MJVTBL
    uint32                                         ChannelDuration;                                       ///< Offset 0x0038 Type _MJVTBL_UINT32
};

///< SMSG_SPELL_CHANNEL_UPDATE
struct ClientSpellChannelUpdate
{
    uint64 CasterGUID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  TimeRemaining;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_SET_FLAT_SPELL_MODIFIER
struct ClientSetFlatSpellModifier
{
    struct ClientSpellModifier
    {
        struct ClientSpellModifierData
        {
            float ModifierValue;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
            uint8 ClassIndex;           ///< Offset 0x0004 Type _MJVTBL_UINT8
        };

        uint8                                ModIndex;                                    ///< Offset 0x0000 Type _MJVTBL_UINT8
        std::vector<ClientSpellModifierData> ModifierData;                                ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientSpellModifierData>::MJVTBL
    };

    std::vector<ClientSpellModifier> Modifiers;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientSpellModifier>::MJVTBL
};

///< SMSG_SET_PCT_SPELL_MODIFIER
struct ClientSetPctSpellModifier
{
    struct ClientSpellModifier
    {
        struct ClientSpellModifierData
        {
            float ModifierValue;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
            uint8 ClassIndex;           ///< Offset 0x0004 Type _MJVTBL_UINT8
        };

        uint8                                ModIndex;                                    ///< Offset 0x0000 Type _MJVTBL_UINT8
        std::vector<ClientSpellModifierData> ModifierData;                                ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<ClientSpellModifierData>::MJVTBL
    };

    std::vector<ClientSpellModifier> Modifiers;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<ClientSpellModifier>::MJVTBL
};

///< SMSG_SPELL_GO
struct ClientSpellGo
{
    struct JamSpellCastLogData
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    struct Cast_Struct
    {
        struct JamSpellMissStatus
        {
            uint8 Reason;               ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 ReflectStatus;        ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        struct Target_Struct
        {
            struct JamLocation
            {
                uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3 Location;            ///< Offset 0x0008 Type _MJVTBL_V3
            };

            uint32                Flags;                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint64                Unit;                         ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64                Item;                         ///< Offset 0x0010 Type _MJVTBL_UINT64
            Optional<JamLocation> SrcLocation;                  ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            Optional<JamLocation> DstLocation;                  ///< Offset 0x0038 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            std::string           Name;                         ///< Offset 0x0058 Type _MJVTBL_STRING
        };

        struct JamSpellPowerData
        {
            int32 Cost;         ///< Offset 0x0000 Type _MJVTBL_INT32
            int8  Type;         ///< Offset 0x0004 Type _MJVTBL_INT8
        };

        struct JamRuneData
        {
            uint8              Start;                     ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8              Count;                     ///< Offset 0x0001 Type _MJVTBL_UINT8
            std::vector<uint8> Cooldowns;                 ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
        };

        struct MissileTrajectory_Struct
        {
            uint32 TravelTime;        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float  Pitch;             ///< Offset 0x0004 Type _MJVTBL_FLOAT
        };

        struct Ammo_Struct
        {
            int32 DisplayID;            ///< Offset 0x0000 Type _MJVTBL_INT32
            int8  InventoryType;        ///< Offset 0x0004 Type _MJVTBL_INT8
        };

        struct JamProjectileVisual
        {
            int32 Id[2];        ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamLocation
        {
            uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3 Location;            ///< Offset 0x0008 Type _MJVTBL_V3
        };

        struct Immunities_Struct
        {
            int32 School;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Value;         ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        struct Predict_Struct
        {
            uint64 BeaconGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
            int32  Points;            ///< Offset 0x0008 Type _MJVTBL_INT32
            uint8  Type;              ///< Offset 0x000C Type _MJVTBL_UINT8
        };

        uint64                          CasterGUID;                             ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64                          CasterUnit;                             ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint8                           CastID;                                 ///< Offset 0x0010 Type _MJVTBL_UINT8
        int32                           SpellID;                                ///< Offset 0x0014 Type _MJVTBL_INT32
        uint32                          CastFlags;                              ///< Offset 0x0018 Type _MJVTBL_UINT32
        uint32                          CastFlagsEx;                            ///< Offset 0x001C Type _MJVTBL_UINT32
        uint32                          CastTime;                               ///< Offset 0x0020 Type _MJVTBL_UINT32
        std::vector<uint64>             HitTargets;                             ///< Offset 0x0028 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        std::vector<uint64>             MissTargets;                            ///< Offset 0x0040 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        std::vector<JamSpellMissStatus> MissStatus;                             ///< Offset 0x0058 Type MakeMJVTblForArrayOfStruct<JamSpellMissStatus>::MJVTBL
        Target_Struct                   Target;                                 ///< Offset 0x0070 Type _MJVTBL_STRUCT
        std::vector<JamSpellPowerData>  RemainingPower;                         ///< Offset 0x0148 Type MakeMJVTblForArrayOfStruct<JamSpellPowerData>::MJVTBL
        Optional<JamRuneData>           RemainingRunes;                         ///< Offset 0x0160 Type MakeMJVTblForOptionalStruct<JamRuneData>::MJVTBL
        MissileTrajectory_Struct        MissileTrajectory;                      ///< Offset 0x0188 Type _MJVTBL_STRUCT
        Ammo_Struct                     Ammo;                                   ///< Offset 0x0190 Type _MJVTBL_STRUCT
        Optional<JamProjectileVisual>   ProjectileVisual;                       ///< Offset 0x0198 Type MakeMJVTblForOptionalStruct<JamProjectileVisual>::MJVTBL
        uint8                           DestLocSpellCastIndex;                  ///< Offset 0x01A4 Type _MJVTBL_UINT8
        std::vector<JamLocation>        TargetPoints;                           ///< Offset 0x01A8 Type MakeMJVTblForArrayOfStruct<JamLocation>::MJVTBL
        Immunities_Struct               Immunities;                             ///< Offset 0x01C0 Type _MJVTBL_STRUCT
        Predict_Struct                  Predict;                                ///< Offset 0x01C8 Type _MJVTBL_STRUCT
    };

    Optional<JamSpellCastLogData> LogData;                              ///< Offset 0x0000 Type MakeMJVTblForOptionalStruct<JamSpellCastLogData>::MJVTBL
    Cast_Struct                   Cast;                                 ///< Offset 0x0030 Type _MJVTBL_STRUCT
};

///< SMSG_SPELL_START
struct ClientSpellStart
{
    struct Cast_Struct
    {
        struct JamSpellMissStatus
        {
            uint8 Reason;               ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 ReflectStatus;        ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        struct Target_Struct
        {
            struct JamLocation
            {
                uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3 Location;            ///< Offset 0x0008 Type _MJVTBL_V3
            };

            uint32                Flags;                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint64                Unit;                         ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64                Item;                         ///< Offset 0x0010 Type _MJVTBL_UINT64
            Optional<JamLocation> SrcLocation;                  ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            Optional<JamLocation> DstLocation;                  ///< Offset 0x0038 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            std::string           Name;                         ///< Offset 0x0058 Type _MJVTBL_STRING
        };

        struct JamSpellPowerData
        {
            int32 Cost;         ///< Offset 0x0000 Type _MJVTBL_INT32
            int8  Type;         ///< Offset 0x0004 Type _MJVTBL_INT8
        };

        struct JamRuneData
        {
            uint8              Start;                     ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8              Count;                     ///< Offset 0x0001 Type _MJVTBL_UINT8
            std::vector<uint8> Cooldowns;                 ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
        };

        struct MissileTrajectory_Struct
        {
            uint32 TravelTime;        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float  Pitch;             ///< Offset 0x0004 Type _MJVTBL_FLOAT
        };

        struct Ammo_Struct
        {
            int32 DisplayID;            ///< Offset 0x0000 Type _MJVTBL_INT32
            int8  InventoryType;        ///< Offset 0x0004 Type _MJVTBL_INT8
        };

        struct JamProjectileVisual
        {
            int32 Id[2];        ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamLocation
        {
            uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3 Location;            ///< Offset 0x0008 Type _MJVTBL_V3
        };

        struct Immunities_Struct
        {
            int32 School;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Value;         ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        struct Predict_Struct
        {
            uint64 BeaconGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
            int32  Points;            ///< Offset 0x0008 Type _MJVTBL_INT32
            uint8  Type;              ///< Offset 0x000C Type _MJVTBL_UINT8
        };

        uint64                          CasterGUID;                             ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64                          CasterUnit;                             ///< Offset 0x0008 Type _MJVTBL_UINT64
        uint8                           CastID;                                 ///< Offset 0x0010 Type _MJVTBL_UINT8
        int32                           SpellID;                                ///< Offset 0x0014 Type _MJVTBL_INT32
        uint32                          CastFlags;                              ///< Offset 0x0018 Type _MJVTBL_UINT32
        uint32                          CastFlagsEx;                            ///< Offset 0x001C Type _MJVTBL_UINT32
        uint32                          CastTime;                               ///< Offset 0x0020 Type _MJVTBL_UINT32
        std::vector<uint64>             HitTargets;                             ///< Offset 0x0028 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        std::vector<uint64>             MissTargets;                            ///< Offset 0x0040 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        std::vector<JamSpellMissStatus> MissStatus;                             ///< Offset 0x0058 Type MakeMJVTblForArrayOfStruct<JamSpellMissStatus>::MJVTBL
        Target_Struct                   Target;                                 ///< Offset 0x0070 Type _MJVTBL_STRUCT
        std::vector<JamSpellPowerData>  RemainingPower;                         ///< Offset 0x0148 Type MakeMJVTblForArrayOfStruct<JamSpellPowerData>::MJVTBL
        Optional<JamRuneData>           RemainingRunes;                         ///< Offset 0x0160 Type MakeMJVTblForOptionalStruct<JamRuneData>::MJVTBL
        MissileTrajectory_Struct        MissileTrajectory;                      ///< Offset 0x0188 Type _MJVTBL_STRUCT
        Ammo_Struct                     Ammo;                                   ///< Offset 0x0190 Type _MJVTBL_STRUCT
        Optional<JamProjectileVisual>   ProjectileVisual;                       ///< Offset 0x0198 Type MakeMJVTblForOptionalStruct<JamProjectileVisual>::MJVTBL
        uint8                           DestLocSpellCastIndex;                  ///< Offset 0x01A4 Type _MJVTBL_UINT8
        std::vector<JamLocation>        TargetPoints;                           ///< Offset 0x01A8 Type MakeMJVTblForArrayOfStruct<JamLocation>::MJVTBL
        Immunities_Struct               Immunities;                             ///< Offset 0x01C0 Type _MJVTBL_STRUCT
        Predict_Struct                  Predict;                                ///< Offset 0x01C8 Type _MJVTBL_STRUCT
    };

    Cast_Struct Cast;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_AURA_CAST_LOG
struct ClientAuraCastLog
{
    uint64 Victim;                 ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Attacker;               ///< Offset 0x0008 Type _MJVTBL_UINT64
    float  ApplyRoll;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
    int32  SpellID;                ///< Offset 0x0014 Type _MJVTBL_INT32
    float  ApplyRollNeeded;        ///< Offset 0x0018 Type _MJVTBL_FLOAT
};

///< SMSG_RESIST_LOG
struct ClientResistLog
{
    uint64 Attacker;                ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Victim;                  ///< Offset 0x0008 Type _MJVTBL_UINT64
    float  ResistRoll;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
    int32  CastLevel;               ///< Offset 0x0014 Type _MJVTBL_INT32
    int32  SpellID;                 ///< Offset 0x0018 Type _MJVTBL_INT32
    float  ResistRollNeeded;        ///< Offset 0x001C Type _MJVTBL_FLOAT
    uint8  ResistLogFlags;          ///< Offset 0x0020 Type _MJVTBL_UINT8
};

///< SMSG_RESUME_CAST_BAR
struct ClientResumeCastBar
{
    int32  SpellID;                       ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64 Guid;                          ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 Target;                        ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint32 TimeRemaining;                 ///< Offset 0x0018 Type _MJVTBL_UINT32
    bool   HasInterruptImmunities;        ///< Offset 0x001C Type _MJVTBL_BOOL
    int32  SchoolImmunities;              ///< Offset 0x0020 Type _MJVTBL_INT32
    int32  Immunities;                    ///< Offset 0x0024 Type _MJVTBL_INT32
    uint32 TotalTime;                     ///< Offset 0x0028 Type _MJVTBL_UINT32
};

///< SMSG_SPELL_DELAYED
struct ClientSpellDelayed
{
    uint64 Caster;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  ActualDelay;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< SMSG_SPELL_EXECUTE_LOG
struct ClientSpellExecuteLog
{
    struct JamClientSpellLogEffect
    {
        struct JamClientSpellLogEffectPowerDrainParams
        {
            uint64 Victim;           ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 Points;           ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32 PowerType;        ///< Offset 0x000C Type _MJVTBL_UINT32
            float  Amplitude;        ///< Offset 0x0010 Type _MJVTBL_FLOAT
        };

        struct JamClientSpellLogEffectExtraAttacksParams
        {
            uint64 Victim;            ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32 NumAttacks;        ///< Offset 0x0008 Type _MJVTBL_UINT32
        };

        struct JamClientSpellLogEffectDurabilityDamageParams
        {
            uint64 Victim;        ///< Offset 0x0000 Type _MJVTBL_UINT64
            int32  ItemID;        ///< Offset 0x0008 Type _MJVTBL_INT32
            int32  Amount;        ///< Offset 0x000C Type _MJVTBL_INT32
        };

        struct JamClientSpellLogEffectGenericVictimParams
        {
            uint64 Victim;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        };

        struct JamClientSpellLogEffectTradeSkillItemParams
        {
            int32 ItemID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        };

        struct JamClientSpellLogEffectFeedPetParams
        {
            int32 ItemID;        ///< Offset 0x0000 Type _MJVTBL_INT32
        };

        int32                                                      Effect;                                                            ///< Offset 0x0000 Type _MJVTBL_INT32
        std::vector<JamClientSpellLogEffectPowerDrainParams>       PowerDrainTargets;                                                 ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamClientSpellLogEffectPowerDrainParams>::MJVTBL
        std::vector<JamClientSpellLogEffectExtraAttacksParams>     ExtraAttacksTargets;                                               ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<JamClientSpellLogEffectExtraAttacksParams>::MJVTBL
        std::vector<JamClientSpellLogEffectDurabilityDamageParams> DurabilityDamageTargets;                                           ///< Offset 0x0038 Type MakeMJVTblForArrayOfStruct<JamClientSpellLogEffectDurabilityDamageParams>::MJVTBL
        std::vector<JamClientSpellLogEffectGenericVictimParams>    GenericVictimTargets;                                              ///< Offset 0x0050 Type MakeMJVTblForArrayOfStruct<JamClientSpellLogEffectGenericVictimParams>::MJVTBL
        std::vector<JamClientSpellLogEffectTradeSkillItemParams>   TradeSkillTargets;                                                 ///< Offset 0x0068 Type MakeMJVTblForArrayOfStruct<JamClientSpellLogEffectTradeSkillItemParams>::MJVTBL
        std::vector<JamClientSpellLogEffectFeedPetParams>          FeedPetTargets;                                                    ///< Offset 0x0080 Type MakeMJVTblForArrayOfStruct<JamClientSpellLogEffectFeedPetParams>::MJVTBL
    };

    struct JamSpellCastLogData
    {
        struct JamSpellLogPowerData
        {
            int32 PowerType;        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 Amount;           ///< Offset 0x0004 Type _MJVTBL_INT32
        };

        int32                             Health;                                   ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             AttackPower;                              ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                             SpellPower;                               ///< Offset 0x0008 Type _MJVTBL_INT32
        std::vector<JamSpellLogPowerData> PowerData;                                ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamSpellLogPowerData>::MJVTBL
    };

    int32                                SpellID;                                     ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64                               Caster;                                      ///< Offset 0x0008 Type _MJVTBL_UINT64
    std::vector<JamClientSpellLogEffect> Effects;                                     ///< Offset 0x0010 Type MakeMJVTblForArrayOfStruct<JamClientSpellLogEffect>::MJVTBL
    Optional<JamSpellCastLogData>        LogData;                                     ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamSpellCastLogData>::MJVTBL
};

///< SMSG_SPELL_MISS_LOG
struct ClientSpellMissLog
{
    struct JamClientSpellLogMissEntry
    {
        struct JamClientSpellLogMissDebug
        {
            float HitRoll;              ///< Offset 0x0000 Type _MJVTBL_FLOAT
            float HitRollNeeded;        ///< Offset 0x0004 Type _MJVTBL_FLOAT
        };

        uint64                               Victim;                                      ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint8                                MissReason;                                  ///< Offset 0x0008 Type _MJVTBL_UINT8
        Optional<JamClientSpellLogMissDebug> Debug;                                       ///< Offset 0x000C Type MakeMJVTblForOptionalStruct<JamClientSpellLogMissDebug>::MJVTBL
    };

    std::vector<JamClientSpellLogMissEntry> Entries;                                        ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientSpellLogMissEntry>::MJVTBL
    int32                                   SpellID;                                        ///< Offset 0x0018 Type _MJVTBL_INT32
    uint64                                  Caster;                                         ///< Offset 0x0020 Type _MJVTBL_UINT64
};

///< SMSG_SPELL_PROCS_PER_MINUTE_LOG
struct ClientSpellProcsPerMinuteLog
{
    struct LogData_Struct
    {
        struct JamSpellProcsPerMinuteCalc
        {
            int32 M_type;          ///< Offset 0x0000 Type _MJVTBL_INT32
            int32 M_param;         ///< Offset 0x0004 Type _MJVTBL_INT32
            float M_coeff;         ///< Offset 0x0008 Type _MJVTBL_FLOAT
            float Input;           ///< Offset 0x000C Type _MJVTBL_FLOAT
            float NewValue;        ///< Offset 0x0010 Type _MJVTBL_FLOAT
        };

        bool                                    Proc;                                           ///< Offset 0x0000 Type _MJVTBL_BOOL
        int32                                   SpellID;                                        ///< Offset 0x0004 Type _MJVTBL_INT32
        float                                   BaseProcRate;                                   ///< Offset 0x0008 Type _MJVTBL_FLOAT
        uint32                                  Now;                                            ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                                  LastChanceTimestamp;                            ///< Offset 0x0010 Type _MJVTBL_UINT32
        uint32                                  LastProcTimestamp;                              ///< Offset 0x0014 Type _MJVTBL_UINT32
        uint32                                  LastChanceTime;                                 ///< Offset 0x0018 Type _MJVTBL_UINT32
        uint32                                  LastProcTime;                                   ///< Offset 0x001C Type _MJVTBL_UINT32
        bool                                    NormalizeAuraTime;                              ///< Offset 0x0020 Type _MJVTBL_BOOL
        uint32                                  AuraTime;                                       ///< Offset 0x0024 Type _MJVTBL_UINT32
        float                                   IntervalsSinceLastProc;                         ///< Offset 0x0028 Type _MJVTBL_FLOAT
        float                                   UnluckyStreakDef;                               ///< Offset 0x002C Type _MJVTBL_FLOAT
        float                                   UnluckyMultiplier;                              ///< Offset 0x0030 Type _MJVTBL_FLOAT
        int32                                   ReallyUnluckyDef;                               ///< Offset 0x0034 Type _MJVTBL_INT32
        float                                   ProcChance;                                     ///< Offset 0x0038 Type _MJVTBL_FLOAT
        float                                   ProcRate;                                       ///< Offset 0x003C Type _MJVTBL_FLOAT
        float                                   Roll;                                           ///< Offset 0x0040 Type _MJVTBL_FLOAT
        std::vector<JamSpellProcsPerMinuteCalc> CalcHistory;                                    ///< Offset 0x0048 Type MakeMJVTblForArrayOfStruct<JamSpellProcsPerMinuteCalc>::MJVTBL
    };

    LogData_Struct LogData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64         Guid;                  ///< Offset 0x0060 Type _MJVTBL_UINT64
    uint64         TargetGUID;            ///< Offset 0x0068 Type _MJVTBL_UINT64
};

///< SMSG_SPELL_MULTISTRIKE_EFFECT
struct ClientSpellMultistrikeEffect
{
    uint64 Target;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Caster;           ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  SpellID;          ///< Offset 0x0010 Type _MJVTBL_INT32
    int16  ProcCount;        ///< Offset 0x0014 Type _MJVTBL_INT16
    int16  ProcNum;          ///< Offset 0x0016 Type _MJVTBL_INT16
};

///< CMSG_GUILD_SET_LEVEL_CHEAT
struct GlobalGuildSetLevelCheat
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Level;            ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GUILD_NEWS_CREATE_CHEAT
struct GlobalGuildNewsCreateCheat
{
    uint64 Guild;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 DateOffset;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 Data;              ///< Offset 0x000C Type _MJVTBL_UINT32
    uint32 NewsType;          ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< CMSG_GUILD_ADD_XPCHEAT
struct GlobalGuildAddXPCheat
{
    uint64 Guild;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Xp;            ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GUILD_REQUEST_GUILD_XP
struct GlobalGuildRequestGuildXP
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_SET_MAX_DAILY_XP
struct GlobalGuildSetMaxDailyXP
{
    int32 MaxGuildDailyXP;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GUILD_PROMOTE_MEMBER
struct GlobalGuildPromoteMember
{
    uint64 Promotee;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_DEMOTE_MEMBER
struct GlobalGuildDemoteMember
{
    uint64 Demotee;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_ASSIGN_MEMBER_RANK
struct GlobalGuildAssignMemberRank
{
    uint64 Member;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  RankOrder;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GUILD_DECLINE_INVITATION
struct GlobalGuildDeclineInvitation
{
};

///< CMSG_GUILD_AUTO_DECLINE_INVITATION
struct GlobalGuildAutoDeclineInvitation
{
};

///< CMSG_GUILD_LEAVE
struct GlobalGuildLeave
{
};

///< CMSG_GUILD_OFFICER_REMOVE_MEMBER
struct GlobalGuildOfficerRemoveMember
{
    uint64 Removee;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_ADD_RANK
struct GlobalGuildAddRank
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       RankOrder;          ///< Offset 0x0044 Type _MJVTBL_INT32
};

///< CMSG_GUILD_DELETE_RANK
struct GlobalGuildDeleteRank
{
    int32 RankOrder;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GUILD_SHIFT_RANK
struct GlobalGuildShiftRank
{
    bool  ShiftUp;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 RankOrder;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_GUILD_SET_RANK_PERMISSIONS
struct GlobalGuildSetRankPermissions
{
    uint32      OldFlags;                       ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32       RankID;                         ///< Offset 0x0004 Type _MJVTBL_INT32
    int32       RankOrder;                      ///< Offset 0x0008 Type _MJVTBL_INT32
    std::string RankName;                       ///< Offset 0x000C Type _MJVTBL_STRING
    uint32      Flags;                          ///< Offset 0x0050 Type _MJVTBL_UINT32
    uint32      WithdrawGoldLimit;              ///< Offset 0x0054 Type _MJVTBL_UINT32
    uint32      TabFlags[8];                    ///< Offset 0x0058 Type MakeMJVTblForFixedArrayOf<unsignedint,8,&(MJVTBL_UINT32)>::MJVTBL
    uint32      TabWithdrawItemLimit[8];        ///< Offset 0x0078 Type MakeMJVTblForFixedArrayOf<unsignedint,8,&(MJVTBL_UINT32)>::MJVTBL
};

///< CMSG_GUILD_DELETE
struct GlobalGuildDelete
{
};

///< CMSG_GUILD_QUERY_MEMBER_RECIPES
struct GlobalGuildQueryMemberRecipes
{
    uint64 GuildMember;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 GuildGUID;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  SkillLineID;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< CMSG_GUILD_QUERY_RECIPES
struct GlobalGuildQueryRecipes
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_QUERY_MEMBERS_FOR_RECIPE
struct GlobalGuildQueryMembersForRecipe
{
    uint64 GuildGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  UniqueBit;          ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  SkillLineID;        ///< Offset 0x000C Type _MJVTBL_INT32
    int32  SpellID;            ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< CMSG_GUILD_QUERY_NEWS
struct GlobalGuildQueryNews
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_GET_RANKS
struct GlobalGuildGetRanks
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_NEWS_UPDATE_STICKY
struct GlobalGuildNewsUpdateSticky
{
    int32  NewsID;           ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64 GuildGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   Sticky;           ///< Offset 0x0010 Type _MJVTBL_BOOL
};

///< CMSG_GUILD_SET_ACHIEVEMENT_TRACKING
struct GlobalGuildSetAchievementTracking
{
    std::vector<int32> AchievementIDs;            ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< CMSG_GUILD_SET_FOCUSED_ACHIEVEMENT
struct GlobalGuildSetFocusedAchievement
{
    int32 AchievementID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GUILD_GET_ACHIEVEMENT_MEMBERS
struct GlobalGuildGetAchievementMembers
{
    uint64 GuildGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 PlayerGUID;           ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  AchievementID;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< CMSG_GUILD_SET_MEMBER_NOTE
struct GlobalGuildSetMemberNote
{
    struct Data_Struct
    {
        uint64      NoteeGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
        std::string Note;               ///< Offset 0x0008 Type _MJVTBL_STRING
        bool        IsPublic;           ///< Offset 0x0089 Type _MJVTBL_BOOL
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_GUILD_GET_ROSTER
struct GlobalGuildGetRoster
{
    uint64 PlayerGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 GuildGUID;         ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_UPDATE_MOTD_TEXT
struct GlobalGuildUpdateMotdText
{
    std::string MotdText;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GUILD_UPDATE_INFO_TEXT
struct GlobalGuildUpdateInfoText
{
    std::string InfoText;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_LFGUILD_GET_GUILD_POST
struct GlobalLFGuildGetGuildPost
{
};

///< CMSG_LFGUILD_GET_RECRUITS
struct GlobalLFGuildGetRecruits
{
    uint32 LastUpdate;        ///< Offset 0x0000 Type _MJVTBL_TIME_T
};

///< CMSG_LFGUILD_DECLINE_RECRUIT
struct GlobalLFGuildDeclineRecruit
{
    uint64 RecruitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_LFGUILD_GET_APPLICATIONS
struct GlobalLFGuildGetApplications
{
};

///< CMSG_LFGUILD_REMOVE_RECRUIT
struct GlobalLFGuildRemoveRecruit
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_CHALLENGE_UPDATE_REQUEST
struct GlobalGuildChallengeUpdateRequest
{
};

///< CMSG_GMSET_LFGUILD_POST_COMMENT
struct GlobalGMSetLFGuildPostComment
{
    uint64      GuildGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Comment;            ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< CMSG_GMSET_LFGUILD_RECRUIT_COMMENT
struct GlobalGMSetLFGuildRecruitComment
{
    uint64      PlayerGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Comment;            ///< Offset 0x0008 Type _MJVTBL_STRING
    uint64      GuildGUID;          ///< Offset 0x0408 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_CHANGE_NAME_REQUEST
struct GlobalGuildChangeNameRequest
{
    std::string NewName;            ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GUILD_FLAG_FOR_RENAME_CHEAT
struct GlobalGuildFlagForRenameCheat
{
    bool SetFlag;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_GUILD_SET_REPLACE_GMSECONDS
struct GlobalGuildSetReplaceGMSeconds
{
    int32 Seconds;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GUILD_SHOW_RANK_DATE
struct GlobalGuildShowRankDate
{
};

///< CMSG_GUILD_BANK_LOG_QUERY
struct GlobalGuildBankLogQuery
{
    int32 Tab;          ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GUILD_BANK_REMAINING_WITHDRAW_MONEY_QUERY
struct GlobalGuildBankRemainingWithdrawMoneyQuery
{
};

///< CMSG_GUILD_PERMISSIONS_QUERY
struct GlobalGuildPermissionsQuery
{
};

///< CMSG_GUILD_EVENT_LOG_QUERY
struct GlobalGuildEventLogQuery
{
};

///< CMSG_GUILD_BANK_SET_TAB_TEXT
struct GlobalGuildBankSetTabText
{
    int32       Tab;                ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string TabText;            ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_GUILD_BANK_TEXT_QUERY
struct GlobalGuildBankTextQuery
{
    int32 Tab;          ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GUILD_REPLACE_GUILD_MASTER
struct GlobalGuildReplaceGuildMaster
{
};

///< CMSG_GUILD_BANK_LOCK_BY_GM
struct GlobalGuildBankLockByGM
{
    std::string GuildName;          ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GUILD_BANK_UNLOCK_BY_GM
struct GlobalGuildBankUnlockByGM
{
    std::string GuildName;          ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GUILD_MEMBER_DAILY_RESET_CHEAT
struct GlobalGuildMemberDailyResetCheat
{
};

///< CMSG_GUILD_MEMBER_SEND_SO_RREQUEST
struct GlobalGuildMemberSendSoRRequest
{
    uint64      Member;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Text;               ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< CMSG_GUILD_ADD_BATTLENET_FRIEND
struct GlobalGuildAddBattlenetFriend
{
    uint32      RoleID;               ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint64      ClientToken;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool        VerifyOnly;           ///< Offset 0x0010 Type _MJVTBL_BOOL
    uint64      TargetGUID;           ///< Offset 0x0018 Type _MJVTBL_UINT64
    std::string InvitationMsg;        ///< Offset 0x0020 Type _MJVTBL_STRING
};

///< CMSG_CHALLENGE_MODE_REQUEST_MAP_STATS
struct GlobalChallengeModeRequestMapStats
{
};

///< CMSG_CHALLENGE_MODE_REQUEST_LEADERS
struct GlobalChallengeModeRequestLeaders
{
    uint32 LastGuildUpdate;        ///< Offset 0x0000 Type _MJVTBL_TIME_T
    int32  MapID;                  ///< Offset 0x0008 Type _MJVTBL_INT32
    uint32 LastRealmUpdate;        ///< Offset 0x0010 Type _MJVTBL_TIME_T
};

///< CMSG_CHALLENGE_MODE_REQUEST_LEADERS_CHEAT
struct GlobalChallengeModeRequestLeadersCheat
{
    int32 MapID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GET_CHALLENGE_MODE_REWARDS
struct GlobalGetChallengeModeRewards
{
};

///< CMSG_BLACK_MARKET_ADD_ITEMS_CHEAT
struct GlobalBlackMarketAddItemsCheat
{
};

///< CMSG_BLACK_MARKET_END_AUCTIONS_CHEAT
struct GlobalBlackMarketEndAuctionsCheat
{
    int32 MarketID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_BLACK_MARKET_DELETE_AUCTION_CHEAT
struct GlobalBlackMarketDeleteAuctionCheat
{
    int32 MarketID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_BLACK_MARKET_DELETE_ALL_AUCTIONS_CHEAT
struct GlobalBlackMarketDeleteAllAuctionsCheat
{
};

///< CMSG_CHALLENGE_MODE_DUMP_LEADERS
struct GlobalChallengeModeDumpLeaders
{
    int32 MapID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_CHALLENGE_MODE_DELETE_LEADER
struct GlobalChallengeModeDeleteLeader
{
    int32  MapID;            ///< Offset 0x0000 Type _MJVTBL_INT32
    uint32 AttemptID;        ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_INITIATE_TRADE
struct PlayerCliInitiateTrade
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BEGIN_TRADE
struct PlayerCliBeginTrade
{
};

///< CMSG_BUSY_TRADE
struct PlayerCliBusyTrade
{
};

///< CMSG_IGNORE_TRADE
struct PlayerCliIgnoreTrade
{
};

///< CMSG_ACCEPT_TRADE
struct PlayerCliAcceptTrade
{
    uint32 StateIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_UNACCEPT_TRADE
struct PlayerCliUnacceptTrade
{
};

///< CMSG_CANCEL_TRADE
struct PlayerCliCancelTrade
{
};

///< CMSG_SET_TRADE_ITEM
struct PlayerCliSetTradeItem
{
    uint8 TradeSlot;             ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8 ItemSlotInPack;        ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint8 PackSlot;              ///< Offset 0x0002 Type _MJVTBL_UINT8
};

///< SMSG_CLEAR_TRADE_ITEM
struct PlayerClearTradeItem
{
    uint8 TradeSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_SET_TRADE_GOLD
struct PlayerCliSetTradeGold
{
    uint64 Coinage;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SET_TRADE_CURRENCY
struct PlayerCliSetTradeCurrency
{
    uint32 Type;            ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 Quantity;        ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_CREATE_GUILD_PETITION_CHEAT
struct PlayerCreateGuildPetitionCheat
{
    std::string GuildName;          ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_SUBMIT_GUILD_PETITION_CHEAT
struct PlayerCliSubmitGuildPetitionCheat
{
};

///< CMSG_START_PROJECT_CHEAT
struct PlayerCliStartProjectCheat
{
    uint32 ProjectID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_ENABLE_RESEARCH_SITE_CHEAT
struct PlayerCliEnableResearchSiteCheat
{
    uint32 FieldID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 SiteID;         ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_SPAWN_ALL_RESEARCH_LOCS_CHEAT
struct PlayerCliSpawnAllResearchLocsCheat
{
    uint32 FieldID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_RANDOMIZE_SURVEY_HINT_CHEAT
struct PlayerCliRandomizeSurveyHintCheat
{
    uint8 Randomize;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_REQUEST_RESEARCH_HISTORY
struct PlayerCliRequestResearchHistory
{
};

///< CMSG_SET_PET_SLOT
struct PlayerCliSetPetSlot
{
    uint64 StableMaster;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 PetNumber;           ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8  DestSlot;            ///< Offset 0x000C Type _MJVTBL_UINT8
};

///< CMSG_SET_CURRENCY_FLAGS
struct PlayerCliSetCurrencyFlags
{
    uint32 Flags;             ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 CurrencyID;        ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_START_DRAWING_SERVER_SIDE_POS
struct PlayerCliStartDrawingServerSidePos
{
};

///< CMSG_STOP_DRAWING_SERVER_SIDE_POS
struct PlayerCliStopDrawingServerSidePos
{
};

///< CMSG_END_BATTLEGROUND_CHEAT
struct PlayerCliEndBattlegroundCheat
{
    int32 Winner;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_MAP_CONTROLLER_SET_POINTS_CHEAT
struct PlayerCliMapControllerSetPointsCheat
{
    int32 Points;        ///< Offset 0x0000 Type _MJVTBL_INT32
    uint8 Team;          ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< CMSG_MAP_CONTROLLER_ADD_POINTS_CHEAT
struct PlayerCliMapControllerAddPointsCheat
{
    int32 Points;        ///< Offset 0x0000 Type _MJVTBL_INT32
    uint8 Team;          ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< CMSG_MAP_CONTROLLER_SKIP_START_UP_CHEAT
struct PlayerCliMapControllerSkipStartUpCheat
{
};

///< CMSG_MAP_CONTROLLER_SET_GAME_TIME_CHEAT
struct PlayerCliMapControllerSetGameTimeCheat
{
    int32 Seconds;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_BFMGR_QUEUE_REQUEST
struct PlayerCliBFMgrQueueRequest
{
    uint64 QueueID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BATTLEFIELD_LEAVE
struct PlayerCliBattlefieldLeave
{
};

///< CMSG_QUERY_QUEST_COMPLETION_NPCS
struct PlayerCliQueryQuestCompletionNPCs
{
    std::vector<int32> QuestID;                   ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< CMSG_REQUEST_CEMETERY_LIST
struct PlayerCliRequestCemeteryList
{
};

///< CMSG_SET_PREFERRED_CEMETERY
struct PlayerCliSetPreferredCemetery
{
    int32 CemeteryID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_JOIN_RATED_BATTLEGROUND
struct PlayerCliJoinRatedBattleground
{
};

///< CMSG_REQUEST_AVERAGE_ITEM_LEVEL
struct PlayerCliRequestAverageItemLevel
{
};

///< CMSG_DELETE_CRITERIA_CHEAT
struct PlayerCliDeleteCriteriaCheat
{
    int32 CriteriaID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_REQUEST_HONOR_STATS
struct PlayerCliRequestHonorStats
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_PVPLOG_DATA
struct PlayerCliPVPLogData
{
};

///< CMSG_CLEAR_WEEKLY_CURRENCY_EARNED
struct PlayerCliClearWeeklyCurrencyEarned
{
};

///< CMSG_REQUEST_CATEGORY_COOLDOWNS
struct PlayerCliRequestCategoryCooldowns
{
};

///< CMSG_BATTLEFIELD_LIST
struct PlayerCliBattlefieldList
{
    int32 ListID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_CANCEL_QUEUED_SPELL
struct PlayerCliCancelQueuedSpell
{
};

///< CMSG_OBJECT_UPDATE_FAILED
struct PlayerCliObjectUpdateFailed
{
    uint64 ObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_OBJECT_UPDATE_RESCUED
struct PlayerCliObjectUpdateRescued
{
    uint64 ObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_CURRENCY_CHEAT
struct PlayerCurrencyCheat
{
    std::string CheatArg;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_RESET_WEEKLY_SPELLS
struct PlayerCliResetWeeklySpells
{
};

///< SMSG_VIOLENCE_LEVEL
struct PlayerViolenceLevel
{
    int8 ViolenceLevel;        ///< Offset 0x0000 Type _MJVTBL_INT8
};

///< SMSG_GUILD_AWARD_CHALLENGE_CHEAT
struct PlayerGuildAwardChallengeCheat
{
    int32 ChallengeType;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_USED_FOLLOW
struct PlayerCliUsedFollow
{
};

///< CMSG_RUNE_REGEN_DEBUG
struct PlayerCliRuneRegenDebug
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_NO_DAMAGE_VARIANCE
struct PlayerCliNoDamageVariance
{
    bool   Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 Target;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_STAND_STATE_CHANGE
struct PlayerCliStandStateChange
{
    uint32 StandState;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_UPDATE_MISSILE_TRAJECTORY
struct PlayerCliUpdateMissileTrajectory
{
    struct JamCliMovementStatus
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    uint64                         Guid;                                  ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint16                         MoveMsgID;                             ///< Offset 0x0008 Type _MJVTBL_UINT16
    float                          Speed;                                 ///< Offset 0x000C Type _MJVTBL_FLOAT
    Optional<JamCliMovementStatus> Status;                                ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamCliMovementStatus>::MJVTBL
    float                          Pitch;                                 ///< Offset 0x00C0 Type _MJVTBL_FLOAT
    G3D::Vector3                   ImpactPos;                             ///< Offset 0x00C4 Type _MJVTBL_V3
    int32                          SpellID;                               ///< Offset 0x00D0 Type _MJVTBL_INT32
    G3D::Vector3                   FirePos;                               ///< Offset 0x00D4 Type _MJVTBL_V3
};

///< CMSG_MISSILE_TRAJECTORY_COLLISION
struct PlayerCliMissileTrajectoryCollision
{
    uint64       CasterGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    G3D::Vector3 CollisionPos;        ///< Offset 0x0008 Type _MJVTBL_V3
    int32        SpellID;             ///< Offset 0x0014 Type _MJVTBL_INT32
    uint8        CastID;              ///< Offset 0x0018 Type _MJVTBL_UINT8
};

///< CMSG_SAVE_CUFPROFILES
struct PlayerCliSaveCUFProfiles
{
    struct JamCliCUFProfile
    {
        std::string Name;                                 ///< Offset 0x0000 Type _MJVTBL_STRING
        uint16      FrameHeight;                          ///< Offset 0x0080 Type _MJVTBL_UINT16
        uint16      FrameWidth;                           ///< Offset 0x0082 Type _MJVTBL_UINT16
        uint8       SortBy;                               ///< Offset 0x0084 Type _MJVTBL_UINT8
        uint8       HealthText;                           ///< Offset 0x0085 Type _MJVTBL_UINT8
        bool        KeepGroupsTogether;                   ///< Offset 0x0086 Type _MJVTBL_BOOL
        bool        DisplayPets;                          ///< Offset 0x0087 Type _MJVTBL_BOOL
        bool        DisplayMainTankAndAssist;             ///< Offset 0x0088 Type _MJVTBL_BOOL
        bool        DisplayHealPrediction;                ///< Offset 0x0089 Type _MJVTBL_BOOL
        bool        DisplayAggroHighlight;                ///< Offset 0x008A Type _MJVTBL_BOOL
        bool        DisplayOnlyDispellableDebuffs;        ///< Offset 0x008B Type _MJVTBL_BOOL
        bool        DisplayPowerBar;                      ///< Offset 0x008C Type _MJVTBL_BOOL
        bool        DisplayBorder;                        ///< Offset 0x008D Type _MJVTBL_BOOL
        bool        UseClassColors;                       ///< Offset 0x008E Type _MJVTBL_BOOL
        bool        HorizontalGroups;                     ///< Offset 0x008F Type _MJVTBL_BOOL
        bool        DisplayNonBossDebuffs;                ///< Offset 0x0090 Type _MJVTBL_BOOL
        bool        DynamicPosition;                      ///< Offset 0x0091 Type _MJVTBL_BOOL
        uint8       TopPoint;                             ///< Offset 0x0092 Type _MJVTBL_UINT8
        uint8       BottomPoint;                          ///< Offset 0x0093 Type _MJVTBL_UINT8
        uint8       LeftPoint;                            ///< Offset 0x0094 Type _MJVTBL_UINT8
        uint16      TopOffset;                            ///< Offset 0x0096 Type _MJVTBL_UINT16
        uint16      BottomOffset;                         ///< Offset 0x0098 Type _MJVTBL_UINT16
        uint16      LeftOffset;                           ///< Offset 0x009A Type _MJVTBL_UINT16
        bool        Locked;                               ///< Offset 0x009C Type _MJVTBL_BOOL
        bool        Shown;                                ///< Offset 0x009D Type _MJVTBL_BOOL
        bool        AutoActivate2Players;                 ///< Offset 0x009E Type _MJVTBL_BOOL
        bool        AutoActivate3Players;                 ///< Offset 0x009F Type _MJVTBL_BOOL
        bool        AutoActivate5Players;                 ///< Offset 0x00A0 Type _MJVTBL_BOOL
        bool        AutoActivate10Players;                ///< Offset 0x00A1 Type _MJVTBL_BOOL
        bool        AutoActivate15Players;                ///< Offset 0x00A2 Type _MJVTBL_BOOL
        bool        AutoActivate25Players;                ///< Offset 0x00A3 Type _MJVTBL_BOOL
        bool        AutoActivate40Players;                ///< Offset 0x00A4 Type _MJVTBL_BOOL
        bool        AutoActivateSpec1;                    ///< Offset 0x00A5 Type _MJVTBL_BOOL
        bool        AutoActivateSpec2;                    ///< Offset 0x00A6 Type _MJVTBL_BOOL
        bool        AutoActivatePvP;                      ///< Offset 0x00A7 Type _MJVTBL_BOOL
        bool        AutoActivatePvE;                      ///< Offset 0x00A8 Type _MJVTBL_BOOL
    };

    std::vector<JamCliCUFProfile> Profiles;                             ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliCUFProfile>::MJVTBL
};

///< CMSG_CONQUEST_AWARD_ARENA_CHEAT
struct PlayerCliConquestAwardArenaCheat
{
};

///< CMSG_CONQUEST_AWARD_RATED_BATTLEGROUND_CHEAT
struct PlayerCliConquestAwardRatedBattlegroundCheat
{
};

///< CMSG_CONQUEST_AWARD_RANDOM_BATTLEGROUND_CHEAT
struct PlayerCliConquestAwardRandomBattlegroundCheat
{
};

///< CMSG_CONQUEST_RESET_WEEKLY_CAP_CHEAT
struct PlayerCliConquestResetWeeklyCapCheat
{
};

///< CMSG_CLEAR_TRACKED_CURRENCY_EARNED
struct PlayerCliClearTrackedCurrencyEarned
{
};

///< CMSG_REQUEST_PVPREWARDS
struct PlayerCliRequestPVPRewards
{
};

///< CMSG_TRANSMOGRIFY_ITEMS
struct PlayerCliTransmogrifyItems
{
    struct JamTransmogrifyItem
    {
        Optional<uint64> SrcItemGUID;             ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        Optional<uint64> SrcVoidItemGUID;         ///< Offset 0x0010 Type MakeMJVTblForOptional<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
        int32            ItemID;                  ///< Offset 0x0020 Type _MJVTBL_INT32
        uint32           Slot;                    ///< Offset 0x0024 Type _MJVTBL_UINT32
    };

    uint64                           Npc;                                     ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<JamTransmogrifyItem> Items;                                   ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamTransmogrifyItem>::MJVTBL
};

///< CMSG_SHOW_PHASED_TERRAIN_HERE
struct PlayerCliShowPhasedTerrainHere
{
};

///< CMSG_SHOW_PHASES_HERE
struct PlayerCliShowPhasesHere
{
};

///< CMSG_SHOW_AREA_AURAS_HERE
struct PlayerCliShowAreaAurasHere
{
};

///< CMSG_SET_SORLOADOUT
struct PlayerCliSetSORLoadout
{
    int32 CharacterLoadoutID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SHOW_PERIODIC_AURAS
struct PlayerCliShowPeriodicAuras
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_DUMP_CONDITION_QUESTS
struct PlayerCliDumpConditionQuests
{
    int32 ConditionID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_PHASE_SHOW_AREAS
struct PlayerCliPhaseShowAreas
{
    int32 PhaseID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_QUERY_OBJ_POSITION
struct PlayerCliQueryObjPosition
{
    bool   ToClipboard;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 Guid;               ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_QUERY_OBJ_ROTATION
struct PlayerCliQueryObjRotation
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_UNLOCK_VOID_STORAGE
struct PlayerCliUnlockVoidStorage
{
    uint64 Npc;           ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_QUERY_VOID_STORAGE
struct PlayerCliQueryVoidStorage
{
    uint64 Npc;           ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_VOID_STORAGE_TRANSFER
struct PlayerCliVoidStorageTransfer
{
    std::vector<uint64> Withdrawals;                ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    std::vector<uint64> Deposits;                   ///< Offset 0x0018 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    uint64              Npc;                        ///< Offset 0x0030 Type _MJVTBL_UINT64
};

///< CMSG_SWAP_VOID_ITEM
struct PlayerCliSwapVoidItem
{
    uint64 Npc;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 VoidItem;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 DstSlot;         ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< CMSG_UNLEARN_SPECIALIZATION
struct PlayerCliUnlearnSpecialization
{
    uint8 SpecializationIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_CLEAR_RAID_MARKER
struct PlayerCliClearRaidMarker
{
    uint8 Index;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_REQUEST_GUILD_REWARDS_LIST
struct PlayerCliRequestGuildRewardsList
{
    uint32 CurrentVersion;        ///< Offset 0x0000 Type _MJVTBL_TIME_T
};

///< CMSG_REQUEST_GUILD_PARTY_STATE
struct PlayerCliRequestGuildPartyState
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_QUERY_COUNTDOWN_TIMER
struct PlayerCliQueryCountdownTimer
{
    uint32 TimerType;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_SET_SPECIALIZATION
struct PlayerCliSetSpecialization
{
    uint32 SpecGroupIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_LEARN_TALENTS
struct PlayerCliLearnTalents
{
    std::vector<uint16> Talents;                    ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
};

///< CMSG_LEARN_PET_SPECIALIZATION_GROUP
struct PlayerCliLearnPetSpecializationGroup
{
    uint64 PetGUID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 SpecGroupIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_CANCEL_MOD_SPEED_NO_CONTROL_AURAS
struct PlayerCliCancelModSpeedNoControlAuras
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_CANCEL_AURA
struct PlayerCliCancelAura
{
    uint64 CasterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_CANCEL_AURA_CHEAT
struct PlayerCliCancelAuraCheat
{
    int32 SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_DEBUG_GAME_EVENTS_START
struct PlayerCliDebugGameEventsStart
{
};

///< CMSG_DEBUG_GAME_EVENTS_STOP
struct PlayerCliDebugGameEventsStop
{
};

///< CMSG_DEBUG_GAME_EVENTS_TOGGLE
struct PlayerCliDebugGameEventsToggle
{
};

///< CMSG_ENABLE_DEBUG_PERF
struct PlayerCliEnableDebugPerf
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< SMSG_ADD_GUILD_XPCHEAT
struct PlayerAddGuildXPCheat
{
    int32 Xp;           ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_DEBUG_DRAW_SERVER
struct PlayerCliDebugDrawServer
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_DEBUG_AREA_TRIGGERS
struct PlayerCliDebugAreaTriggers
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_PURGE_DELETED_ITEMS
struct PlayerCliPurgeDeletedItems
{
};

///< CMSG_RECHARGE_CHEAT
struct PlayerCliRechargeCheat
{
};

///< CMSG_DECHARGE_CHEAT
struct PlayerCliDechargeCheat
{
};

///< CMSG_SET_POWER_CHEAT
struct PlayerCliSetPowerCheat
{
    int32 Power;            ///< Offset 0x0000 Type _MJVTBL_INT32
    uint8 PowerType;        ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< CMSG_CREATE_SCENE_OBJECT_CHEAT
struct PlayerCliCreateSceneObjectCheat
{
    struct ScriptData_Struct
    {
        std::string Data;               ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    int32             EntryID;                  ///< Offset 0x0000 Type _MJVTBL_INT32
    ScriptData_Struct ScriptData;               ///< Offset 0x0004 Type _MJVTBL_STRUCT
};

///< CMSG_DESTROY_SCENE_OBJECT_CHEAT
struct PlayerCliDestroySceneObjectCheat
{
    uint64 SceneObjGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SEND_SCENE_OBJECT_EVENT_CHEAT
struct PlayerCliSendSceneObjectEventCheat
{
    struct SceneEvent_Struct
    {
        std::string EventScript;        ///< Offset 0x0000 Type _MJVTBL_STRING
    };

    uint64            SceneObjGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    SceneEvent_Struct SceneEvent;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< CMSG_SEND_IS_QUEST_COMPLETE_CHEAT
struct PlayerCliSendIsQuestCompleteCheat
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_CALCULATE_VEHICLE_SEAT_OFFSET_CHEAT
struct PlayerCliCalculateVehicleSeatOffsetCheat
{
    uint64       PassengerGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    G3D::Vector3 PassengerRawPos;        ///< Offset 0x0008 Type _MJVTBL_V3
};

///< CMSG_NEUTRAL_PLAYER_SELECT_FACTION
struct PlayerCliNeutralPlayerSelectFaction
{
    int32 Faction;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GRANT_TITLE_CHEAT
struct PlayerCliGrantTitleCheat
{
    int32       TitleID;            ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string TitleName;          ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_REMOVE_TITLE_CHEAT
struct PlayerCliRemoveTitleCheat
{
    std::string TitleName;          ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       TitleID;            ///< Offset 0x0100 Type _MJVTBL_INT32
};

///< CMSG_AREA_TRIGGER
struct PlayerCliAreaTrigger
{
    bool  Entered;              ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool  FromClient;           ///< Offset 0x0001 Type _MJVTBL_BOOL
    int32 AreaTriggerID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_DESTROY_MAIL_CHEAT
struct PlayerCliDestroyMailCheat
{
};

///< CMSG_BATTLE_PETS_RECONVERT
struct PlayerCliBattlePetsReconvert
{
};

///< CMSG_PET_BATTLE_REQUEST_WILD
struct PlayerCliPetBattleRequestWild
{
    struct Location_Struct
    {
        int32        LocationResult;            ///< Offset 0x0000 Type _MJVTBL_INT32
        G3D::Vector3 BattleOrigin;              ///< Offset 0x0004 Type _MJVTBL_V3
        float        BattleFacing;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
        G3D::Vector3 PlayerPositions[2];        ///< Offset 0x0014 Type MakeMJVTblForFixedArrayOf<C3Vector,2,&(MJVTBL_V3)>::MJVTBL
    };

    Location_Struct Location;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64          TargetGUID;             ///< Offset 0x0030 Type _MJVTBL_UINT64
};

///< CMSG_PET_BATTLE_WILD_LOCATION_FAIL
struct PlayerCliPetBattleWildLocationFail
{
    uint64       TargetGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    G3D::Vector3 PlayerPos;           ///< Offset 0x0008 Type _MJVTBL_V3
};

///< CMSG_PET_BATTLE_REQUEST_PVP
struct PlayerCliPetBattleRequestPVP
{
    struct Location_Struct
    {
        int32        LocationResult;            ///< Offset 0x0000 Type _MJVTBL_INT32
        G3D::Vector3 BattleOrigin;              ///< Offset 0x0004 Type _MJVTBL_V3
        float        BattleFacing;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
        G3D::Vector3 PlayerPositions[2];        ///< Offset 0x0014 Type MakeMJVTblForFixedArrayOf<C3Vector,2,&(MJVTBL_V3)>::MJVTBL
    };

    Location_Struct Location;                   ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64          OpponentCharacterID;        ///< Offset 0x0030 Type _MJVTBL_UINT64
};

///< CMSG_PET_BATTLE_REQUEST_UPDATE
struct PlayerCliPetBattleRequestUpdate
{
    bool   Canceled;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 TargetGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_JOIN_PET_BATTLE_QUEUE
struct PlayerCliJoinPetBattleQueue
{
};

///< CMSG_LEAVE_PET_BATTLE_QUEUE
struct PlayerCliLeavePetBattleQueue
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    Ticket_Struct Ticket;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_BATTLE_PET_UPDATE_NOTIFY
struct PlayerCliBattlePetUpdateNotify
{
    uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_PET_BATTLE_QUIT_NOTIFY
struct PlayerCliPetBattleQuitNotify
{
};

///< CMSG_PET_BATTLE_FINAL_NOTIFY
struct PlayerCliPetBattleFinalNotify
{
};

///< CMSG_PET_BATTLE_SCRIPT_ERROR_NOTIFY
struct PlayerCliPetBattleScriptErrorNotify
{
};

///< CMSG_ITEM_UPGRADE_CHEAT
struct PlayerCliItemUpgradeCheat
{
    int32 ItemID;               ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 ItemUpgradeID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_ITEM_BIND_CHEAT
struct PlayerCliItemBindCheat
{
    bool  Bind;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 ItemID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_ITEM_EFFECT_VALIDATE_CHEAT
struct PlayerCliItemEffectValidateCheat
{
};

///< CMSG_UNDRESS
struct PlayerCliUndress
{
};

///< CMSG_GOD_MODE
struct PlayerCliGodMode
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_PET_GOD_MODE
struct PlayerCliPetGodMode
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_IGNORE_REQUIREMENTS_CHEAT
struct PlayerCliIgnoreRequirementsCheat
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_IGNORE_DIMINISHING_RETURNS_CHEAT
struct PlayerCliIgnoreDiminishingReturnsCheat
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_LEVEL_CHEAT
struct PlayerCliLevelCheat
{
    uint8 Level;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_EFFECTIVE_LEVEL_CHEAT
struct PlayerCliEffectiveLevelCheat
{
    uint8 Level;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_PET_LEVEL_CHEAT
struct PlayerCliPetLevelCheat
{
    uint8 Level;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_CAGE_BATTLE_PET
struct PlayerCliCageBattlePet
{
    uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SET_STAT_CHEAT
struct PlayerCliSetStatCheat
{
    uint32 Value;         ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8  Stat;          ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< CMSG_USE_SKILL_CHEAT
struct PlayerCliUseSkillCheat
{
    uint32 SkillID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 Count;          ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_SET_SKILL_CHEAT
struct PlayerCliSetSkillCheat
{
    uint32 Level;          ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 SkillID;        ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_SET_FACTION_CHEAT
struct PlayerCliSetFactionCheat
{
    uint32 FactionID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32  Level;            ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_SET_FACTION_USING_ENGLISH_CHEAT
struct PlayerCliSetFactionUsingEnglishCheat
{
    std::string Arguments;          ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_RESET_FACTION_CHEAT
struct PlayerCliResetFactionCheat
{
};

///< CMSG_FORCE_ACTION
struct PlayerCliForceAction
{
    uint8 Category;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    bool  OnSelf;          ///< Offset 0x0001 Type _MJVTBL_BOOL
    bool  Set;             ///< Offset 0x0002 Type _MJVTBL_BOOL
};

///< CMSG_FORCE_ACTION_SHOW
struct PlayerCliForceActionShow
{
};

///< CMSG_START_QUEST
struct PlayerCliStartQuest
{
    bool  AbandonExisting;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 QuestID;                ///< Offset 0x0004 Type _MJVTBL_INT32
    bool  AutoAccept;             ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< CMSG_SET_EXPLORE
struct PlayerCliSetExplore
{
    uint32 AreaID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_SET_ALL_EXPLORED
struct PlayerCliSetAllExplored
{
};

///< CMSG_RESET_DAILY_QUEST
struct PlayerCliResetDailyQuest
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_RESET_WEEKLY_QUEST
struct PlayerCliResetWeeklyQuest
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_RESET_MONTHLY_QUEST
struct PlayerCliResetMonthlyQuest
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_RESET_YEARLY_QUEST
struct PlayerCliResetYearlyQuest
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_RESPAWN_LAST_PET
struct PlayerCliRespawnLastPet
{
};

///< CMSG_RESET_CHALLENGE_MODE
struct PlayerCliResetChallengeMode
{
};

///< CMSG_FINISH_CHALLENGE_MODE_CHEAT
struct PlayerCliFinishChallengeModeCheat
{
    uint32 Time;          ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_REQUEST_FORCED_REACTIONS
struct PlayerCliRequestForcedReactions
{
};

///< CMSG_INCREASE_CAST_TIME_FOR_SPELL
struct PlayerCliIncreaseCastTimeForSpell
{
    int32 SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_RESPEC_TALENT_CHEAT
struct PlayerCliRespecTalentCheat
{
    int32 Id;                ///< Offset 0x0000 Type _MJVTBL_INT32
    uint8 RespecType;        ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< CMSG_PET_RESPEC_CHEAT
struct PlayerCliPetRespecCheat
{
};

///< CMSG_CONFIRM_RESPEC_WIPE
struct PlayerCliConfirmRespecWipe
{
    uint64 RespecMaster;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  RespecType;          ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_LOOT_UNIT
struct PlayerCliLootUnit
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_LOOT_MONEY
struct PlayerCliLootMoney
{
};

///< CMSG_LOOT_ITEM
struct PlayerCliLootItem
{
    struct JamLootRequest
    {
        uint64 Object;            ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint8  LootListID;        ///< Offset 0x0008 Type _MJVTBL_UINT8
    };

    std::vector<JamLootRequest> Loot;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamLootRequest>::MJVTBL
};

///< CMSG_MASTER_LOOT_ITEM
struct PlayerCliMasterLootItem
{
    struct JamLootRequest
    {
        uint64 Object;            ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint8  LootListID;        ///< Offset 0x0008 Type _MJVTBL_UINT8
    };

    std::vector<JamLootRequest> Loot;                               ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamLootRequest>::MJVTBL
    uint64                      Target;                             ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< CMSG_DO_MASTER_LOOT_ROLL
struct PlayerCliDoMasterLootRoll
{
    uint64 Object;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  LootListID;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_CANCEL_MASTER_LOOT_ROLL
struct PlayerCliCancelMasterLootRoll
{
    uint64 Object;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  LootListID;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_LOOT_RELEASE
struct PlayerCliLootRelease
{
    uint64 Object;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_LOOT_ROLL
struct PlayerCliLootRoll
{
    uint64 LootObj;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  LootListID;        ///< Offset 0x0008 Type _MJVTBL_UINT8
    uint8  RollType;          ///< Offset 0x0009 Type _MJVTBL_UINT8
};

///< CMSG_CHALLENGE_MODE_CHEAT
struct PlayerCliChallengeModeCheat
{
    int32 ItemLevel;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_PUSH_ITEMS_FROM_TREASURE
struct PlayerCliPushItemsFromTreasure
{
    struct LootItemContext_Struct
    {
        uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    };

    uint32                 TreasureID;                    ///< Offset 0x0000 Type _MJVTBL_UINT32
    LootItemContext_Struct LootItemContext;               ///< Offset 0x0004 Type _MJVTBL_STRUCT
};

///< CMSG_DISABLE_AELOOTING
struct PlayerCliDisableAELooting
{
    bool Disable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SCENARIO_ADVANCE_STEP
struct PlayerCliScenarioAdvanceStep
{
};

///< CMSG_SCENARIO_SET_STEP
struct PlayerCliScenarioSetStep
{
    int32 StepID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SCENARIO_COMPLETE
struct PlayerCliScenarioComplete
{
};

///< CMSG_SCENARIO_RESTART
struct PlayerCliScenarioRestart
{
};

///< CMSG_SCENARIO_START
struct PlayerCliScenarioStart
{
    int32 ScenarioID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SCENARIO_PAUSE
struct PlayerCliScenarioPause
{
};

///< CMSG_SCENARIO_RESUME
struct PlayerCliScenarioResume
{
};

///< CMSG_SCENE_PLAYBACK_COMPLETE
struct PlayerCliScenePlaybackComplete
{
    uint32 SceneInstanceID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_SCENE_PLAYBACK_CANCELED
struct PlayerCliScenePlaybackCanceled
{
    uint32 SceneInstanceID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_SCENE_TRIGGER_EVENT
struct PlayerCliSceneTriggerEvent
{
    uint32      SceneInstanceID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string Event;                  ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_SET_DIFFICULTY_ID
struct PlayerCliSetDifficultyID
{
    uint32 DifficultyID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_KEYBOUND_OVERRIDE
struct PlayerCliKeyboundOverride
{
    uint16 OverrideID;        ///< Offset 0x0000 Type _MJVTBL_UINT16
};

///< CMSG_PET_BATTLE_QUEUE_PROPOSE_MATCH_RESULT
struct PlayerCliPetBattleQueueProposeMatchResult
{
    bool Accepted;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_MAIL_DELETE
struct PlayerCliMailDelete
{
    int32 DeleteReason;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 MailID;              ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_SET_ACHIEVEMENTS_HIDDEN
struct PlayerCliSetAchievementsHidden
{
    bool Hidden;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_UPGRADE_ITEM
struct PlayerCliUpgradeItem
{
    uint64 ItemMaster;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 ItemGUID;             ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  ContainerSlot;        ///< Offset 0x0010 Type _MJVTBL_INT32
    int32  UpgradeID;            ///< Offset 0x0014 Type _MJVTBL_INT32
    int32  Slot;                 ///< Offset 0x0018 Type _MJVTBL_INT32
};

///< CMSG_SET_IGNORE_REALM_BUNDLE_PORTS
struct PlayerCliSetIgnoreRealmBundlePorts
{
    bool Value;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_DELETE_ACCOUNT_ACHIEVEMENTS
struct PlayerCliDeleteAccountAchievements
{
};

///< CMSG_COMPLETE_ACCOUNT_ACHIEVEMENT
struct PlayerCliCompleteAccountAchievement
{
    int32 AchievementID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_COMPLETE_GUILD_ACHIEVEMENT
struct PlayerCliCompleteGuildAchievement
{
    int32 AchievementID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_WIPE_ALL_ACCOUNT_ACHIEVEMENTS
struct PlayerCliWipeAllAccountAchievements
{
};

///< CMSG_UNLEARN_MOUNT
struct PlayerCliUnlearnMount
{
    int32 MountID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_REMOVE_ITEM_COLLECTION_ITEM
struct PlayerCliRemoveItemCollectionItem
{
    int32 ItemCollectionType;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 ItemID;                    ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_REQUEST_AREA_SHARE_INFO
struct PlayerCliRequestAreaShareInfo
{
};

///< CMSG_SET_MIN_ITEM_LEVEL
struct PlayerCliSetMinItemLevel
{
    int32 MinLevel;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SET_MAX_ITEM_LEVEL
struct PlayerCliSetMaxItemLevel
{
    int32 MaxLevel;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_RESTOCK_VENDOR_CHEAT
struct PlayerCliRestockVendorCheat
{
    uint64 Target;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   StockAll;        ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< CMSG_REQUEST_VEHICLE_EXIT
struct PlayerCliRequestVehicleExit
{
};

///< CMSG_REQUEST_VEHICLE_PREV_SEAT
struct PlayerCliRequestVehiclePrevSeat
{
};

///< CMSG_REQUEST_VEHICLE_NEXT_SEAT
struct PlayerCliRequestVehicleNextSeat
{
};

///< CMSG_REQUEST_VEHICLE_SWITCH_SEAT
struct PlayerCliRequestVehicleSwitchSeat
{
    uint64 Vehicle;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  SeatIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_RIDE_VEHICLE_INTERACT
struct PlayerCliRideVehicleInteract
{
    uint64 Vehicle;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_EJECT_PASSENGER
struct PlayerCliEjectPassenger
{
    uint64 Passenger;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_CLEAR_LFRLOOT_LOCKS
struct PlayerCliClearLFRLootLocks
{
};

///< CMSG_CREATE_SHADOW_PLAYERS
struct PlayerCliCreateShadowPlayers
{
    uint16 NumCopies;        ///< Offset 0x0000 Type _MJVTBL_UINT16
    int8   Type;             ///< Offset 0x0002 Type _MJVTBL_INT8
};

///< CMSG_DESTROY_SHADOW_PLAYERS
struct PlayerCliDestroyShadowPlayers
{
};

///< CMSG_GET_POWER_REGEN_CHEAT
struct PlayerCliGetPowerRegenCheat
{
    uint64 Target;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  PowerType;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GET_HEALTH_REGEN_CHEAT
struct PlayerCliGetHealthRegenCheat
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_USE_CRITTER_ITEM
struct PlayerCliUseCritterItem
{
    uint64 ItemGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_INVIS_DUMP_CHEAT
struct PlayerCliInvisDumpCheat
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_INVIS_DETECT_DUMP_CHEAT
struct PlayerCliInvisDetectDumpCheat
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SET_ACCOUNT_CRITERIA
struct PlayerCliSetAccountCriteria
{
    uint64 Quantity;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  CriteriaID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_SET_GUILD_CRITERIA
struct PlayerCliSetGuildCriteria
{
    uint64 Quantity;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  CriteriaID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_MATCHES_CONDITION
struct PlayerCliMatchesCondition
{
    int32 ConditionID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_LFGCOMPLETE_DUNGEON
struct PlayerCliLFGCompleteDungeon
{
};

///< CMSG_DELETE_ACCOUNT_ACHIEVEMENT
struct PlayerCliDeleteAccountAchievement
{
    int32 AchievementID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SET_HEALTH_SAFE
struct PlayerCliSetHealthSafe
{
    uint64 Target;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  ProcType;           ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  Health;             ///< Offset 0x000C Type _MJVTBL_INT32
    int32  ProcSubType;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< CMSG_SET_RULESET_OVERRIDE
struct PlayerCliSetRulesetOverride
{
    int32 RulesetOverride;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SET_RULESET_QUERY
struct PlayerCliSetRulesetQuery
{
};

///< CMSG_DEBUG_AREA_TRIGGER_EVENTS
struct PlayerCliDebugAreaTriggerEvents
{
    int32 Level;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_DEBUG_AREA_TRIGGER_UNIT_EVENTS
struct PlayerCliDebugAreaTriggerUnitEvents
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_DEBUG_AREA_TRIGGER_SERVER_SHAPES
struct PlayerCliDebugAreaTriggerServerShapes
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SHOW_ZONES_CHEAT
struct PlayerCliShowZonesCheat
{
    bool Show;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_CDBLOOKUP
struct PlayerCliCDBLookup
{
    std::string SearchString;                     ///< Offset 0x0000 Type _MJVTBL_STRING
    bool        ReturnLocalizedStrings;           ///< Offset 0x0100 Type _MJVTBL_BOOL
    int32       Locale;                           ///< Offset 0x0104 Type _MJVTBL_INT32
    bool        OnlySearchLocalizedFields;        ///< Offset 0x0108 Type _MJVTBL_BOOL
};

///< CMSG_GAME_SPEED_SET
struct PlayerCliGameSpeedSet
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< CMSG_SERVER_TIME
struct PlayerCliServerTime
{
};

///< CMSG_LEARN_SPELL_CHEAT
struct PlayerCliLearnSpellCheat
{
    int32 SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_MAKE_MONSTER_ATTACK_GUID
struct PlayerCliMakeMonsterAttackGUID
{
    uint64 Victim;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Attacker;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_ATTACK_SWING
struct PlayerCliAttackSwing
{
    uint64 Victim;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_ATTACK_STOP
struct PlayerCliAttackStop
{
};

///< CMSG_SAVE_PLAYER
struct PlayerCliSavePlayer
{
};

///< CMSG_SET_DEATH_BIND_POINT
struct PlayerCliSetDeathBindPoint
{
};

///< CMSG_DESTROY_MONSTER
struct PlayerCliDestroyMonster
{
    uint64 Monster;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_DEBUG_ACTIONS_START
struct PlayerCliDebugActionsStart
{
    uint64 Target;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpawnGroupID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  CreatureID;          ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_DEBUG_ACTIONS_STOP
struct PlayerCliDebugActionsStop
{
};

///< CMSG_FORCE_SAY_CHEAT
struct PlayerCliForceSayCheat
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  TextID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_CREATE_MONSTER
struct PlayerCliCreateMonster
{
    int32        EntryID;             ///< Offset 0x0000 Type _MJVTBL_INT32
    G3D::Vector3 Offset;              ///< Offset 0x0004 Type _MJVTBL_V3
};

///< CMSG_TARGET_CAST
struct PlayerCliTargetCast
{
    int32  SpellID;               ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64 CastTarget;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 TargetGUID;            ///< Offset 0x0010 Type _MJVTBL_UINT64
    bool   CreatureAICast;        ///< Offset 0x0018 Type _MJVTBL_BOOL
};

///< CMSG_TARGET_SCRIPT_CAST
struct PlayerCliTargetScriptCast
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_LIST_TARGETS
struct PlayerCliListTargets
{
    uint64 UnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_CANCEL_CHANNELLING
struct PlayerCancelChannelling
{
    int32 ChannelSpell;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_XP_CHEAT
struct PlayerCliXpCheat
{
    int32 DesiredXP;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_UNIT_ANIM_TIER_CHEAT
struct PlayerCliUnitAnimTierCheat
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  NewTier;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GMTEACH_SPELL
struct PlayerCliGMTeachSpell
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GMUNTEACH_SPELL
struct PlayerCliGMUnteachSpell
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_CANCEL_GROWTH_AURA
struct PlayerCliCancelGrowthAura
{
};

///< CMSG_QUERY_CREATURE
struct PlayerCliQueryCreature
{
    uint32 CreatureID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_QUERY_GAME_OBJECT
struct PlayerCliQueryGameObject
{
    uint64 Guid;                ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 GameObjectID;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_QUERY_NPCTEXT
struct PlayerCliQueryNPCText
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 TextID;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_QUERY_QUEST_INFO
struct PlayerCliQueryQuestInfo
{
    uint64 QuestGiver;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 QuestID;           ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_QUERY_PAGE_TEXT
struct PlayerCliQueryPageText
{
    uint64 ItemGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 PageTextID;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_QUERY_PET_NAME
struct PlayerCliQueryPetName
{
    uint64 PetID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 UnitGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_QUERY_BATTLE_PET_NAME
struct PlayerCliQueryBattlePetName
{
    uint64 BattlePetID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 UnitGUID;           ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_QUERY_PETITION
struct PlayerCliQueryPetition
{
    uint64 ItemGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 PetitionID;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_CHANGE_CELL_ZONE
struct PlayerCliChangeCellZone
{
    uint8 ZoneID;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_DEBUG_PASSIVE_AURA
struct PlayerCliDebugPassiveAura
{
    int32  SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64 Target;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   Add;            ///< Offset 0x0010 Type _MJVTBL_BOOL
};

///< CMSG_PERFORM_ACTION_SET_CHEAT
struct PlayerCliPerformActionSetCheat
{
    uint64 Target;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  ActionSetID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_REQUEST_PLAYED_TIME
struct PlayerCliRequestPlayedTime
{
    bool TriggerScriptEvent;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_RUN_SCRIPT
struct PlayerCliRunScript
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    uint64      Target;             ///< Offset 0x0400 Type _MJVTBL_UINT64
};

///< CMSG_CREATE_ITEM_CHEAT
struct PlayerCliCreateItemCheat
{
    bool        BattlePayLocked;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool        AutoEquip;              ///< Offset 0x0001 Type _MJVTBL_BOOL
    std::string Context;                ///< Offset 0x0002 Type _MJVTBL_STRING
    int32       Count;                  ///< Offset 0x0404 Type _MJVTBL_INT32
    uint32      EntryID;                ///< Offset 0x0408 Type _MJVTBL_UINT32
};

///< CMSG_SET_TITLE
struct PlayerCliSetTitle
{
    int32 Title;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_CANCEL_MOUNT_AURA
struct PlayerCliCancelMountAura
{
};

///< CMSG_MOUNT_SPECIAL_ANIM
struct PlayerCliMountSpecialAnim
{
};

///< CMSG_COOLDOWN_CHEAT
struct PlayerCliCooldownCheat
{
    uint64 Guid;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  CheatCode;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_DEBUG_AISTATE
struct PlayerCliDebugAIState
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_ADVANCE_SPAWN_TIME
struct PlayerCliAdvanceSpawnTime
{
    uint32 Seconds;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_QUERY_VEHICLE_STATUS
struct PlayerCliQueryVehicleStatus
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GAME_TIME_SET
struct PlayerCliGameTimeSet
{
    uint32 NewTime;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_PURGE_BUYBACK
struct PlayerCliPurgeBuyback
{
};

///< CMSG_GM_VISION
struct PlayerCliGmVision
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_GMPHASE_DUMP
struct PlayerCliGMPhaseDump
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GMSPAWN_TRACKER_DUMP
struct PlayerCliGMSpawnTrackerDump
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_DESTROY_ITEM
struct PlayerCliDestroyItem
{
    uint32 Count;              ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8  SlotNum;            ///< Offset 0x0004 Type _MJVTBL_UINT8
    uint8  ContainerId;        ///< Offset 0x0005 Type _MJVTBL_UINT8
};

///< CMSG_SUMMON_MOB
struct PlayerCliSummonMob
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_UBER_INVIS
struct PlayerCliUberInvis
{
    int8 Action;        ///< Offset 0x0000 Type _MJVTBL_INT8
};

///< CMSG_CREATE_GAME_OBJECT
struct PlayerCliCreateGameObject
{
    int32 EntryID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GET_MIRROR_IMAGE_DATA
struct PlayerCliGetMirrorImageData
{
    uint64 UnitGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  DisplayID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_USE_ITEM
struct PlayerCliUseItem
{
    struct Cast_Struct
    {
        struct Target_Struct
        {
            struct JamLocation
            {
                uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3 Location;            ///< Offset 0x0008 Type _MJVTBL_V3
            };

            uint32                Flags;                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint64                Unit;                         ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64                Item;                         ///< Offset 0x0010 Type _MJVTBL_UINT64
            Optional<JamLocation> SrcLocation;                  ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            Optional<JamLocation> DstLocation;                  ///< Offset 0x0038 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            std::string           Name;                         ///< Offset 0x0058 Type _MJVTBL_STRING
        };

        struct MissileTrajectory_Struct
        {
            float Pitch;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
            float Speed;        ///< Offset 0x0004 Type _MJVTBL_FLOAT
        };

        struct JamCliMovementStatus
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        struct JamSpellWeight
        {
            SPELLWEIGHT_TOKEN_TYPES Type;                           ///< Offset 0x0000 Type _MJVTBL_SPELLWEIGHT_TOKEN_TYPES
            int32                   ID;                             ///< Offset 0x0004 Type _MJVTBL_INT32
            uint32                  Quantity;                       ///< Offset 0x0008 Type _MJVTBL_UINT32
        };

        uint8                          CastID;                                ///< Offset 0x0000 Type _MJVTBL_UINT8
        int32                          SpellID;                               ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                          Misc;                                  ///< Offset 0x0008 Type _MJVTBL_INT32
        uint8                          SendCastFlags;                         ///< Offset 0x000C Type _MJVTBL_UINT8
        Target_Struct                  Target;                                ///< Offset 0x0010 Type _MJVTBL_STRUCT
        MissileTrajectory_Struct       MissileTrajectory;                     ///< Offset 0x00E8 Type _MJVTBL_STRUCT
        Optional<JamCliMovementStatus> MoveUpdate;                            ///< Offset 0x00F0 Type MakeMJVTblForOptionalStruct<JamCliMovementStatus>::MJVTBL
        std::vector<JamSpellWeight>    Weight;                                ///< Offset 0x01A0 Type MakeMJVTblForArrayOfStruct<JamSpellWeight>::MJVTBL
    };

    uint8       PackSlot;           ///< Offset 0x0000 Type _MJVTBL_UINT8
    Cast_Struct Cast;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint8       Slot;               ///< Offset 0x01C0 Type _MJVTBL_UINT8
    uint64      CastItem;           ///< Offset 0x01C8 Type _MJVTBL_UINT64
};

///< CMSG_USE_TOY
struct PlayerCliUseToy
{
    struct Cast_Struct
    {
        struct Target_Struct
        {
            struct JamLocation
            {
                uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3 Location;            ///< Offset 0x0008 Type _MJVTBL_V3
            };

            uint32                Flags;                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint64                Unit;                         ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64                Item;                         ///< Offset 0x0010 Type _MJVTBL_UINT64
            Optional<JamLocation> SrcLocation;                  ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            Optional<JamLocation> DstLocation;                  ///< Offset 0x0038 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            std::string           Name;                         ///< Offset 0x0058 Type _MJVTBL_STRING
        };

        struct MissileTrajectory_Struct
        {
            float Pitch;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
            float Speed;        ///< Offset 0x0004 Type _MJVTBL_FLOAT
        };

        struct JamCliMovementStatus
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        struct JamSpellWeight
        {
            SPELLWEIGHT_TOKEN_TYPES Type;                           ///< Offset 0x0000 Type _MJVTBL_SPELLWEIGHT_TOKEN_TYPES
            int32                   ID;                             ///< Offset 0x0004 Type _MJVTBL_INT32
            uint32                  Quantity;                       ///< Offset 0x0008 Type _MJVTBL_UINT32
        };

        uint8                          CastID;                                ///< Offset 0x0000 Type _MJVTBL_UINT8
        int32                          SpellID;                               ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                          Misc;                                  ///< Offset 0x0008 Type _MJVTBL_INT32
        uint8                          SendCastFlags;                         ///< Offset 0x000C Type _MJVTBL_UINT8
        Target_Struct                  Target;                                ///< Offset 0x0010 Type _MJVTBL_STRUCT
        MissileTrajectory_Struct       MissileTrajectory;                     ///< Offset 0x00E8 Type _MJVTBL_STRUCT
        Optional<JamCliMovementStatus> MoveUpdate;                            ///< Offset 0x00F0 Type MakeMJVTblForOptionalStruct<JamCliMovementStatus>::MJVTBL
        std::vector<JamSpellWeight>    Weight;                                ///< Offset 0x01A0 Type MakeMJVTblForArrayOfStruct<JamSpellWeight>::MJVTBL
    };

    Cast_Struct Cast;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    int32       ItemID;             ///< Offset 0x01B8 Type _MJVTBL_INT32
};

///< CMSG_PET_CAST_SPELL
struct PlayerCliPetCastSpell
{
    struct Cast_Struct
    {
        struct Target_Struct
        {
            struct JamLocation
            {
                uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3 Location;            ///< Offset 0x0008 Type _MJVTBL_V3
            };

            uint32                Flags;                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint64                Unit;                         ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64                Item;                         ///< Offset 0x0010 Type _MJVTBL_UINT64
            Optional<JamLocation> SrcLocation;                  ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            Optional<JamLocation> DstLocation;                  ///< Offset 0x0038 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            std::string           Name;                         ///< Offset 0x0058 Type _MJVTBL_STRING
        };

        struct MissileTrajectory_Struct
        {
            float Pitch;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
            float Speed;        ///< Offset 0x0004 Type _MJVTBL_FLOAT
        };

        struct JamCliMovementStatus
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        struct JamSpellWeight
        {
            SPELLWEIGHT_TOKEN_TYPES Type;                           ///< Offset 0x0000 Type _MJVTBL_SPELLWEIGHT_TOKEN_TYPES
            int32                   ID;                             ///< Offset 0x0004 Type _MJVTBL_INT32
            uint32                  Quantity;                       ///< Offset 0x0008 Type _MJVTBL_UINT32
        };

        uint8                          CastID;                                ///< Offset 0x0000 Type _MJVTBL_UINT8
        int32                          SpellID;                               ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                          Misc;                                  ///< Offset 0x0008 Type _MJVTBL_INT32
        uint8                          SendCastFlags;                         ///< Offset 0x000C Type _MJVTBL_UINT8
        Target_Struct                  Target;                                ///< Offset 0x0010 Type _MJVTBL_STRUCT
        MissileTrajectory_Struct       MissileTrajectory;                     ///< Offset 0x00E8 Type _MJVTBL_STRUCT
        Optional<JamCliMovementStatus> MoveUpdate;                            ///< Offset 0x00F0 Type MakeMJVTblForOptionalStruct<JamCliMovementStatus>::MJVTBL
        std::vector<JamSpellWeight>    Weight;                                ///< Offset 0x01A0 Type MakeMJVTblForArrayOfStruct<JamSpellWeight>::MJVTBL
    };

    uint64      PetGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    Cast_Struct Cast;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< CMSG_CAST_SPELL
struct PlayerCliCastSpell
{
    struct Cast_Struct
    {
        struct Target_Struct
        {
            struct JamLocation
            {
                uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3 Location;            ///< Offset 0x0008 Type _MJVTBL_V3
            };

            uint32                Flags;                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            uint64                Unit;                         ///< Offset 0x0008 Type _MJVTBL_UINT64
            uint64                Item;                         ///< Offset 0x0010 Type _MJVTBL_UINT64
            Optional<JamLocation> SrcLocation;                  ///< Offset 0x0018 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            Optional<JamLocation> DstLocation;                  ///< Offset 0x0038 Type MakeMJVTblForOptionalStruct<JamLocation>::MJVTBL
            std::string           Name;                         ///< Offset 0x0058 Type _MJVTBL_STRING
        };

        struct MissileTrajectory_Struct
        {
            float Pitch;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
            float Speed;        ///< Offset 0x0004 Type _MJVTBL_FLOAT
        };

        struct JamCliMovementStatus
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        struct JamSpellWeight
        {
            SPELLWEIGHT_TOKEN_TYPES Type;                           ///< Offset 0x0000 Type _MJVTBL_SPELLWEIGHT_TOKEN_TYPES
            int32                   ID;                             ///< Offset 0x0004 Type _MJVTBL_INT32
            uint32                  Quantity;                       ///< Offset 0x0008 Type _MJVTBL_UINT32
        };

        uint8                          CastID;                                ///< Offset 0x0000 Type _MJVTBL_UINT8
        int32                          SpellID;                               ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                          Misc;                                  ///< Offset 0x0008 Type _MJVTBL_INT32
        uint8                          SendCastFlags;                         ///< Offset 0x000C Type _MJVTBL_UINT8
        Target_Struct                  Target;                                ///< Offset 0x0010 Type _MJVTBL_STRUCT
        MissileTrajectory_Struct       MissileTrajectory;                     ///< Offset 0x00E8 Type _MJVTBL_STRUCT
        Optional<JamCliMovementStatus> MoveUpdate;                            ///< Offset 0x00F0 Type MakeMJVTblForOptionalStruct<JamCliMovementStatus>::MJVTBL
        std::vector<JamSpellWeight>    Weight;                                ///< Offset 0x01A0 Type MakeMJVTblForArrayOfStruct<JamSpellWeight>::MJVTBL
    };

    Cast_Struct Cast;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_CANCEL_CAST
struct PlayerCliCancelCast
{
    int32 SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    uint8 CastID;         ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< CMSG_FORCE_ANIM
struct PlayerCliForceAnim
{
    uint64      Target;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Arguments;          ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< CMSG_CHOICE_RESPONSE
struct PlayerCliChoiceResponse
{
    int32 ChoiceID;          ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 ResponseID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_SET_LFGBONUS_FACTION_ID
struct PlayerCliSetLFGBonusFactionID
{
    int32 FactionID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_REQUEST_LFGLIST_BLACKLIST
struct PlayerCliRequestLFGListBlacklist
{
};

///< CMSG_CHEAT_TEST_JAM_FACTORY
struct PlayerCliCheatTestJamFactory
{
    uint32 Msgid;         ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_CHEAT_SET_UNIT_LOOT_SEED
struct PlayerCliCheatSetUnitLootSeed
{
    uint64 Unit;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 LootSeed;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_CHEAT_ITEM_LEVEL_DELTA
struct PlayerCliCheatItemLevelDelta
{
    int32 ItemLevelDelta;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_DIRTY_MONEY
struct PlayerCliDirtyMoney
{
    uint64 Amount;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_SAVE_GUILD_EMBLEM
struct PlayerSaveGuildEmblem
{
    uint64 Vendor;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Bg;            ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  EStyle;        ///< Offset 0x000C Type _MJVTBL_INT32
    int32  EColor;        ///< Offset 0x0010 Type _MJVTBL_INT32
    int32  BColor;        ///< Offset 0x0014 Type _MJVTBL_INT32
    int32  BStyle;        ///< Offset 0x0018 Type _MJVTBL_INT32
};

///< SMSG_TABARD_VENDOR_ACTIVATE
struct PlayerTabardVendorActivate
{
    uint64 Vendor;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_PROGRESSIVE_EVENT_CHEAT
struct PlayerProgressiveEventCheat
{
    PROGRESSIVE_EVENT_CHEAT Type;                           ///< Offset 0x0000 Type _MJVTBL_PROGRESSIVE_EVENT_CHEAT
    int32                   ItemID;                         ///< Offset 0x0004 Type _MJVTBL_INT32
    int32                   Count;                          ///< Offset 0x0008 Type _MJVTBL_INT32
    int32                   EventID;                        ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_TOGGLE_PVP
struct PlayerCliTogglePVP
{
};

///< CMSG_SET_PVP
struct PlayerCliSetPVP
{
    bool EnablePVP;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SCENARIO_SHUTDOWN
struct PlayerCliScenarioShutdown
{
};

///< CMSG_DUMP_ENCOUNTER
struct PlayerCliDumpEncounter
{
    Optional<int32> DungeonEncounterID;        ///< Offset 0x0000 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
};

///< CMSG_SET_ENCOUNTER_VAR
struct PlayerCliSetEncounterVar
{
    int32       DungeonEncounterID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string VarName;                   ///< Offset 0x0004 Type _MJVTBL_STRING
    bool        Attempt;                   ///< Offset 0x0044 Type _MJVTBL_BOOL
    float       VarValue;                  ///< Offset 0x0048 Type _MJVTBL_FLOAT
};

///< CMSG_BATTLEMASTER_HELLO
struct PlayerCliBattlemasterHello
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_DEBUG_GROUP_SIZE
struct PlayerCliDebugGroupSize
{
    uint32 OverrideGroupSize;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_DEBUG_TIME_WALKER_LEVELS
struct PlayerCliDebugTimeWalkerLevels
{
    uint32 PlayerLevel;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 ItemLevel;          ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_SET_ENCOUNTER_PROFILER
struct PlayerCliSetEncounterProfiler
{
    bool        Enable;             ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32       EncounterID;        ///< Offset 0x0004 Type _MJVTBL_INT32
    std::string MailTo;             ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< CMSG_REQUEST_CONQUEST_FORMULA_CONSTANTS
struct PlayerCliRequestConquestFormulaConstants
{
};

///< CMSG_SET_ADVANCED_COMBAT_LOGGING
struct PlayerCliSetAdvancedCombatLogging
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SPAWNED_MOCHEAT
struct PlayerCliSpawnedMOCheat
{
    float        Angle;                 ///< Offset 0x0000 Type _MJVTBL_FLOAT
    bool         Enabled;               ///< Offset 0x0004 Type _MJVTBL_BOOL
    std::string  FileName;              ///< Offset 0x0005 Type _MJVTBL_STRING
    G3D::Vector3 Pos;                   ///< Offset 0x0048 Type _MJVTBL_V3
    uint32       SpawnedMOIndex;        ///< Offset 0x0054 Type _MJVTBL_UINT32
};

///< CMSG_RESET_PERSONAL_PHASES_CHEAT
struct PlayerCliResetPersonalPhasesCheat
{
    bool                AllPhases;                  ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::vector<uint16> PhaseIDs;                   ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
};

///< CMSG_SEAMLESS_TRANSFER_CHEAT
struct PlayerCliSeamlessTransferCheat
{
    int32 TransferID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_CREATE_CHEAT
struct PlayerCliGarrisonCreateCheat
{
    int32 GarrSiteID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_DELETE_CHEAT
struct PlayerCliGarrisonDeleteCheat
{
    int32 GarrSiteID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_SET_LEVEL_CHEAT
struct PlayerCliGarrisonSetLevelCheat
{
    int32 Level;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_UPGRADE_GARRISON
struct PlayerCliUpgradeGarrison
{
    uint64 NpcGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GARRISON_PLACE_BUILDING_CHEAT
struct PlayerCliGarrisonPlaceBuildingCheat
{
    bool  Activate;              ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 BuildingID;            ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 PlotInstanceID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_REMOVE_BUILDING_CHEAT
struct PlayerCliGarrisonRemoveBuildingCheat
{
    int32 PlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_UPGRADE_BUILDING_CHEAT
struct PlayerCliGarrisonUpgradeBuildingCheat
{
    int32 PlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Immediate;             ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< CMSG_GARRISON_LEARN_BUILDING_SPECIALIZATION_CHEAT
struct PlayerCliGarrisonLearnBuildingSpecializationCheat
{
    int32 SpecializationID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_SET_ACTIVE_BUILDING_SPECIALIZATION
struct PlayerCliGarrisonSetActiveBuildingSpecialization
{
    uint64 NpcGUID;                 ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  PlotInstanceID;          ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  SpecializationID;        ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_GARRISON_SET_ACTIVE_BUILDING_SPECIALIZATION_CHEAT
struct PlayerCliGarrisonSetActiveBuildingSpecializationCheat
{
    int32 PlotInstanceID;          ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 SpecializationID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_GET_GARRISON_INFO
struct PlayerCliGetGarrisonInfo
{
};

///< CMSG_GARRISON_LEARN_BLUEPRINT_CHEAT
struct PlayerCliGarrisonLearnBlueprintCheat
{
    int32 BuildingID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_REQUEST_BLUEPRINT_AND_SPECIALIZATION_DATA
struct PlayerCliGarrisonRequestBlueprintAndSpecializationData
{
};

///< CMSG_GARRISON_PURCHASE_BUILDING
struct PlayerCliGarrisonPurchaseBuilding
{
    uint64 NpcGUID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  BuildingID;            ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  PlotInstanceID;        ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_GARRISON_SET_BUILDING_ACTIVE
struct PlayerCliGarrisonSetBuildingActive
{
    int32 PlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_FORCE_BUILDING_ACTIVE
struct PlayerCliGarrisonForceBuildingActive
{
    int32 PlotInstanceID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_PORT_CHEAT
struct PlayerCliGarrisonPortCheat
{
};

///< CMSG_GARRISON_ADD_FOLLOWER_XPCHEAT
struct PlayerCliGarrisonAddFollowerXPCheat
{
    uint64 FollowerDBID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  XpAmount;            ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_SET_FOLLOWER_ITEM_LEVEL_CHEAT
struct PlayerCliGarrisonSetFollowerItemLevelCheat
{
    uint64 FollowerDBID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  ItemLevelArmor;         ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  ItemLevelWeapon;        ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_GARRISON_ASSIGN_FOLLOWER_TO_BUILDING
struct PlayerCliGarrisonAssignFollowerToBuilding
{
    uint64 NpcGUID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 FollowerDBID;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  PlotInstanceID;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_REMOVE_FOLLOWER_FROM_BUILDING
struct PlayerCliGarrisonRemoveFollowerFromBuilding
{
    uint64 NpcGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 FollowerDBID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_OPEN_SHIPMENT_NPC
struct PlayerCliOpenShipmentNPC
{
    uint64 NpcGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GET_SHIPMENT_INFO
struct PlayerCliGetShipmentInfo
{
    uint64 NpcGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GET_SHIPMENTS_OF_TYPE
struct PlayerCliGetShipmentsOfType
{
    int32 ContainerID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_CREATE_SHIPMENT
struct PlayerCliCreateShipment
{
    uint64 NpcGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GET_SHIPMENTS_OF_TYPE_CHEAT
struct PlayerCliGetShipmentsOfTypeCheat
{
    int32 ContainerID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_CREATE_SHIPMENT_CHEAT
struct PlayerCliCreateShipmentCheat
{
    int32 ShipmentRecID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_COMPLETE_SHIPMENT_CHEAT
struct PlayerCliCompleteShipmentCheat
{
    uint64 ShipmentID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_COMPLETE_SHIPMENT
struct PlayerCliCompleteShipment
{
    uint64 ShipmentID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 NpcGUID;           ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_COMPLETE_ALL_READY_SHIPMENTS
struct PlayerCliCompleteAllReadyShipments
{
    uint64 ShipmentGameObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GDF_SIM_CHEAT
struct PlayerCliGdfSimCheat
{
    struct GdfSimPlayer
    {
        uint64 Guid;                  ///< Offset 0x0000 Type _MJVTBL_UINT64
        float  GdfRating;             ///< Offset 0x0008 Type _MJVTBL_FLOAT
        float  GdfVariance;           ///< Offset 0x000C Type _MJVTBL_FLOAT
        int32  PersonalRating;        ///< Offset 0x0010 Type _MJVTBL_INT32
        bool   Team;                  ///< Offset 0x0014 Type _MJVTBL_BOOL
    };

    float                     GdfUnitBlend;                     ///< Offset 0x0000 Type _MJVTBL_FLOAT
    float                     GdfToEloMultiplier;               ///< Offset 0x0004 Type _MJVTBL_FLOAT
    float                     Beta2;                            ///< Offset 0x0008 Type _MJVTBL_FLOAT
    int32                     NoShowPenalty0;                   ///< Offset 0x000C Type _MJVTBL_INT32
    int32                     NoShowPenalty1;                   ///< Offset 0x0010 Type _MJVTBL_INT32
    float                     MinVariance;                      ///< Offset 0x0014 Type _MJVTBL_FLOAT
    bool                      Winner;                           ///< Offset 0x0018 Type _MJVTBL_BOOL
    std::vector<GdfSimPlayer> Players;                          ///< Offset 0x0020 Type MakeMJVTblForArrayOfStruct<GdfSimPlayer>::MJVTBL
    float                     Mean;                             ///< Offset 0x0038 Type _MJVTBL_FLOAT
    bool                      BoostType;                        ///< Offset 0x003C Type _MJVTBL_BOOL
};

///< CMSG_SHOW_ADVERTS_CHEAT
struct PlayerCliShowAdvertsCheat
{
    uint32 DetailLevel;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    float  Radius;             ///< Offset 0x0004 Type _MJVTBL_FLOAT
    bool   On;                 ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< CMSG_SHOW_BRAIN
struct PlayerCliShowBrain
{
    int32  Level;         ///< Offset 0x0000 Type _MJVTBL_INT32
    bool   All;           ///< Offset 0x0004 Type _MJVTBL_BOOL
    uint64 Target;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_SHOW_GARRISON_TRANSFER
struct PlayerCliShowGarrisonTransfer
{
};

///< CMSG_TEST128_BIT_GUIDS
struct PlayerCliTest128BitGuids
{
    uint64 Guid[2];           ///< Offset 0x0000 Type _MJVTBL_UINT128
};

///< CMSG_GET_TROPHY_LIST
struct PlayerCliGetTrophyList
{
    int32 TrophyTypeID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_REPLACE_TROPHY
struct PlayerCliReplaceTrophy
{
    uint64 TrophyGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  NewTrophyID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_ADD_UNIQUE_FOLLOWER_CHEAT
struct PlayerCliGarrisonAddUniqueFollowerCheat
{
    int32 GarrFollowerID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_REMOVE_FOLLOWER_CHEAT
struct PlayerCliGarrisonRemoveFollowerCheat
{
    uint64 FollowerDBID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GARRISON_LIST_FOLLOWERS_CHEAT
struct PlayerCliGarrisonListFollowersCheat
{
};

///< CMSG_GARRISON_ADD_MISSION_CHEAT
struct PlayerCliGarrisonAddMissionCheat
{
    int32 MissionRecID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_START_MISSION
struct PlayerCliGarrisonStartMission
{
    uint64              NpcGUID;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<uint64> FollowerDBIDs;              ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    int32               MissionRecID;               ///< Offset 0x0020 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_COMPLETE_MISSION
struct PlayerCliGarrisonCompleteMission
{
    uint64 NpcGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  MissionRecID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_COMPLETE_MISSION_CHEAT
struct PlayerCliGarrisonCompleteMissionCheat
{
    int32 MissionRecID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GARRISON_MISSION_BONUS_ROLL
struct PlayerCliGarrisonMissionBonusRoll
{
    uint64 NpcGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  MissionRecID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  BonusIndex;          ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_ITEM_TEXT_QUERY
struct PlayerCliItemTextQuery
{
    uint64 Id;            ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_OPEN_ITEM
struct PlayerCliOpenItem
{
    uint8 Slot;            ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8 PackSlot;        ///< Offset 0x0001 Type _MJVTBL_UINT8
};

///< CMSG_READ_ITEM
struct PlayerCliReadItem
{
    uint8 Slot;            ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8 PackSlot;        ///< Offset 0x0001 Type _MJVTBL_UINT8
};

///< CMSG_CHANGE_BAG_SLOT_FLAG
struct PlayerCliChangeBagSlotFlag
{
    bool   On;                  ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32 FlagToChange;        ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32 BagIndex;            ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_SET_BACKPACK_AUTOSORT_DISABLED
struct PlayerCliSetBackpackAutosortDisabled
{
    bool Disable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SET_BANK_AUTOSORT_DISABLED
struct PlayerCliSetBankAutosortDisabled
{
    bool Disable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SET_BANK_BAG_SLOT_AUTOSORT_DISABLED
struct PlayerCliSetBankBagSlotAutosortDisabled
{
    bool   Disable;         ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32 BagIndex;        ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_SORT_BAGS
struct PlayerCliSortBags
{
};

///< CMSG_SORT_BANK_BAGS
struct PlayerCliSortBankBags
{
};

///< CMSG_START_CONVERSATION
struct PlayerCliStartConversation
{
    int32 ConversationID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_STOP_CONVERSATION
struct PlayerCliStopConversation
{
    uint64 Conversation;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_DEBUG_TREASURE
struct PlayerCliDebugTreasure
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_ITEM_BONUS_DEBUG
struct PlayerCliItemBonusDebug
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SET_WORLD_STATE
struct PlayerCliSetWorldState
{
    int32 VariableID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Value;             ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_SEND_EVENT
struct PlayerCliSendEvent
{
    uint32 EventID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_SEND_LOCAL_EVENT
struct PlayerCliSendLocalEvent
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  EventID;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_SEND_GENERAL_TRIGGER
struct PlayerCliSendGeneralTrigger
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  EventID;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_SEND_COMBAT_TRIGGER
struct PlayerCliSendCombatTrigger
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  EventID;           ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_SEND_TEXT_EMOTE
struct PlayerCliSendTextEmote
{
    uint64 Target;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  EmoteID;           ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  SoundIndex;        ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_SET_SHEATHED
struct PlayerCliSetSheathed
{
    int32 CurrentSheathState;        ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Animate;                   ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< CMSG_TEST_DROP_RATE
struct PlayerCliTestDropRate
{
    uint32           TreasureID;              ///< Offset 0x0000 Type _MJVTBL_UINT32
    Optional<uint32> ItemQuality;             ///< Offset 0x0004 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    Optional<int32>  ClassID;                 ///< Offset 0x000C Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
    Optional<uint32> ItemID;                  ///< Offset 0x0014 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    Optional<int32>  SubClassID;              ///< Offset 0x001C Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
    int32            LootLevel;               ///< Offset 0x0024 Type _MJVTBL_INT32
};

///< CMSG_PET_SET_ACTION
struct PlayerCliPetSetAction
{
    uint64 PetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Action;         ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 Index;          ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< CMSG_PET_ACTION
struct PlayerCliPetAction
{
    uint64       PetGUID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64       TargetGUID;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    G3D::Vector3 ActionPosition;        ///< Offset 0x0010 Type _MJVTBL_V3
    uint32       Action;                ///< Offset 0x001C Type _MJVTBL_UINT32
};

///< CMSG_PET_STOP_ATTACK
struct PlayerCliPetStopAttack
{
    uint64 PetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_PET_ABANDON
struct PlayerCliPetAbandon
{
    uint64 Pet;           ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_PET_CANCEL_AURA
struct PlayerCliPetCancelAura
{
    uint64 PetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SpellID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_PET_SPELL_AUTOCAST
struct PlayerCliPetSpellAutocast
{
    uint64 PetGUID;                ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   AutocastEnabled;        ///< Offset 0x0008 Type _MJVTBL_BOOL
    int32  SpellID;                ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_REQUEST_PET_INFO
struct PlayerCliRequestPetInfo
{
};

///< CMSG_REQUEST_STABLED_PETS
struct PlayerCliRequestStabledPets
{
    uint64 StableMaster;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_TALK_TO_GOSSIP
struct PlayerCliTalkToGossip
{
    uint64 GossipUnit;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GOSSIP_SELECT_OPTION
struct PlayerCliGossipSelectOption
{
    uint64      GossipUnit;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32       GossipIndex;          ///< Offset 0x0008 Type _MJVTBL_INT32
    int32       GossipID;             ///< Offset 0x000C Type _MJVTBL_INT32
    std::string PromotionCode;        ///< Offset 0x0010 Type _MJVTBL_STRING
};

///< CMSG_SPELL_CLICK
struct PlayerCliSpellClick
{
    uint64 SpellClickUnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   TryAutoDismount;           ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< CMSG_QUEST_GIVER_HELLO
struct PlayerCliQuestGiverHello
{
    uint64 QuestGiverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_QUEST_GIVER_QUERY_QUEST
struct PlayerCliQuestGiverQueryQuest
{
    int32  QuestID;               ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64 QuestGiverGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   RespondToGiver;        ///< Offset 0x0010 Type _MJVTBL_BOOL
};

///< CMSG_QUEST_GIVER_AUTO_LAUNCH
struct PlayerCliQuestGiverAutoLaunch
{
    uint64 QuestGiverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  QuestID;               ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_QUESTGIVER_ACCEPT_QUEST
struct PlayerCliQuestGiverAcceptQuest
{
    int32  QuestID;               ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64 QuestGiverGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   StartCheat;            ///< Offset 0x0010 Type _MJVTBL_BOOL
};

///< CMSG_QUEST_GIVER_COMPLETE_QUEST
struct PlayerCliQuestGiverCompleteQuest
{
    bool   FromScript;            ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32  QuestID;               ///< Offset 0x0004 Type _MJVTBL_INT32
    uint64 QuestGiverGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_QUEST_GIVER_CANCEL
struct PlayerCliQuestGiverCancel
{
    uint64 QuestGiverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  QuestID;               ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_QUEST_GIVER_CHOOSE_REWARD
struct PlayerCliQuestGiverChooseReward
{
    uint64 QuestGiverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  QuestID;               ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  ItemChoiceID;          ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_QUEST_GIVER_REQUEST_REWARD
struct PlayerCliQuestGiverRequestReward
{
    uint64 QuestGiverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  QuestID;               ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_QUEST_GIVER_STATUS_QUERY
struct PlayerCliQuestGiverStatusQuery
{
    uint64 QuestGiverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_QUEST_GIVER_STATUS_MULTIPLE_QUERY
struct PlayerCliQuestGiverStatusMultipleQuery
{
};

///< CMSG_QUEST_CONFIRM_ACCEPT
struct PlayerCliQuestConfirmAccept
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_PUSH_QUEST_TO_PARTY
struct PlayerCliPushQuestToParty
{
    int32 QuestID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_QUEST_PUSH_RESULT
struct PlayerCliQuestPushResult
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  QuestID;           ///< Offset 0x0008 Type _MJVTBL_INT32
    uint8  Result;            ///< Offset 0x000C Type _MJVTBL_UINT8
};

///< CMSG_LIST_INVENTORY
struct PlayerCliListInventory
{
    uint64 VendorGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SELL_ITEM
struct PlayerCliSellItem
{
    uint64 ItemGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 VendorGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  Amount;            ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< CMSG_BUY_ITEM
struct PlayerCliBuyItem
{
    struct Item_Struct
    {
        struct JamItemBonusInstanceData
        {
            struct Context_Struct
            {
                uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            };

            struct Bonuses_Struct
            {
                std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
            };

            Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        };

        int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
        Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
        Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
    };

    uint64      VendorGUID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    Item_Struct Item;                 ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint32      Muid;                 ///< Offset 0x0068 Type _MJVTBL_UINT32
    uint32      Slot;                 ///< Offset 0x006C Type _MJVTBL_UINT32
    uint8       ItemType;             ///< Offset 0x0070 Type _MJVTBL_UINT8
    int32       Quantity;             ///< Offset 0x0074 Type _MJVTBL_INT32
    uint64      ContainerGUID;        ///< Offset 0x0078 Type _MJVTBL_UINT64
};

///< CMSG_BUY_BACK_ITEM
struct PlayerCliBuyBackItem
{
    uint64 VendorGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Slot;              ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_TAXI_CLEAR_ALL_NODES
struct PlayerCliTaxiClearAllNodes
{
};

///< CMSG_TAXI_ENABLE_ALL_NODES
struct PlayerCliTaxiEnableAllNodes
{
};

///< CMSG_TAXI_SHOW_NODES
struct PlayerCliTaxiShowNodes
{
};

///< CMSG_TAXI_NODE_STATUS_QUERY
struct PlayerCliTaxiNodeStatusQuery
{
    uint64 UnitGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_ENABLE_TAXI_NODE
struct PlayerCliEnableTaxiNode
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_TAXI_QUERY_AVAILABLE_NODES
struct PlayerCliTaxiQueryAvailableNodes
{
    uint64 Unit;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_ACTIVATE_TAXI
struct PlayerCliActivateTaxi
{
    uint64 Vendor;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 StartNode;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 DestNode;         ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< CMSG_ACTIVATE_TAXI_EXPRESS
struct PlayerCliActivateTaxiExpress
{
    uint64              Unit;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<uint32> PathNodes;                  ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
};

///< CMSG_TRAINER_LIST
struct PlayerCliTrainerList
{
    uint64 TrainerGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_TRAINER_BUY_SELL
struct PlayerCliTrainerBuySell
{
    uint64 TrainerGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  TrainerID;          ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  SpellID;            ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_SPIRIT_HEALER_ACTIVATE
struct PlayerCliSpiritHealerActivate
{
    uint64 Healer;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_AREA_SPIRIT_HEALER_QUERY
struct PlayerCliAreaSpiritHealerQuery
{
    uint64 HealerGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_AREA_SPIRIT_HEALER_QUEUE
struct PlayerCliAreaSpiritHealerQueue
{
    uint64 HealerGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BINDER_ACTIVATE
struct PlayerCliBinderActivate
{
    uint64 Binder;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BANKER_ACTIVATE
struct PlayerCliBankerActivate
{
    uint64 Banker;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BUY_BANK_SLOT
struct PlayerCliBuyBankSlot
{
    uint64 Banker;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_BANK_ACTIVATE
struct PlayerCliGuildBankActivate
{
    uint64 Banker;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   FullUpdate;        ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< CMSG_GUILD_BANK_SWAP_ITEMS
struct PlayerCliGuildBankSwapItems
{
    uint8  BankSlot;                 ///< Offset 0x0000 Type _MJVTBL_UINT8
    int32  StackCount;               ///< Offset 0x0004 Type _MJVTBL_INT32
    uint64 Banker;                   ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   AutoStore;                ///< Offset 0x0010 Type _MJVTBL_BOOL
    uint8  ContainerItemSlot;        ///< Offset 0x0011 Type _MJVTBL_UINT8
    uint32 ItemID;                   ///< Offset 0x0014 Type _MJVTBL_UINT32
    uint8  ToSlot;                   ///< Offset 0x0018 Type _MJVTBL_UINT8
    uint8  BankTab1;                 ///< Offset 0x0019 Type _MJVTBL_UINT8
    uint8  BankTab;                  ///< Offset 0x001A Type _MJVTBL_UINT8
    int32  BankItemCount;            ///< Offset 0x001C Type _MJVTBL_INT32
    uint8  ContainerSlot;            ///< Offset 0x0020 Type _MJVTBL_UINT8
    uint32 ItemID1;                  ///< Offset 0x0024 Type _MJVTBL_UINT32
    bool   BankOnly;                 ///< Offset 0x0028 Type _MJVTBL_BOOL
    uint8  BankSlot1;                ///< Offset 0x0029 Type _MJVTBL_UINT8
};

///< CMSG_GUILD_BANK_QUERY_TAB
struct PlayerCliGuildBankQueryTab
{
    uint64 Banker;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   FullUpdate;        ///< Offset 0x0008 Type _MJVTBL_BOOL
    uint8  Tab;               ///< Offset 0x0009 Type _MJVTBL_UINT8
};

///< CMSG_GUILD_BANK_BUY_TAB
struct PlayerCliGuildBankBuyTab
{
    uint64 Banker;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  BankTab;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_GUILD_BANK_UPDATE_TAB
struct PlayerCliGuildBankUpdateTab
{
    std::string Icon;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0101 Type _MJVTBL_STRING
    uint8       BankTab;            ///< Offset 0x0142 Type _MJVTBL_UINT8
    uint64      Banker;             ///< Offset 0x0148 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_BANK_DEPOSIT_MONEY
struct PlayerCliGuildBankDepositMoney
{
    uint64 Money;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Banker;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_BANK_WITHDRAW_MONEY
struct PlayerCliGuildBankWithdrawMoney
{
    uint64 Banker;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Money;         ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_PETITION_SHOW_LIST
struct PlayerCliPetitionShowList
{
    uint64 PetitionUnit;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_PETITION_BUY
struct PlayerCliPetitionBuy
{
    uint64      Unit;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Title;              ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< CMSG_PETITION_SHOW_SIGNATURES
struct PlayerCliPetitionShowSignatures
{
    uint64 Item;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_AUCTION_HELLO_REQUEST
struct PlayerCliAuctionHelloRequest
{
    uint64 Auctioneer;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_AUCTION_SELL_ITEM
struct PlayerCliAuctionSellItem
{
    struct JamClientAuctionItemForSale
    {
        uint64 Guid;            ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 UseCount;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    };

    uint64                                   BuyoutPrice;                                     ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::vector<JamClientAuctionItemForSale> Items;                                           ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<JamClientAuctionItemForSale>::MJVTBL
    uint64                                   Auctioneer;                                      ///< Offset 0x0020 Type _MJVTBL_UINT64
    uint64                                   MinBid;                                          ///< Offset 0x0028 Type _MJVTBL_UINT64
    uint32                                   RunTime;                                         ///< Offset 0x0030 Type _MJVTBL_UINT32
};

///< CMSG_AUCTION_REMOVE_ITEM
struct PlayerCliAuctionRemoveItem
{
    uint64 Auctioneer;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  AuctionItemID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_AUCTION_LIST_ITEMS
struct PlayerCliAuctionListItems
{
    uint64      Auctioneer;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8       SortCount;           ///< Offset 0x0008 Type _MJVTBL_UINT8
    uint8       MaxLevel;            ///< Offset 0x0009 Type _MJVTBL_UINT8
    uint32      Offset;              ///< Offset 0x000C Type _MJVTBL_UINT32
    int32       ItemClass;           ///< Offset 0x0010 Type _MJVTBL_INT32
    uint8       MinLevel;            ///< Offset 0x0014 Type _MJVTBL_UINT8
    int32       InvType;             ///< Offset 0x0018 Type _MJVTBL_INT32
    int32       Quality;             ///< Offset 0x001C Type _MJVTBL_INT32
    int32       ItemSubclass;        ///< Offset 0x0020 Type _MJVTBL_INT32
    bool        ExactMatch;          ///< Offset 0x0024 Type _MJVTBL_BOOL
    std::string Name;                ///< Offset 0x0025 Type _MJVTBL_STRING
    bool        OnlyUsable;          ///< Offset 0x0125 Type _MJVTBL_BOOL
    uint8 *     Sorts;               ///< Offset 0x0128 Type _MJVTBL_NOT_IMPLEMENTED
};

///< CMSG_AUCTION_REPLICATE_ITEMS
struct PlayerCliAuctionReplicateItems
{
    uint64 Auctioneer;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 ChangeNumberCursor;           ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 Count;                        ///< Offset 0x000C Type _MJVTBL_UINT32
    uint32 ChangeNumberGlobal;           ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint32 ChangeNumberTombstone;        ///< Offset 0x0014 Type _MJVTBL_UINT32
};

///< CMSG_AUCTION_LIST_OWNER_ITEMS
struct PlayerCliAuctionListOwnerItems
{
    uint64 Auctioneer;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Offset;            ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_AUCTION_LIST_BIDDER_ITEMS
struct PlayerCliAuctionListBidderItems
{
    uint32              Offset;                     ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<uint32> AuctionItemIDs;             ///< Offset 0x0008 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    uint64              Auctioneer;                 ///< Offset 0x0020 Type _MJVTBL_UINT64
};

///< CMSG_AUCTION_PLACE_BID
struct PlayerCliAuctionPlaceBid
{
    uint64 Auctioneer;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 BidAmount;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  AuctionItemID;        ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< CMSG_AUCTION_LIST_PENDING_SALES
struct PlayerCliAuctionListPendingSales
{
};

///< CMSG_ACTIVE_PVPCHEAT
struct PlayerCliActivePVPCheat
{
};

///< CMSG_DISABLE_PVPCHEAT
struct PlayerCliDisablePVPCheat
{
};

///< CMSG_QUERY_TIME
struct PlayerCliQueryTime
{
};

///< CMSG_LOGOUT_REQUEST
struct PlayerCliLogoutRequest
{
};

///< CMSG_LOGOUT_CANCEL
struct PlayerCliLogoutCancel
{
};

///< CMSG_LOGOUT_INSTANT
struct PlayerCliLogoutInstant
{
};

///< CMSG_BOOT_ME
struct PlayerCliBootMe
{
};

///< CMSG_RECLAIM_CORPSE
struct PlayerCliReclaimCorpse
{
    uint64 CorpseGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_TRIGGER_MOVIE_CHEAT
struct PlayerCliTriggerMovieCheat
{
    uint32 MovieID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_COMPLETE_MOVIE
struct PlayerCliCompleteMovie
{
};

///< CMSG_SET_FACTION_AT_WAR
struct PlayerCliSetFactionAtWar
{
    uint8 FactionIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_SET_FACTION_NOT_AT_WAR
struct PlayerCliSetFactionNotAtWar
{
    uint8 FactionIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_SET_FACTION_INACTIVE
struct PlayerCliSetFactionInactive
{
    bool  State;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 Index;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_SET_WATCHED_FACTION
struct PlayerCliSetWatchedFaction
{
    int32 Index;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_DUEL_RESPONSE
struct PlayerCliDuelResponse
{
    uint64 ArbiterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   Accepted;           ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< CMSG_UNLEARN_SPELL
struct PlayerCliUnlearnSpell
{
    int32 SpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_UNLEARN_SKILL
struct PlayerCliUnlearnSkill
{
    int32 SkillLine;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_AICHEAT
struct PlayerCliAICheat
{
    bool On;          ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_CANCEL_AUTO_REPEAT_SPELL
struct PlayerCliCancelAutoRepeatSpell
{
};

///< CMSG_FAR_SIGHT
struct PlayerCliFarSight
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_ENABLE_DAMAGE_LOG
struct PlayerCliEnableDamageLog
{
    bool On;          ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SET_DURABILITY_CHEAT
struct PlayerCliSetDurabilityCheat
{
    uint64 Item;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Durability;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_SOCKET_GEMS
struct PlayerCliSocketGems
{
    uint64 GemItem[3];        ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOf<unsignedlonglong,3,&(MJVTBL_UINT64)>::MJVTBL
    uint64 ItemGuid;          ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< CMSG_REPAIR_ITEM
struct PlayerCliRepairItem
{
    uint64 NpcGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   UseGuildBank;        ///< Offset 0x0008 Type _MJVTBL_BOOL
    uint64 ItemGUID;            ///< Offset 0x0010 Type _MJVTBL_UINT64
};

///< CMSG_SHOWING_HELM
struct PlayerCliShowingHelm
{
    bool ShowHelm;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SHOWING_CLOAK
struct PlayerCliShowingCloak
{
    bool ShowCloak;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_WEATHER_SPEED_CHEAT
struct PlayerCliWeatherSpeedCheat
{
    float NewSpeed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< CMSG_GAME_OBJ_USE
struct PlayerCliGameObjUse
{
    uint64 GameObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GAME_OBJ_REPORT_USE
struct PlayerCliGameObjReportUse
{
    uint64 GameObjectGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_IGNORE_KNOCKBACK_CHEAT
struct PlayerCliIgnoreKnockbackCheat
{
};

///< CMSG_IGNORE_MOVEMENT_FORCES_CHEAT
struct PlayerCliIgnoreMovementForcesCheat
{
};

///< CMSG_CANCEL_TEMP_ENCHANTMENT
struct PlayerCliCancelTempEnchantment
{
    int32 Slot;         ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SET_TAXI_BENCHMARK_MODE
struct PlayerCliSetTaxiBenchmarkMode
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_REPORT_PV_PPLAYER_AFK
struct PlayerCliReportPvPPlayerAFK
{
    uint64 Offender;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_ALTER_APPEARANCE
struct PlayerCliAlterAppearance
{
    int32 NewFacialHair;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 NewSkinColor;         ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 NewHairColor;         ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 NewHairStyle;         ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_OPT_OUT_OF_LOOT
struct PlayerCliOptOutOfLoot
{
    bool OptOutOfLoot;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_GRANT_LEVEL
struct PlayerCliGrantLevel
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SET_GRANTABLE_LEVELS
struct PlayerCliSetGrantableLevels
{
    uint32 Levels;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_ACCEPT_LEVEL_GRANT
struct PlayerCliAcceptLevelGrant
{
    uint64 Granter;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_TOTEM_DESTROYED
struct PlayerCliTotemDestroyed
{
    uint64 TotemGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  Slot;             ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_DISMISS_CRITTER
struct PlayerCliDismissCritter
{
    uint64 CritterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SET_RUNE_COUNT
struct PlayerCliSetRuneCount
{
    uint8 Frost;         ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8 Unholy;        ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint8 Blood;         ///< Offset 0x0002 Type _MJVTBL_UINT8
};

///< CMSG_SET_RUNE_COOLDOWN
struct PlayerCliSetRuneCooldown
{
    float Blood;            ///< Offset 0x0000 Type _MJVTBL_FLOAT
    float Unholy;           ///< Offset 0x0004 Type _MJVTBL_FLOAT
    float Chromatic;        ///< Offset 0x0008 Type _MJVTBL_FLOAT
    float Frost;            ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< CMSG_NO_SPELL_VARIANCE
struct PlayerCliNoSpellVariance
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   Enable;        ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< CMSG_QUERY_SERVER_BUCK_DATA
struct PlayerCliQueryServerBuckData
{
    bool   AllClusters;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint8  ClusterID;          ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint32 RequestID;          ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint8  Mpid;               ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_CLEAR_SERVER_BUCK_DATA
struct PlayerCliClearServerBuckData
{
};

///< CMSG_DUMP_OBJECTS
struct PlayerCliDumpObjects
{
    uint32 Filter;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_SET_GLYPH_SLOT
struct PlayerCliSetGlyphSlot
{
    uint16 GlyphSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT16
    uint8  Slot;             ///< Offset 0x0002 Type _MJVTBL_UINT8
};

///< CMSG_SET_GLYPH_CHEAT
struct PlayerCliSetGlyphCheat
{
    uint16 Glyph;         ///< Offset 0x0000 Type _MJVTBL_UINT16
    uint8  Slot;          ///< Offset 0x0002 Type _MJVTBL_UINT8
};

///< CMSG_QUERY_INSPECT_ACHIEVEMENTS
struct PlayerCliQueryInspectAchievements
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_COMPLETE_ACHIEVEMENT_CHEAT
struct PlayerCliCompleteAchievementCheat
{
    int32 AchievementID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Complete;             ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< CMSG_SET_CRITERIA_CHEAT
struct PlayerCliSetCriteriaCheat
{
    uint64 Quantity;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 CriteriaID;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_CHECK_LOGIN_CRITERIA
struct PlayerCliCheckLoginCriteria
{
};

///< CMSG_DESTROY_ITEMS
struct PlayerCliDestroyItems
{
    bool SkipEquipped;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_HEARTH_AND_RESURRECT
struct PlayerCliHearthAndResurrect
{
};

///< CMSG_SERVER_INFO_QUERY
struct PlayerCliServerInfoQuery
{
    std::string Category;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_SET_BREATH
struct PlayerCliSetBreath
{
    uint8 BreathValue;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_SAVE_EQUIPMENT_SET
struct PlayerCliSaveEquipmentSet
{
    struct Set_Struct
    {
        uint64      Guid;               ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32      SetID;              ///< Offset 0x0008 Type _MJVTBL_UINT32
        std::string SetName;            ///< Offset 0x000C Type _MJVTBL_STRING
        std::string SetIcon;            ///< Offset 0x008D Type _MJVTBL_STRING
        uint64      Pieces[19];         ///< Offset 0x0190 Type MakeMJVTblForFixedArrayOf<unsignedlonglong,19,&(MJVTBL_UINT64)>::MJVTBL
    };

    Set_Struct Set;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_DELETE_EQUIPMENT_SET
struct PlayerCliDeleteEquipmentSet
{
    uint64 ID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_INSTANCE_LOCK_RESPONSE
struct PlayerCliInstanceLockResponse
{
    bool AcceptLock;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_DEBUG_SERVER_GEO
struct PlayerCliDebugServerGeo
{
    uint32 ShowPathingGeoDist;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool   ShowSurfaceLinks;          ///< Offset 0x0004 Type _MJVTBL_BOOL
    bool   Enabled;                   ///< Offset 0x0005 Type _MJVTBL_BOOL
    bool   ShowDoors;                 ///< Offset 0x0006 Type _MJVTBL_BOOL
};

///< CMSG_GMALL_PHASES
struct PlayerCliGMAllPhases
{
};

///< CMSG_GMSET_PHASE
struct PlayerCliGMSetPhase
{
    std::vector<uint16> PhaseID;                    ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
};

///< CMSG_GMPHASE_ADD
struct PlayerCliGMPhaseAdd
{
    std::vector<uint16> PhaseID;                    ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
};

///< CMSG_GMPHASE_REMOVE
struct PlayerCliGMPhaseRemove
{
    std::vector<uint16> PhaseID;                    ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedshort,&(MJVTBL_UINT16)>::MJVTBL
};

///< CMSG_LOW_LEVEL_RAID
struct PlayerCliLowLevelRaid
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SET_CHARACTER_MODEL
struct PlayerCliSetCharacterModel
{
    int32 DisplayID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SET_CHARACTER_CUSTOMIZATION
struct PlayerCliSetCharacterCustomization
{
    int32 VariationValue;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 VariationIndex;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_CLEAR_RANDOM_BGWIN_TIME
struct PlayerCliClearRandomBGWinTime
{
};

///< CMSG_CLEAR_HOLIDAY_BGWIN_TIME
struct PlayerCliClearHolidayBGWinTime
{
};

///< CMSG_SET_CURRENCY_CHEAT
struct PlayerCliSetCurrencyCheat
{
    int32 Quantity;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Type;            ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_SET_FACTION_VISIBLE_CHEAT
struct PlayerCliSetFactionVisibleCheat
{
    bool  Visible;          ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 FactionID;        ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_NAMED_POINTS_CHEAT
struct PlayerCliNamedPointsCheat
{
};

///< CMSG_DECLINE_GUILD_INVITES
struct PlayerCliDeclineGuildInvites
{
    bool Allow;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_GET_CAIS_TIME
struct PlayerCliGetCaisTime
{
};

///< CMSG_BATTLEMASTER_JOIN
struct PlayerCliBattlemasterJoin
{
    bool   JoinAsGroup;            ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint8  Roles;                  ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint64 QueueID;                ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  BlacklistMap[2];        ///< Offset 0x0010 Type MakeMJVTblForFixedArrayOf<int,2,&(MJVTBL_INT32)>::MJVTBL
};

///< CMSG_BATTLEMASTER_JOIN_ARENA
struct PlayerCliBattlemasterJoinArena
{
    uint8 TeamSizeIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_BATTLEMASTER_JOIN_ARENA_SKIRMISH
struct PlayerCliBattlemasterJoinArenaSkirmish
{
    uint8 Roles;              ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8 Bracket;            ///< Offset 0x0001 Type _MJVTBL_UINT8
    bool  JoinAsGroup;        ///< Offset 0x0002 Type _MJVTBL_BOOL
};

///< CMSG_BATTLEFIELD_PORT
struct PlayerCliBattlefieldPort
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    Ticket_Struct Ticket;                ///< Offset 0x0000 Type _MJVTBL_STRUCT
    bool          AcceptedInvite;        ///< Offset 0x0018 Type _MJVTBL_BOOL
};

///< CMSG_REPOP_REQUEST
struct PlayerCliRepopRequest
{
    bool CheckInstance;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_ENT_PORT_GRAVEYARD
struct PlayerClientPortGraveyard
{
};

///< CMSG_SET_SELECTION
struct PlayerCliSetSelection
{
    uint64 Selection;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_INSPECT
struct PlayerCliInspect
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BLACK_MARKET_OPEN
struct PlayerCliBlackMarketOpen
{
    uint64 NpcGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BLACK_MARKET_REQUEST_ITEMS
struct PlayerCliBlackMarketRequestItems
{
    uint64 NpcGUID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 LastUpdateID;        ///< Offset 0x0008 Type _MJVTBL_TIME_T
};

///< CMSG_BLACK_MARKET_BID_ON_ITEM
struct PlayerCliBlackMarketBidOnItem
{
    struct Item_Struct
    {
        struct JamItemBonusInstanceData
        {
            struct Context_Struct
            {
                uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            };

            struct Bonuses_Struct
            {
                std::vector<int32> BonusListIDs;              ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
            };

            Context_Struct Context;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            Bonuses_Struct Bonuses;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
        };

        int32                              ItemID;                                    ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                              RandomPropertiesSeed;                      ///< Offset 0x0004 Type _MJVTBL_INT32
        int32                              RandomPropertiesID;                        ///< Offset 0x0008 Type _MJVTBL_INT32
        Optional<JamItemBonusInstanceData> ItemBonus;                                 ///< Offset 0x0010 Type MakeMJVTblForOptionalStruct<JamItemBonusInstanceData>::MJVTBL
        Optional<int>                      Modifications;                             ///< Offset 0x0038 Type MakeMJVTblForOptional<CompactArray<int,TSGrowableArray<int>,unsignedint,0>,&(MJVTBL_NOT_IMPLEMENTED)>::MJVTBL
    };

    uint64      NpcGUID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    Item_Struct Item;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    int32       MarketID;           ///< Offset 0x0068 Type _MJVTBL_INT32
    uint64      BidAmount;          ///< Offset 0x0070 Type _MJVTBL_UINT64
};

///< CMSG_QUEST_LOG_REMOVE_QUEST
struct PlayerCliQuestLogRemoveQuest
{
    uint8 Entry;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_GET_ITEM_PURCHASE_DATA
struct PlayerCliGetItemPurchaseData
{
    uint64 ItemGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_ITEM_PURCHASE_REFUND
struct PlayerCliItemPurchaseRefund
{
    uint64 ItemGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SELF_RES
struct PlayerCliSelfRes
{
};

///< CMSG_SET_ACTION_BAR_TOGGLES
struct PlayerCliSetActionBarToggles
{
    uint8 Mask;         ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_SIGN_PETITION
struct PlayerCliSignPetition
{
    uint64 PetitionGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  Choice;              ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_DECLINE_PETITION
struct PlayerCliDeclinePetition
{
    uint64 PetitionGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_TURN_IN_PETITION
struct PlayerCliTurnInPetition
{
    uint64 Item;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_MAIL_GET_LIST
struct PlayerCliMailGetList
{
    uint64 Mailbox;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_MAIL_TAKE_MONEY
struct PlayerCliMailTakeMoney
{
    uint64 Mailbox;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Money;          ///< Offset 0x0008 Type _MJVTBL_UINT64
    int32  MailID;         ///< Offset 0x0010 Type _MJVTBL_INT32
};

///< CMSG_MAIL_TAKE_ITEM
struct PlayerCliMailTakeItem
{
    uint64 Mailbox;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  AttachID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  MailID;          ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_QUERY_NEXT_MAIL_TIME
struct PlayerCliQueryNextMailTime
{
};

///< CMSG_MAIL_MARK_AS_READ
struct PlayerCliMailMarkAsRead
{
    bool   BiReceipt;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32  MailID;           ///< Offset 0x0004 Type _MJVTBL_INT32
    uint64 Mailbox;          ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_MAIL_CREATE_TEXT_ITEM
struct PlayerCliMailCreateTextItem
{
    uint64 Mailbox;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  MailID;         ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_AT
struct SetPvpRankCheat
{
    int32 Rank;         ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_EAT
struct AddPvpMedalCheat
{
    int32 Medal;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_EAT
struct DelPvpMedalCheat
{
    int32 Medal;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SET_LOOT_SPECIALIZATION
struct PlayerCliSetLootSpecialization
{
    uint32 SpecID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_GMSET_XPGAIN_ENABLED
struct PlayerCliGMSetXPGainEnabled
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_EMOTE
struct PlayerCliEmote
{
    uint32 EmoteID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_TRIGGER_CINEMATIC_CHEAT
struct PlayerCliTriggerCinematicCheat
{
    uint32 CinematicID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_OPENING_CINEMATIC
struct PlayerCliOpeningCinematic
{
};

///< CMSG_NEXT_CINEMATIC_CAMERA
struct PlayerCliNextCinematicCamera
{
};

///< CMSG_COMPLETE_CINEMATIC
struct PlayerCliCompleteCinematic
{
};

///< CMSG_WRAP_ITEM
struct PlayerCliWrapItem
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    Inv_Struct Inv;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_USE_EQUIPMENT_SET
struct PlayerCliUseEquipmentSet
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    struct JamEquipmentSetItem
    {
        uint64 Item;                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint8  ContainerSlot;        ///< Offset 0x0008 Type _MJVTBL_UINT8
        uint8  Slot;                 ///< Offset 0x0009 Type _MJVTBL_UINT8
    };

    Inv_Struct          Inv;                        ///< Offset 0x0000 Type _MJVTBL_STRUCT
    JamEquipmentSetItem Items[19];                  ///< Offset 0x0018 Type MakeMJVTblForFixedArrayOfStruct<JamEquipmentSetItem,19>::MJVTBL
};

///< CMSG_AUTOSTORE_BANK_ITEM
struct PlayerCliAutostoreBankItem
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    Inv_Struct Inv;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint8      Slot;              ///< Offset 0x0018 Type _MJVTBL_UINT8
    uint8      PackSlot;          ///< Offset 0x0019 Type _MJVTBL_UINT8
};

///< CMSG_AUTOBANK_ITEM
struct PlayerCliAutobankItem
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    uint8      PackSlot;          ///< Offset 0x0000 Type _MJVTBL_UINT8
    Inv_Struct Inv;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint8      Slot;              ///< Offset 0x0020 Type _MJVTBL_UINT8
};

///< CMSG_AUTO_EQUIP_ITEM
struct PlayerCliAutoEquipItem
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    uint8      Slot;              ///< Offset 0x0000 Type _MJVTBL_UINT8
    Inv_Struct Inv;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint8      PackSlot;          ///< Offset 0x0020 Type _MJVTBL_UINT8
};

///< CMSG_AUTO_STORE_BAG_ITEM
struct PlayerCliAutoStoreBagItem
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    uint8      ContainerSlotB;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    Inv_Struct Inv;                   ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint8      ContainerSlotA;        ///< Offset 0x0020 Type _MJVTBL_UINT8
    uint8      SlotA;                 ///< Offset 0x0021 Type _MJVTBL_UINT8
};

///< CMSG_SWAP_ITEM
struct PlayerCliSwapItem
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    Inv_Struct Inv;                   ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint8      SlotA;                 ///< Offset 0x0018 Type _MJVTBL_UINT8
    uint8      ContainerSlotB;        ///< Offset 0x0019 Type _MJVTBL_UINT8
    uint8      SlotB;                 ///< Offset 0x001A Type _MJVTBL_UINT8
    uint8      ContainerSlotA;        ///< Offset 0x001B Type _MJVTBL_UINT8
};

///< CMSG_SWAP_INV_ITEM
struct PlayerCliSwapInvItem
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    Inv_Struct Inv;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint8      Slot2;             ///< Offset 0x0018 Type _MJVTBL_UINT8
    uint8      Slot1;             ///< Offset 0x0019 Type _MJVTBL_UINT8
};

///< CMSG_SPLIT_ITEM
struct PlayerCliSplitItem
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    uint8      ToSlot;              ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8      ToPackSlot;          ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint8      FromPackSlot;        ///< Offset 0x0002 Type _MJVTBL_UINT8
    int32      Quantity;            ///< Offset 0x0004 Type _MJVTBL_INT32
    Inv_Struct Inv;                 ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint8      FromSlot;            ///< Offset 0x0020 Type _MJVTBL_UINT8
};

///< CMSG_AUTO_EQUIP_ITEM_SLOT
struct PlayerCliAutoEquipItemSlot
{
    struct Inv_Struct
    {
        struct JamInvItem
        {
            uint8 ContainerSlot;        ///< Offset 0x0000 Type _MJVTBL_UINT8
            uint8 Slot;                 ///< Offset 0x0001 Type _MJVTBL_UINT8
        };

        std::vector<JamInvItem> Items;                          ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamInvItem>::MJVTBL
    };

    uint64     Item;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8      ItemDstSlot;        ///< Offset 0x0008 Type _MJVTBL_UINT8
    Inv_Struct Inv;                ///< Offset 0x0010 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_FORWARD
struct PlayerMoveStartForward
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_BACKWARD
struct PlayerMoveStartBackward
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_STOP
struct PlayerMoveStop
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_STRAFE_LEFT
struct PlayerMoveStartStrafeLeft
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_STRAFE_RIGHT
struct PlayerMoveStartStrafeRight
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_STOP_STRAFE
struct PlayerMoveStopStrafe
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_JUMP
struct PlayerMoveJump
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_TURN_LEFT
struct PlayerMoveStartTurnLeft
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_TURN_RIGHT
struct PlayerMoveStartTurnRight
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_STOP_TURN
struct PlayerMoveStopTurn
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_PITCH_UP
struct PlayerMoveStartPitchUp
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_PITCH_DOWN
struct PlayerMoveStartPitchDown
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_STOP_PITCH
struct PlayerMoveStopPitch
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_RUN_MODE
struct PlayerMoveSetRunMode
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_WALK_MODE
struct PlayerMoveSetWalkMode
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_TELEPORT_CHEAT
struct PlayerMoveTeleportCheat
{
    float        Facing;              ///< Offset 0x0000 Type _MJVTBL_FLOAT
    G3D::Vector3 Position;            ///< Offset 0x0004 Type _MJVTBL_V3
};

///< SMSG_MOVE_CHARM_TELEPORT_CHEAT
struct PlayerMoveCharmTeleportCheat
{
    float        Facing;              ///< Offset 0x0000 Type _MJVTBL_FLOAT
    G3D::Vector3 Position;            ///< Offset 0x0004 Type _MJVTBL_V3
};

///< SMSG_MOVE_SET_RELATIVE_POSITION
struct PlayerMoveSetRelativePosition
{
    G3D::Vector3 Position;            ///< Offset 0x0000 Type _MJVTBL_V3
    float        Facing;              ///< Offset 0x000C Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_TELEPORT_ACK
struct PlayerMoveTeleportAck
{
    uint64 MoverGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 AckIndex;         ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 MoveTime;         ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< SMSG_MOVE_FALL_LAND
struct PlayerMoveFallLand
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_SWIM
struct PlayerMoveStartSwim
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_STOP_SWIM
struct PlayerMoveStopSwim
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_RUN_SPEED_CHEAT
struct PlayerMoveSetRunSpeedCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_RUN_BACK_SPEED_CHEAT
struct PlayerMoveSetRunBackSpeedCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_WALK_SPEED_CHEAT
struct PlayerMoveSetWalkSpeedCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_SWIM_SPEED_CHEAT
struct PlayerMoveSetSwimSpeedCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_SWIM_BACK_SPEED_CHEAT
struct PlayerMoveSetSwimBackSpeedCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_ALL_SPEED_CHEAT
struct PlayerMoveSetAllSpeedCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_TURN_RATE_CHEAT
struct PlayerMoveSetTurnRateCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_TOGGLE_COLLISION_CHEAT
struct PlayerMoveToggleCollisionCheat
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_FACING
struct PlayerMoveSetFacing
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_PITCH
struct PlayerMoveSetPitch
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FORCE_RUN_SPEED_CHANGE_ACK
struct PlayerMoveForceRunSpeedChangeAck
{
    struct Data_Struct
    {
        struct Ack_Struct
        {
            struct Status_Struct
            {
                struct JamCliMovementTransport
                {
                    uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                    G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                    float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                    uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                    uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                    Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
                };

                struct JamCliMovementFallOrLand
                {
                    struct JamCliMovementFallVelocity
                    {
                        G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                        float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                    };

                    uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                    float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                    Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
                };

                uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
                uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
                G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
                float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
                Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
                float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
                float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
                bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
                bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
                std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
                bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
            };

            Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
        };

        Ack_Struct Ack;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        float      Speed;             ///< Offset 0x00B0 Type _MJVTBL_FLOAT
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FORCE_RUN_BACK_SPEED_CHANGE_ACK
struct PlayerMoveForceRunBackSpeedChangeAck
{
    struct Data_Struct
    {
        struct Ack_Struct
        {
            struct Status_Struct
            {
                struct JamCliMovementTransport
                {
                    uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                    G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                    float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                    uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                    uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                    Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
                };

                struct JamCliMovementFallOrLand
                {
                    struct JamCliMovementFallVelocity
                    {
                        G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                        float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                    };

                    uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                    float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                    Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
                };

                uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
                uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
                G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
                float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
                Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
                float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
                float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
                bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
                bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
                std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
                bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
            };

            Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
        };

        Ack_Struct Ack;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        float      Speed;             ///< Offset 0x00B0 Type _MJVTBL_FLOAT
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FORCE_SWIM_SPEED_CHANGE_ACK
struct PlayerMoveForceSwimSpeedChangeAck
{
    struct Data_Struct
    {
        struct Ack_Struct
        {
            struct Status_Struct
            {
                struct JamCliMovementTransport
                {
                    uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                    G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                    float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                    uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                    uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                    Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
                };

                struct JamCliMovementFallOrLand
                {
                    struct JamCliMovementFallVelocity
                    {
                        G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                        float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                    };

                    uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                    float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                    Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
                };

                uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
                uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
                G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
                float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
                Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
                float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
                float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
                bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
                bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
                std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
                bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
            };

            Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
        };

        Ack_Struct Ack;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        float      Speed;             ///< Offset 0x00B0 Type _MJVTBL_FLOAT
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FORCE_ROOT_ACK
struct PlayerMoveForceRootAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FORCE_UNROOT_ACK
struct PlayerMoveForceUnrootAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_HEARTBEAT
struct PlayerMoveHeartbeat
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_EMBEDDED_HEARTBEAT
struct PlayerMoveEmbeddedHeartbeat
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_KNOCK_BACK_ACK
struct PlayerMoveKnockBackAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_HOVER_ACK
struct PlayerMoveHoverAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_VEHICLE_REC_ID_ACK
struct PlayerMoveSetVehicleRecIdAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    int32       VehicleRecID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    Data_Struct Data;                ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_APPLY_MOVEMENT_FORCE_ACK
struct PlayerMoveApplyMovementForceAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    int32        TransportID;            ///< Offset 0x0000 Type _MJVTBL_INT32
    G3D::Vector2 Direction;              ///< Offset 0x0004 Type _MJVTBL_V2
    uint32       MovementForceID;        ///< Offset 0x000C Type _MJVTBL_UINT32
    Data_Struct  Data;                   ///< Offset 0x0010 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_REMOVE_MOVEMENT_FORCE_ACK
struct PlayerMoveRemoveMovementForceAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;                   ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint32      MovementForceID;        ///< Offset 0x00B0 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_REMOVE_MOVEMENT_FORCES
struct PlayerMoveRemoveMovementForces
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SPLINE_DONE
struct PlayerMoveSplineDone
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    uint32        SplineID;             ///< Offset 0x0000 Type _MJVTBL_UINT32
    Status_Struct Status;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FALL_RESET
struct PlayerMoveFallReset
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_TIME_SKIPPED
struct PlayerMoveTimeSkipped
{
    uint64 MoverGUID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 TimeSkipped;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< SMSG_MOVE_FEATHER_FALL_ACK
struct PlayerMoveFeatherFallAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_WATER_WALK_ACK
struct PlayerMoveWaterWalkAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_SWIM_CHEAT
struct PlayerMoveStartSwimCheat
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_STOP_SWIM_CHEAT
struct PlayerMoveStopSwimCheat
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FORCE_WALK_SPEED_CHANGE_ACK
struct PlayerMoveForceWalkSpeedChangeAck
{
    struct Data_Struct
    {
        struct Ack_Struct
        {
            struct Status_Struct
            {
                struct JamCliMovementTransport
                {
                    uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                    G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                    float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                    uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                    uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                    Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
                };

                struct JamCliMovementFallOrLand
                {
                    struct JamCliMovementFallVelocity
                    {
                        G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                        float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                    };

                    uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                    float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                    Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
                };

                uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
                uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
                G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
                float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
                Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
                float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
                float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
                bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
                bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
                std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
                bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
            };

            Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
        };

        Ack_Struct Ack;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        float      Speed;             ///< Offset 0x00B0 Type _MJVTBL_FLOAT
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FORCE_SWIM_BACK_SPEED_CHANGE_ACK
struct PlayerMoveForceSwimBackSpeedChangeAck
{
    struct Data_Struct
    {
        struct Ack_Struct
        {
            struct Status_Struct
            {
                struct JamCliMovementTransport
                {
                    uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                    G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                    float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                    uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                    uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                    Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
                };

                struct JamCliMovementFallOrLand
                {
                    struct JamCliMovementFallVelocity
                    {
                        G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                        float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                    };

                    uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                    float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                    Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
                };

                uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
                uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
                G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
                float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
                Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
                float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
                float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
                bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
                bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
                std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
                bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
            };

            Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
        };

        Ack_Struct Ack;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        float      Speed;             ///< Offset 0x00B0 Type _MJVTBL_FLOAT
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FORCE_TURN_RATE_CHANGE_ACK
struct PlayerMoveForceTurnRateChangeAck
{
    struct Data_Struct
    {
        struct Ack_Struct
        {
            struct Status_Struct
            {
                struct JamCliMovementTransport
                {
                    uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                    G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                    float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                    uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                    uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                    Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
                };

                struct JamCliMovementFallOrLand
                {
                    struct JamCliMovementFallVelocity
                    {
                        G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                        float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                    };

                    uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                    float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                    Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
                };

                uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
                uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
                G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
                float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
                Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
                float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
                float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
                bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
                bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
                std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
                bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
            };

            Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
        };

        Ack_Struct Ack;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        float      Speed;             ///< Offset 0x00B0 Type _MJVTBL_FLOAT
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_ENABLE_SWIM_TO_FLY_TRANS_ACK
struct PlayerMoveEnableSwimToFlyTransAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_CAN_TURN_WHILE_FALLING_ACK
struct PlayerMoveSetCanTurnWhileFallingAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_IGNORE_MOVEMENT_FORCES_ACK
struct PlayerMoveSetIgnoreMovementForcesAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_CAN_FLY_ACK
struct PlayerMoveSetCanFlyAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_FLY
struct PlayerMoveSetFly
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_ASCEND
struct PlayerMoveStartAscend
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_STOP_ASCEND
struct PlayerMoveStopAscend
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_FLIGHT_SPEED_CHEAT
struct PlayerMoveSetFlightSpeedCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_SET_FLIGHT_BACK_SPEED_CHEAT
struct PlayerMoveSetFlightBackSpeedCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_FORCE_FLIGHT_SPEED_CHANGE_ACK
struct PlayerMoveForceFlightSpeedChangeAck
{
    struct Data_Struct
    {
        struct Ack_Struct
        {
            struct Status_Struct
            {
                struct JamCliMovementTransport
                {
                    uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                    G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                    float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                    uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                    uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                    Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
                };

                struct JamCliMovementFallOrLand
                {
                    struct JamCliMovementFallVelocity
                    {
                        G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                        float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                    };

                    uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                    float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                    Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
                };

                uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
                uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
                G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
                float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
                Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
                float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
                float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
                bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
                bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
                std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
                bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
            };

            Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
        };

        Ack_Struct Ack;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        float      Speed;             ///< Offset 0x00B0 Type _MJVTBL_FLOAT
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK
struct PlayerMoveForceFlightBackSpeedChangeAck
{
    struct Data_Struct
    {
        struct Ack_Struct
        {
            struct Status_Struct
            {
                struct JamCliMovementTransport
                {
                    uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                    G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                    float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                    uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                    uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                    Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
                };

                struct JamCliMovementFallOrLand
                {
                    struct JamCliMovementFallVelocity
                    {
                        G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                        float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                    };

                    uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                    float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                    Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
                };

                uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
                uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
                G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
                float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
                Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
                float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
                float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
                bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
                bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
                std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
                bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
            };

            Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
        };

        Ack_Struct Ack;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        float      Speed;             ///< Offset 0x00B0 Type _MJVTBL_FLOAT
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_CHANGE_TRANSPORT
struct PlayerMoveChangeTransport
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_START_DESCEND
struct PlayerMoveStartDescend
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_PITCH_RATE_CHEAT
struct PlayerMoveSetPitchRateCheat
{
    float Speed;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< SMSG_MOVE_FORCE_PITCH_RATE_CHANGE_ACK
struct PlayerMoveForcePitchRateChangeAck
{
    struct Data_Struct
    {
        struct Ack_Struct
        {
            struct Status_Struct
            {
                struct JamCliMovementTransport
                {
                    uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                    G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                    float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                    uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                    uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                    Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                    Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
                };

                struct JamCliMovementFallOrLand
                {
                    struct JamCliMovementFallVelocity
                    {
                        G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                        float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                    };

                    uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                    float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                    Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
                };

                uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
                uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
                uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
                uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
                G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
                float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
                Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
                float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
                float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
                bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
                bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
                std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
                bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
            };

            Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
            uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
        };

        Ack_Struct Ack;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        float      Speed;             ///< Offset 0x00B0 Type _MJVTBL_FLOAT
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_DISMISS_VEHICLE
struct PlayerMoveDismissVehicle
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_CHANGE_VEHICLE_SEATS
struct PlayerMoveChangeVehicleSeats
{
    struct Status_Struct
    {
        struct JamCliMovementTransport
        {
            uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
            G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
            float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
            uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
            uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
            Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
        };

        struct JamCliMovementFallOrLand
        {
            struct JamCliMovementFallVelocity
            {
                G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
            };

            uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
            float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
        };

        uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
        G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
        float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
        Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
        float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
        Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
        float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
        bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
        bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
        bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
    };

    uint64        DstVehicle;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    Status_Struct Status;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint8         DstSeatIndex;         ///< Offset 0x00B0 Type _MJVTBL_UINT8
};

///< SMSG_MOVE_GRAVITY_DISABLE_ACK
struct PlayerMoveGravityDisableAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_GRAVITY_ENABLE_ACK
struct PlayerMoveGravityEnableAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_COLLISION_DISABLE_ACK
struct PlayerMoveCollisionDisableAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_COLLISION_ENABLE_ACK
struct PlayerMoveCollisionEnableAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct Data;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< SMSG_MOVE_SET_COLLISION_HEIGHT_ACK
struct PlayerMoveSetCollisionHeightAck
{
    struct Data_Struct
    {
        struct Status_Struct
        {
            struct JamCliMovementTransport
            {
                uint64           Guid;                    ///< Offset 0x0000 Type _MJVTBL_UINT64
                G3D::Vector3     Position;                ///< Offset 0x0008 Type _MJVTBL_V3
                float            Facing;                  ///< Offset 0x0014 Type _MJVTBL_FLOAT
                uint8            VehicleSeatIndex;        ///< Offset 0x0018 Type _MJVTBL_UINT8
                uint32           MoveTime;                ///< Offset 0x001C Type _MJVTBL_UINT32
                Optional<uint32> PrevMoveTime;            ///< Offset 0x0020 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
                Optional<int32>  VehicleRecID;            ///< Offset 0x0028 Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
            };

            struct JamCliMovementFallOrLand
            {
                struct JamCliMovementFallVelocity
                {
                    G3D::Vector2 Direction;           ///< Offset 0x0000 Type _MJVTBL_V2
                    float        Speed;               ///< Offset 0x0008 Type _MJVTBL_FLOAT
                };

                uint32                               Time;                                        ///< Offset 0x0000 Type _MJVTBL_UINT32
                float                                JumpVelocity;                                ///< Offset 0x0004 Type _MJVTBL_FLOAT
                Optional<JamCliMovementFallVelocity> Velocity;                                    ///< Offset 0x0008 Type MakeMJVTblForOptionalStruct<JamCliMovementFallVelocity>::MJVTBL
            };

            uint64                             MoverGUID;                                 ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint32                             MoveFlags0;                                ///< Offset 0x0008 Type _MJVTBL_UINT32
            uint32                             MoveFlags1;                                ///< Offset 0x000C Type _MJVTBL_UINT32
            uint32                             MoveTime;                                  ///< Offset 0x0010 Type _MJVTBL_UINT32
            G3D::Vector3                       Position;                                  ///< Offset 0x0014 Type _MJVTBL_V3
            float                              Facing;                                    ///< Offset 0x0020 Type _MJVTBL_FLOAT
            Optional<JamCliMovementTransport>  Transport;                                 ///< Offset 0x0028 Type MakeMJVTblForOptionalStruct<JamCliMovementTransport>::MJVTBL
            float                              Pitch;                                     ///< Offset 0x0060 Type _MJVTBL_FLOAT
            Optional<JamCliMovementFallOrLand> Fall;                                      ///< Offset 0x0064 Type MakeMJVTblForOptionalStruct<JamCliMovementFallOrLand>::MJVTBL
            float                              StepUpStartElevation;                      ///< Offset 0x0080 Type _MJVTBL_FLOAT
            bool                               HasSpline;                                 ///< Offset 0x0084 Type _MJVTBL_BOOL
            bool                               HeightChangeFailed;                        ///< Offset 0x0085 Type _MJVTBL_BOOL
            std::vector<uint32>                RemoveForcesIDs;                           ///< Offset 0x0088 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
            uint32                             MoveIndex;                                 ///< Offset 0x00A0 Type _MJVTBL_UINT32
            bool                               RemoteTimeValid;                           ///< Offset 0x00A4 Type _MJVTBL_BOOL
        };

        Status_Struct Status;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
        uint32        AckIndex;             ///< Offset 0x00A8 Type _MJVTBL_UINT32
    };

    Data_Struct                    Data;                                  ///< Offset 0x0000 Type _MJVTBL_STRUCT
    UPDATE_COLLISION_HEIGHT_REASON Reason;                                ///< Offset 0x00B0 Type _MJVTBL_UPDATE_COLLISION_HEIGHT_REASON
    uint32                         MountDisplayID;                        ///< Offset 0x00B4 Type _MJVTBL_UINT32
    float                          Height;                                ///< Offset 0x00B8 Type _MJVTBL_FLOAT
};

///< SMSG_SET_ACTIVE_MOVER
struct PlayerSetActiveMover
{
    uint64 ActiveMover;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< SMSG_TIME_SYNC_RESPONSE
struct PlayerTimeSyncResponse
{
    uint32 ClientTime;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 SequenceIndex;        ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_TIME_SYNC_RESPONSE_FAILED
struct PlayerTimeSyncResponseFailed
{
    uint32 SequenceIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< SMSG_TIME_SYNC_RESPONSE_DROPPED
struct PlayerTimeSyncResponseDropped
{
    uint32 SequenceIndexFirst;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 SequenceIndexLast;         ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_TIME_ADJUSTMENT_RESPONSE
struct PlayerTimeAdjustmentResponse
{
    uint32 SequenceIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 ClientTime;           ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< SMSG_DISCARDED_TIME_SYNC_ACKS
struct PlayerDiscardedTimeSyncAcks
{
    uint32 MaxSequenceIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_CONNECT_TO_FAILED
struct UserClientConnectToFailed
{
    uint32 Serial;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    int8   Con;           ///< Offset 0x0004 Type _MJVTBL_INT8
};

///< CMSG_CREATE_GUILD_CHEAT
struct UserClientCreateGuildCheat
{
    std::string GuildName;          ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_SET_ROLE
struct UserClientSetRole
{
    uint64 ChangedUnit;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Role;               ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8  PartyIndex;         ///< Offset 0x000C Type _MJVTBL_UINT8
};

///< CMSG_INITIATE_ROLE_POLL
struct UserClientInitiateRolePoll
{
    uint8 PartyIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_START_BATTLEGROUND_CHEAT
struct UserClientStartBattlegroundCheat
{
    int32 MapID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Rated;        ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< CMSG_BFMGR_ENTRY_INVITE_RESPONSE
struct UserClientBFMgrEntryInviteResponse
{
    uint64 QueueID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   AcceptedInvite;        ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< CMSG_BFMGR_QUEUE_INVITE_RESPONSE
struct UserClientBFMgrQueueInviteResponse
{
    uint64 QueueID;               ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   AcceptedInvite;        ///< Offset 0x0008 Type _MJVTBL_BOOL
};

///< CMSG_BFMGR_QUEUE_EXIT_REQUEST
struct UserClientBFMgrQueueExitRequest
{
    uint64 QueueID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_REQUEST_BATTLEFIELD_STATUS
struct UserClientRequestBattlefieldStatus
{
};

///< CMSG_CHANGE_GDF_PVPRATING
struct UserClientChangeGdfPVPRating
{
    float Variance;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
    float Rating;          ///< Offset 0x0004 Type _MJVTBL_FLOAT
    int32 Bracket;         ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_START_WAR_GAME
struct UserClientStartWarGame
{
    uint64 OpposingPartyMember;                           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 QueueID;                                       ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   TournamentRules;                               ///< Offset 0x0010 Type _MJVTBL_BOOL
    uint32 OpposingPartyMemberVirtualRealmAddress;        ///< Offset 0x0014 Type _MJVTBL_UINT32
    uint32 OpposingPartyMemberCfgRealmID;                 ///< Offset 0x0018 Type _MJVTBL_UINT32
};

///< CMSG_START_SPECTATOR_WAR_GAME
struct UserClientStartSpectatorWarGame
{
    uint32 OpposingPartyMemberCfgRealmID1;                 ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint64 OpposingPartyMember1;                           ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 OpposingPartyMemberVirtualRealmAddress1;        ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint64 QueueID;                                        ///< Offset 0x0018 Type _MJVTBL_UINT64
    uint32 OpposingPartyMemberCfgRealmID2;                 ///< Offset 0x0020 Type _MJVTBL_UINT32
    uint32 OpposingPartyMemberVirtualRealmAddress2;        ///< Offset 0x0024 Type _MJVTBL_UINT32
    uint64 OpposingPartyMember2;                           ///< Offset 0x0028 Type _MJVTBL_UINT64
    bool   TournamentRules;                                ///< Offset 0x0030 Type _MJVTBL_BOOL
};

///< CMSG_ACCEPT_WARGAME_INVITE
struct UserClientAcceptWargameInvite
{
    uint64 OpposingPartyMember;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 QueueID;                    ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   Accept;                     ///< Offset 0x0010 Type _MJVTBL_BOOL
};

///< CMSG_DEBUG_SHOW_RATINGS
struct UserClientDebugShowRatings
{
};

///< CMSG_WORLD_TELEPORT
struct UserClientWorldTeleport
{
    uint64       Transport;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    float        Facing;              ///< Offset 0x0008 Type _MJVTBL_FLOAT
    uint32       MapID;               ///< Offset 0x000C Type _MJVTBL_UINT32
    G3D::Vector3 Position;            ///< Offset 0x0010 Type _MJVTBL_V3
};

///< CMSG_FORCE_TAKE_LEADER
struct UserClientForceTakeLeader
{
    uint8 PartyIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_REQUEST_RATED_BATTLEFIELD_INFO
struct UserClientRequestRatedBattlefieldInfo
{
};

///< CMSG_DBQUERY
struct UserClientDBQuery
{
    uint64 Guid;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 TableHash;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    int32  RecordID;         ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_DBQUERY_BULK
struct UserClientDBQueryBulk
{
    struct DBQuery
    {
        uint64 Guid;            ///< Offset 0x0000 Type _MJVTBL_UINT64
        int32  RecordID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    };

    uint32               TableHash;                   ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::vector<DBQuery> Queries;                     ///< Offset 0x0008 Type MakeMJVTblForArrayOfStruct<DBQuery>::MJVTBL
};

///< CMSG_GENERATE_RANDOM_CHARACTER_NAME
struct UserClientGenerateRandomCharacterName
{
    uint8 Sex;          ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8 Race;         ///< Offset 0x0001 Type _MJVTBL_UINT8
};

///< CMSG_ENUM_CHARACTERS
struct UserClientEnumCharacters
{
};

///< CMSG_REORDER_CHARACTERS
struct UserClientReorderCharacters
{
    struct JamUserClientReorderEntry
    {
        uint64 PlayerGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint8  NewPosition;        ///< Offset 0x0008 Type _MJVTBL_UINT8
    };

    std::vector<JamUserClientReorderEntry> Entries;                                       ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamUserClientReorderEntry>::MJVTBL
};

///< CMSG_PLAYER_LOGIN
struct UserClientPlayerLogin
{
    struct ClientSettings_Struct
    {
        float FarClip;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
    };

    ClientSettings_Struct ClientSettings;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint64                PlayerGUID;                   ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_CHEAT_PLAYER_LOGIN
struct UserClientCheatPlayerLogin
{
    struct ClientSettings_Struct
    {
        float FarClip;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
    };

    uint64                PlayerGUID;                   ///< Offset 0x0000 Type _MJVTBL_UINT64
    ClientSettings_Struct ClientSettings;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< CMSG_WARDEN_DATA
struct UserClientWardenData
{
    uint8 * Packet;         ///< Offset 0x0000 Type _MJVTBL_NOT_IMPLEMENTED
};

///< CMSG_UNDELETE_GUILD_CHEAT
struct UserClientUndeleteGuildCheat
{
    std::string BackupGuildName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GET_PVPOPTIONS_ENABLED
struct UserClientGetPVPOptionsEnabled
{
};

///< CMSG_COMMENTATOR_START_WARGAME
struct UserClientCommentatorStartWargame
{
    uint64       QueueID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string  Names[2];            ///< Offset 0x0008 Type MakeMJVTblForFixedArrayOfStrings<2,49>::MJVTBL
};

///< CMSG_COMMENTATOR_ENABLE
struct UserClientCommentatorEnable
{
    int32 Enable;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_COMMENTATOR_GET_MAP_INFO
struct UserClientCommentatorGetMapInfo
{
    std::string PlayerName;         ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_COMMENTATOR_GET_PLAYER_INFO
struct UserClientCommentatorGetPlayerInfo
{
    ServerSpec WorldServer;        ///< Offset 0x0000 Type _MJVTBL_JAMSERVERSPEC
    uint32     MapID;              ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< CMSG_COMMENTATOR_ENTER_INSTANCE
struct UserClientCommentatorEnterInstance
{
    uint64     InstanceID;          ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32     MapID;               ///< Offset 0x0008 Type _MJVTBL_UINT32
    int32      DifficultyID;        ///< Offset 0x000C Type _MJVTBL_INT32
    ServerSpec WorldServer;         ///< Offset 0x0010 Type _MJVTBL_JAMSERVERSPEC
};

///< CMSG_COMMENTATOR_EXIT_INSTANCE
struct UserClientCommentatorExitInstance
{
};

///< CMSG_CLEAR_PARTY_LFGCOOLDOWNS
struct UserClientClearPartyLFGCooldowns
{
};

///< CMSG_REQUEST_PARTY_JOIN_UPDATES
struct UserClientRequestPartyJoinUpdates
{
    uint8 PartyIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_LOADING_SCREEN_NOTIFY
struct UserClientLoadingScreenNotify
{
    int32 MapID;          ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  Showing;        ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< CMSG_WORLD_PORT_RESPONSE
struct UserClientWorldPortResponse
{
};

///< CMSG_SEND_MAIL
struct UserClientSendMail
{
    struct Info_Struct
    {
        struct JamCliStructMailAttachment
        {
            uint64 ItemGUID;              ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint8  AttachPosition;        ///< Offset 0x0008 Type _MJVTBL_UINT8
        };

        uint64                                  Mailbox;                                        ///< Offset 0x0000 Type _MJVTBL_UINT64
        std::string                             Target;                                         ///< Offset 0x0008 Type _MJVTBL_STRING
        std::string                             Subject;                                        ///< Offset 0x013A Type _MJVTBL_STRING
        std::string                             Body;                                           ///< Offset 0x023B Type _MJVTBL_STRING
        int32                                   StationeryID;                                   ///< Offset 0x0A0C Type _MJVTBL_INT32
        int32                                   PackageID;                                      ///< Offset 0x0A10 Type _MJVTBL_INT32
        std::vector<JamCliStructMailAttachment> Attachments;                                    ///< Offset 0x0A18 Type MakeMJVTblForArrayOfStruct<JamCliStructMailAttachment>::MJVTBL
        uint64                                  SendMoney;                                      ///< Offset 0x0A30 Type _MJVTBL_UINT64
        uint64                                  Cod;                                            ///< Offset 0x0A38 Type _MJVTBL_UINT64
    };

    Info_Struct Info;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_GUILD_RESET_XPCAP
struct UserClientGuildResetXPCap
{
};

///< CMSG_GUILD_RESET_MEMBER_REP_CAP
struct UserClientGuildResetMemberRepCap
{
};

///< CMSG_GUILD_RESET_CHALLENGE
struct UserClientGuildResetChallenge
{
    int32 ChallengeType;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_ACCEPT_GUILD_INVITE
struct UserClientAcceptGuildInvite
{
};

///< CMSG_GMSSHIJACK_CHEAT
struct UserClientGMSSHijackCheat
{
    uint64 Player;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SET_MONEY_CHEAT
struct UserClientSetMoneyCheat
{
    std::string Target;             ///< Offset 0x0000 Type _MJVTBL_STRING
    uint64      Amount;             ///< Offset 0x0038 Type _MJVTBL_UINT64
};

///< CMSG_GUILD_RESET_BY_GM
struct UserClientGuildResetByGM
{
};

///< CMSG_ENABLE_GMTICKET_SYSTEM
struct UserClientEnableGMTicketSystem
{
};

///< CMSG_DISABLE_GMTICKET_SYSTEM
struct UserClientDisableGMTicketSystem
{
};

///< CMSG_PARTY_INVITE
struct UserClientPartyInvite
{
    uint64      TargetGuid;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32      ProposedRoles;           ///< Offset 0x0008 Type _MJVTBL_UINT32
    std::string TargetName;              ///< Offset 0x000C Type _MJVTBL_STRING
    uint8       PartyIndex;              ///< Offset 0x013E Type _MJVTBL_UINT8
    std::string TargetRealm;             ///< Offset 0x013F Type _MJVTBL_STRING
    uint32      TargetCfgRealmID;        ///< Offset 0x0240 Type _MJVTBL_UINT32
};

///< CMSG_PARTY_INVITE_RESPONSE
struct UserClientPartyInviteResponse
{
    uint8            PartyIndex;              ///< Offset 0x0000 Type _MJVTBL_UINT8
    bool             Accept;                  ///< Offset 0x0001 Type _MJVTBL_BOOL
    Optional<uint32> RolesDesired;            ///< Offset 0x0004 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
};

///< CMSG_SET_CURRENCY_CHEAT
struct UserClientSetCurrencyCheat
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Type;              ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  Quantity;          ///< Offset 0x000C Type _MJVTBL_INT32
    int8   IsDelta;           ///< Offset 0x0010 Type _MJVTBL_INT8
    int8   Column;            ///< Offset 0x0011 Type _MJVTBL_INT8
};

///< CMSG_DUMP_RIDE_TICKETS
struct UserClientDumpRideTickets
{
};

///< CMSG_SIMULATE_TICKETS
struct UserClientSimulateTickets
{
    uint32 Seed;            ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 Count;           ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint32 RideType;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_GUILD_INVITE_BY_NAME
struct UserClientGuildInviteByName
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_DFPROPOSAL_RESPONSE
struct UserClientDFProposalResponse
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    uint32        ProposalID;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    Ticket_Struct Ticket;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    bool          Accepted;             ///< Offset 0x0020 Type _MJVTBL_BOOL
    uint64        InstanceID;           ///< Offset 0x0028 Type _MJVTBL_UINT64
};

///< CMSG_DFJOIN
struct UserClientDFJoin
{
    bool                QueueAsGroup;               ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint32              Roles;                      ///< Offset 0x0004 Type _MJVTBL_UINT32
    uint8               PartyIndex;                 ///< Offset 0x0008 Type _MJVTBL_UINT8
    std::string         Comment;                    ///< Offset 0x0009 Type _MJVTBL_STRING
    std::vector<uint32> Slots;                      ///< Offset 0x0110 Type MakeMJVTblForArrayOf<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    uint32              Needs[3];                   ///< Offset 0x0128 Type MakeMJVTblForFixedArrayOf<unsignedint,3,&(MJVTBL_UINT32)>::MJVTBL
};

///< CMSG_LFGLIST_JOIN
struct UserClientLFGListJoin
{
    struct Info_Struct
    {
        uint32      ActivityID;               ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32      RequiredItemLevel;        ///< Offset 0x0004 Type _MJVTBL_UINT32
        std::string Name;                     ///< Offset 0x0008 Type _MJVTBL_STRING
        std::string Comment;                  ///< Offset 0x0088 Type _MJVTBL_STRING
        std::string VoiceChat;                ///< Offset 0x0488 Type _MJVTBL_STRING
    };

    Info_Struct Info;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_LFGLIST_UPDATE_REQUEST
struct UserClientLFGListUpdateRequest
{
    struct Info_Struct
    {
        uint32      ActivityID;               ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32      RequiredItemLevel;        ///< Offset 0x0004 Type _MJVTBL_UINT32
        std::string Name;                     ///< Offset 0x0008 Type _MJVTBL_STRING
        std::string Comment;                  ///< Offset 0x0088 Type _MJVTBL_STRING
        std::string VoiceChat;                ///< Offset 0x0488 Type _MJVTBL_STRING
    };

    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    Info_Struct   Info;                 ///< Offset 0x0000 Type _MJVTBL_STRUCT
    Ticket_Struct Ticket;               ///< Offset 0x0508 Type _MJVTBL_STRUCT
};

///< CMSG_LFGLIST_LEAVE
struct UserClientLFGListLeave
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    Ticket_Struct Ticket;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_LFGLIST_GET_STATUS
struct UserClientLFGListGetStatus
{
};

///< CMSG_DFLEAVE
struct UserClientDFLeave
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    Ticket_Struct Ticket;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_DFSEARCH_JOIN
struct UserClientDFSearchJoin
{
    uint32 Slot;          ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_DFSEARCH_LEAVE
struct UserClientDFSearchLeave
{
    uint32 Slot;          ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_DFGET_SYSTEM_INFO
struct UserClientDFGetSystemInfo
{
    uint8 PartyIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    bool  Player;            ///< Offset 0x0001 Type _MJVTBL_BOOL
};

///< CMSG_DFGET_JOIN_STATUS
struct UserClientDFGetJoinStatus
{
};

///< CMSG_DFSET_COMMENT
struct UserClientDFSetComment
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    Ticket_Struct Ticket;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    std::string   Comment;              ///< Offset 0x0018 Type _MJVTBL_STRING
};

///< CMSG_DFSET_ROLES
struct UserClientDFSetRoles
{
    uint32 RolesDesired;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint8  PartyIndex;          ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< CMSG_DFSET_NEEDS
struct UserClientDFSetNeeds
{
    struct Ticket_Struct
    {
        uint64 RequesterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 Id;                   ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 Type;                 ///< Offset 0x000C Type _MJVTBL_UINT32
        uint32 Time;                 ///< Offset 0x0010 Type _MJVTBL_TIME_T
    };

    bool          Delta;                ///< Offset 0x0000 Type _MJVTBL_BOOL
    Ticket_Struct Ticket;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
    uint32        Needs[3];             ///< Offset 0x0020 Type MakeMJVTblForFixedArrayOf<unsignedint,3,&(MJVTBL_UINT32)>::MJVTBL
};

///< CMSG_DFBOOT_PLAYER_VOTE
struct UserClientDFBootPlayerVote
{
    bool Vote;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_DFTELEPORT
struct UserClientDFTeleport
{
    bool TeleportOut;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SET_EVERYONE_IS_ASSISTANT
struct UserClientSetEveryoneIsAssistant
{
    uint8 PartyIndex;                 ///< Offset 0x0000 Type _MJVTBL_UINT8
    bool  EveryoneIsAssistant;        ///< Offset 0x0001 Type _MJVTBL_BOOL
};

///< CMSG_SERVER_INFO_REQUEST
struct UserClientServerInfoRequest
{
};

///< CMSG_BFMGR_ADVANCE_STATE
struct UserClientBFMgrAdvanceState
{
    int32 QueueID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_BATTLEFIELD_SET_NEXT_TRANSITION_TIME
struct UserClientBattlefieldSetNextTransitionTime
{
    int32 SecondsUntilTransition;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 QueueID;                       ///< Offset 0x0004 Type _MJVTBL_INT32
};

///< CMSG_GUILD_FLUSH
struct UserClientGuildFlush
{
    uint64 GuildGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_LFGUILD_ADD_RECRUIT
struct UserClientLFGuildAddRecruit
{
    uint64      GuildGUID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32       Availability;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32       ClassRoles;          ///< Offset 0x000C Type _MJVTBL_INT32
    int32       PlayStyle;           ///< Offset 0x0010 Type _MJVTBL_INT32
    std::string Comment;             ///< Offset 0x0014 Type _MJVTBL_STRING
};

///< CMSG_LFGUILD_SET_GUILD_POST
struct UserClientLFGuildSetGuildPost
{
    std::string Comment;             ///< Offset 0x0000 Type _MJVTBL_STRING
    int32       Availability;        ///< Offset 0x0400 Type _MJVTBL_INT32
    bool        Active;              ///< Offset 0x0404 Type _MJVTBL_BOOL
    int32       PlayStyle;           ///< Offset 0x0408 Type _MJVTBL_INT32
    int32       ClassRoles;          ///< Offset 0x040C Type _MJVTBL_INT32
    int32       LevelRange;          ///< Offset 0x0410 Type _MJVTBL_INT32
};

///< CMSG_LFGUILD_BROWSE
struct UserClientLFGuildBrowse
{
    int32 CharacterLevel;        ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Availability;          ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 ClassRoles;            ///< Offset 0x0008 Type _MJVTBL_INT32
    int32 PlayStyle;             ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_ACCOUNT_INFO_REQUEST
struct UserClientAccountInfoRequest
{
};

///< CMSG_SET_DFFAST_LAUNCH
struct UserClientSetDFFastLaunch
{
    bool Set;         ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SET_TIME_WALKER_DUNGEON
struct UserClientSetTimeWalkerDungeon
{
    int32 LfgDungeonID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_SEND_SO_RREQUEST_VIA_ADDRESS
struct UserClientSendSoRRequestViaAddress
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Email;              ///< Offset 0x03FD Type _MJVTBL_STRING
};

///< CMSG_SEND_SO_RREQUEST_VIA_BNET_ACCOUNT_ID
struct UserClientSendSoRRequestViaBnetAccountID
{
    std::string Text;                 ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      BnetAccountID;        ///< Offset 0x0400 Type _MJVTBL_UINT32
};

///< CMSG_BATTLE_PET_REQUEST_JOURNAL_LOCK
struct UserClientBattlePetRequestJournalLock
{
};

///< CMSG_BATTLE_PET_REQUEST_JOURNAL
struct UserClientBattlePetRequestJournal
{
};

///< CMSG_BATTLE_PET_DELETE_PET
struct UserClientBattlePetDeletePet
{
    uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BATTLE_PET_DELETE_PET_CHEAT
struct UserClientBattlePetDeletePetCheat
{
    uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BATTLE_PET_DELETE_JOURNAL
struct UserClientBattlePetDeleteJournal
{
};

///< CMSG_BATTLE_PET_MODIFY_NAME
struct UserClientBattlePetModifyName
{
    struct DeclinedBattlePetNames
    {
        std::string  Name[5];             ///< Offset 0x0000 Type MakeMJVTblForFixedArrayOfStrings<5,65>::MJVTBL
    };

    std::string                      Name;                                    ///< Offset 0x0000 Type _MJVTBL_STRING
    Optional<DeclinedBattlePetNames> DeclinedNames;                           ///< Offset 0x0041 Type MakeMJVTblForOptionalStruct<DeclinedBattlePetNames>::MJVTBL
    uint64                           BattlePetGUID;                           ///< Offset 0x0188 Type _MJVTBL_UINT64
};

///< CMSG_BATTLE_PET_SUMMON
struct UserClientBattlePetSummon
{
    uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_BATTLE_PET_SET_LEVEL
struct UserClientBattlePetSetLevel
{
    std::vector<uint64> BattlePetGUIDs;             ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedlonglong,&(MJVTBL_UINT64)>::MJVTBL
    uint16              Level;                      ///< Offset 0x0018 Type _MJVTBL_UINT16
};

///< CMSG_RESTORE_BATTLE_PETS_HEALTH
struct UserClientRestoreBattlePetsHealth
{
    int8 HealthPct;        ///< Offset 0x0000 Type _MJVTBL_INT8
};

///< CMSG_BATTLE_PET_SET_BATTLE_SLOT
struct UserClientBattlePetSetBattleSlot
{
    uint64 BattlePetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  SlotIndex;            ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_BATTLE_PET_SET_COLLAR
struct UserClientBattlePetSetCollar
{
    int32 CollarItemID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    uint8 SlotIndex;           ///< Offset 0x0004 Type _MJVTBL_UINT8
};

///< CMSG_ADD_BATTLE_PET
struct UserClientAddBattlePet
{
    bool  AllSpecies;                     ///< Offset 0x0000 Type _MJVTBL_BOOL
    int32 SpeciesID;                      ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 CreatureID;                     ///< Offset 0x0008 Type _MJVTBL_INT32
    bool  IgnoreMaxPetRestriction;        ///< Offset 0x000C Type _MJVTBL_BOOL
};

///< CMSG_BATTLE_PET_SET_FLAGS
struct UserClientBattlePetSetFlags
{
    uint64                            BattlePetGUID;                            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32                            Flags;                                    ///< Offset 0x0008 Type _MJVTBL_UINT32
    JamCliBattlePetSetFlagControlType ControlType;                              ///< Offset 0x000C Type _MJVTBL_JamCliBattlePetSetFlagControlType
};

///< CMSG_CHEAT_BATTLE_PET_SET_QUALITY
struct UserClientCheatBattlePetSetQuality
{
    uint16 BreedQuality;            ///< Offset 0x0000 Type _MJVTBL_UINT16
    uint64 BattlePetGUID;           ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   AllPetsInJournal;        ///< Offset 0x0010 Type _MJVTBL_BOOL
};

///< CMSG_MOUNT_SET_FAVORITE
struct UserClientMountSetFavorite
{
    int32 MountSpellID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    bool  IsFavorite;          ///< Offset 0x0004 Type _MJVTBL_BOOL
};

///< CMSG_DO_READY_CHECK
struct UserClientDoReadyCheck
{
    uint8 PartyIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_READY_CHECK_RESPONSE
struct UserClientReadyCheckResponse
{
    uint8  PartyIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint64 PartyGUID;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool   IsReady;           ///< Offset 0x0010 Type _MJVTBL_BOOL
};

///< CMSG_SET_ACTION_BUTTON
struct UserClientSetActionButton
{
    uint64 Action;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  Index;         ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_CLEAR_QUEST
struct UserClientClearQuest
{
    std::string Target;             ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      QuestID;            ///< Offset 0x0100 Type _MJVTBL_UINT32
};

///< CMSG_CLEAR_QUEST_LOG
struct UserClientClearQuestLog
{
    std::string Target;             ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      QuestID;            ///< Offset 0x0100 Type _MJVTBL_UINT32
};

///< CMSG_FLAG_QUEST
struct UserClientFlagQuest
{
    std::string Target;             ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      QuestID;            ///< Offset 0x0100 Type _MJVTBL_UINT32
};

///< CMSG_FINISH_QUEST
struct UserClientFinishQuest
{
    uint32      QuestID;            ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string Target;             ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_ADVANCE_QUEST
struct UserClientAdvanceQuest
{
    std::string Target;             ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      QuestID;            ///< Offset 0x0100 Type _MJVTBL_UINT32
};

///< CMSG_TAXI_ENABLE
struct UserClientTaxiEnable
{
    std::string Target;             ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      NodeID;             ///< Offset 0x0100 Type _MJVTBL_UINT32
};

///< CMSG_TAXI_CLEAR
struct UserClientTaxiClear
{
    uint32      NodeID;             ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string Target;             ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_CLEAR_EXPLORE
struct UserClientClearExplore
{
    std::string Target;             ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      AreaID;             ///< Offset 0x0100 Type _MJVTBL_UINT32
};

///< CMSG_PET_BATTLE_INPUT_FIRST_PET
struct UserClientPetBattleInputFirstPet
{
    int8 FrontPet;        ///< Offset 0x0000 Type _MJVTBL_INT8
};

///< CMSG_PET_BATTLE_INPUT
struct UserClientPetBattleInput
{
    struct MsgData_Struct
    {
        uint8 MoveType;                    ///< Offset 0x0000 Type _MJVTBL_UINT8
        int8  NewFrontPet;                 ///< Offset 0x0001 Type _MJVTBL_INT8
        uint8 DebugFlags;                  ///< Offset 0x0002 Type _MJVTBL_UINT8
        uint8 BattleInterrupted;           ///< Offset 0x0003 Type _MJVTBL_UINT8
        bool  IgnoreAbandonPenalty;        ///< Offset 0x0004 Type _MJVTBL_BOOL
        int32 AbilityID;                   ///< Offset 0x0008 Type _MJVTBL_INT32
        int32 Round;                       ///< Offset 0x000C Type _MJVTBL_INT32
    };

    MsgData_Struct MsgData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_PET_BATTLE_REPLACE_FRONT_PET
struct UserClientPetBattleReplaceFrontPet
{
    int8 FrontPet;        ///< Offset 0x0000 Type _MJVTBL_INT8
};

///< CMSG_PET_BEAST_MASTER_CHEAT
struct UserClientPetBeastMasterCheat
{
    int32       Action;             ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string Name;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_CREATE_CHARACTER
struct UserClientCreateCharacter
{
    uint8           FacialHairStyleID;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8           FaceID;                   ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint8           SexID;                    ///< Offset 0x0002 Type _MJVTBL_UINT8
    uint8           HairStyleID;              ///< Offset 0x0003 Type _MJVTBL_UINT8
    uint8           SkinID;                   ///< Offset 0x0004 Type _MJVTBL_UINT8
    uint8           RaceID;                   ///< Offset 0x0005 Type _MJVTBL_UINT8
    uint8           ClassID;                  ///< Offset 0x0006 Type _MJVTBL_UINT8
    uint8           OutfitID;                 ///< Offset 0x0007 Type _MJVTBL_UINT8
    uint8           HairColorID;              ///< Offset 0x0008 Type _MJVTBL_UINT8
    Optional<int32> TemplateSetID;            ///< Offset 0x000C Type MakeMJVTblForOptional<int,&(MJVTBL_INT32)>::MJVTBL
    std::string     Name;                     ///< Offset 0x0014 Type _MJVTBL_STRING
};

///< CMSG_SUPPORT_TICKET_SUBMIT_COMPLAINT
struct UserClientSupportTicketSubmitComplaint
{
    struct ChatLog_Struct
    {
        struct JamCliSupportTicketChatLine
        {
            uint32      Timestamp;          ///< Offset 0x0000 Type _MJVTBL_TIME_T
            std::string Text;               ///< Offset 0x0008 Type _MJVTBL_STRING
        };

        std::vector<JamCliSupportTicketChatLine> Lines;                                           ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamCliSupportTicketChatLine>::MJVTBL
        Optional<uint32>                         ReportLineIndex;                                 ///< Offset 0x0018 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    };

    struct JamCliSupportTicketGuildInfo
    {
        std::string GuildName;          ///< Offset 0x0000 Type _MJVTBL_STRING
        uint64      GuildID;            ///< Offset 0x0068 Type _MJVTBL_UINT64
    };

    struct JamCliSupportTicketMailInfo
    {
        int32       MailID;             ///< Offset 0x0000 Type _MJVTBL_INT32
        std::string MailBody;           ///< Offset 0x0004 Type _MJVTBL_STRING
        std::string MailSubject;        ///< Offset 0x1F45 Type _MJVTBL_STRING
    };

    struct JamCliSupportTicketPetInfo
    {
        uint64      PetID;              ///< Offset 0x0000 Type _MJVTBL_UINT64
        std::string PetName;            ///< Offset 0x0008 Type _MJVTBL_STRING
    };

    struct JamCliSupportTicketCalendarEventInfo
    {
        uint64      EventID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64      InviteID;           ///< Offset 0x0008 Type _MJVTBL_UINT64
        std::string EventTitle;         ///< Offset 0x0010 Type _MJVTBL_STRING
    };

    struct Header_Struct
    {
        int32        MapID;               ///< Offset 0x0000 Type _MJVTBL_INT32
        G3D::Vector3 Position;            ///< Offset 0x0004 Type _MJVTBL_V3
        float        Facing;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
    };

    ChatLog_Struct                                 ChatLog;                                               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    std::string                                    Note;                                                  ///< Offset 0x0020 Type _MJVTBL_STRING
    Optional<JamCliSupportTicketGuildInfo>         GuildInfo;                                             ///< Offset 0x0420 Type MakeMJVTblForOptionalStruct<JamCliSupportTicketGuildInfo>::MJVTBL
    Optional<JamCliSupportTicketMailInfo>          MailInfo;                                              ///< Offset 0x0498 Type MakeMJVTblForOptionalStruct<JamCliSupportTicketMailInfo>::MJVTBL
    uint64                                         TargetCharacterGUID;                                   ///< Offset 0x24E8 Type _MJVTBL_UINT64
    Optional<JamCliSupportTicketPetInfo>           PetInfo;                                               ///< Offset 0x24F0 Type MakeMJVTblForOptionalStruct<JamCliSupportTicketPetInfo>::MJVTBL
    Optional<JamCliSupportTicketCalendarEventInfo> CalendarInfo;                                          ///< Offset 0x2588 Type MakeMJVTblForOptionalStruct<JamCliSupportTicketCalendarEventInfo>::MJVTBL
    JAM_CLI_COMPLAINT_TYPE                         ComplaintType;                                         ///< Offset 0x2628 Type _MJVTBL_JAM_CLI_COMPLAINT_TYPE
    Header_Struct                                  Header;                                                ///< Offset 0x262C Type _MJVTBL_STRUCT
};

///< CMSG_SUPPORT_TICKET_SUBMIT_BUG
struct UserClientSupportTicketSubmitBug
{
    struct Header_Struct
    {
        int32        MapID;               ///< Offset 0x0000 Type _MJVTBL_INT32
        G3D::Vector3 Position;            ///< Offset 0x0004 Type _MJVTBL_V3
        float        Facing;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
    };

    std::string   Note;                 ///< Offset 0x0000 Type _MJVTBL_STRING
    Header_Struct Header;               ///< Offset 0x0400 Type _MJVTBL_STRUCT
};

///< CMSG_SUPPORT_TICKET_SUBMIT_SUGGESTION
struct UserClientSupportTicketSubmitSuggestion
{
    struct Header_Struct
    {
        int32        MapID;               ///< Offset 0x0000 Type _MJVTBL_INT32
        G3D::Vector3 Position;            ///< Offset 0x0004 Type _MJVTBL_V3
        float        Facing;              ///< Offset 0x0010 Type _MJVTBL_FLOAT
    };

    Header_Struct Header;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    std::string   Note;                 ///< Offset 0x0014 Type _MJVTBL_STRING
};

///< CMSG_PARTY_UNINVITE
struct UserClientPartyUninvite
{
    std::string Reason;             ///< Offset 0x0000 Type _MJVTBL_STRING
    uint8       PartyIndex;         ///< Offset 0x0100 Type _MJVTBL_UINT8
    uint64      TargetGuid;         ///< Offset 0x0108 Type _MJVTBL_UINT64
};

///< CMSG_SET_LOOT_METHOD
struct UserClientSetLootMethod
{
    uint64 Master;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  Threshold;         ///< Offset 0x0008 Type _MJVTBL_INT32
    uint8  Method;            ///< Offset 0x000C Type _MJVTBL_UINT8
    uint8  PartyIndex;        ///< Offset 0x000D Type _MJVTBL_UINT8
};

///< CMSG_LEAVE_GROUP
struct UserClientLeaveGroup
{
    uint8 PartyIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_SET_PARTY_LEADER
struct UserClientSetPartyLeader
{
    uint64 Target;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  PartyIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_MINIMAP_PING
struct UserClientMinimapPing
{
    G3D::Vector2 Position;            ///< Offset 0x0000 Type _MJVTBL_V2
    uint8        PartyIndex;          ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_CHANGE_SUB_GROUP
struct UserClientChangeSubGroup
{
    uint64 Target;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  Subgroup;          ///< Offset 0x0008 Type _MJVTBL_UINT8
    uint8  PartyIndex;        ///< Offset 0x0009 Type _MJVTBL_UINT8
};

///< CMSG_SWAP_SUB_GROUPS
struct UserClientSwapSubGroups
{
    uint64 Target1;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Target2;           ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8  PartyIndex;        ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< CMSG_CONVERT_RAID
struct UserClientConvertRaid
{
    bool Raid;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_SET_ASSISTANT_LEADER
struct UserClientSetAssistantLeader
{
    bool   Set;               ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint8  PartyIndex;        ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint64 Target;            ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_UPDATE_RAID_TARGET
struct UserClientUpdateRaidTarget
{
    uint64 Target;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  PartyIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT8
    uint8  Symbol;            ///< Offset 0x0009 Type _MJVTBL_UINT8
};

///< CMSG_SET_PARTY_ASSIGNMENT
struct UserClientSetPartyAssignment
{
    uint8  PartyIndex;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint64 Target;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8  Assignment;        ///< Offset 0x0010 Type _MJVTBL_UINT8
    bool   Set;               ///< Offset 0x0011 Type _MJVTBL_BOOL
};

///< CMSG_SILENCE_PARTY_TALKER
struct UserClientSilencePartyTalker
{
    bool   Silence;           ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 Target;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8  PartyIndex;        ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< CMSG_REQUEST_PARTY_MEMBER_STATS
struct UserClientRequestPartyMemberStats
{
    uint64 Target;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint8  PartyIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_RANDOM_ROLL
struct UserClientRandomRoll
{
    int32 Min;               ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Max;               ///< Offset 0x0004 Type _MJVTBL_INT32
    uint8 PartyIndex;        ///< Offset 0x0008 Type _MJVTBL_UINT8
};

///< CMSG_SET_ACTIVE_VOICE_CHANNEL
struct UserClientSetActiveVoiceChannel
{
    uint8       ChannelType;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    std::string ChannelName;        ///< Offset 0x0001 Type _MJVTBL_STRING
};

///< CMSG_VOICE_ADD_IGNORE
struct UserClientVoiceAddIgnore
{
    std::string OffenderName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_VOICE_DEL_IGNORE
struct UserClientVoiceDelIgnore
{
    struct Player_Struct
    {
        uint64 Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 VirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    };

    Player_Struct Player;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_MAIL_RETURN_TO_SENDER
struct UserClientMailReturnToSender
{
    uint64 SenderGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  MailID;            ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_QUERY_SCENARIO_POI
struct UserClientQueryScenarioPOI
{
    std::vector<int32> MissingScenarioPOITreeIDs;        ///< Offset 0x0000 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< CMSG_TOGGLE_DIFFICULTY
struct UserClientToggleDifficulty
{
};

///< CMSG_GMREQUEST_PLAYER_INFO
struct UserClientGMRequestPlayerInfo
{
    std::string PlayerName;         ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GMSUMMON
struct UserClientGMSummon
{
    std::string PlayerName;         ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GHOST
struct UserClientGhost
{
    bool        Enable;             ///< Offset 0x0000 Type _MJVTBL_BOOL
    std::string PlayerName;         ///< Offset 0x0001 Type _MJVTBL_STRING
};

///< CMSG_ADD_BATTLENET_FRIEND
struct UserClientAddBattlenetFriend
{
    uint32      RoleID;                           ///< Offset 0x0000 Type _MJVTBL_UINT32
    bool        VerifyOnly;                       ///< Offset 0x0004 Type _MJVTBL_BOOL
    uint64      TargetGUID;                       ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64      ClientToken;                      ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint32      TargetVirtualRealmAddress;        ///< Offset 0x0018 Type _MJVTBL_UINT32
    std::string InvitationMsg;                    ///< Offset 0x001C Type _MJVTBL_STRING
};

///< CMSG_MOVE_CHARACTER
struct UserClientMoveCharacter
{
    uint64       CharacterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32        MapID;                ///< Offset 0x0008 Type _MJVTBL_INT32
    G3D::Vector3 Position;             ///< Offset 0x000C Type _MJVTBL_V3
    float        Facing;               ///< Offset 0x0018 Type _MJVTBL_FLOAT
};

///< CMSG_REQUEST_AREA_SHARE_MAPPINGS
struct UserClientRequestAreaShareMappings
{
};

///< CMSG_CLEAR_PAID_SERVICE
struct UserClientClearPaidService
{
    uint64 CharacterGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_SET_PROMOTION_REQUEST
struct UserClientSetPromotionRequest
{
    int32 PromotionID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_WIPE_SERVER_FIRST_ACHIEVEMENTS
struct UserClientWipeServerFirstAchievements
{
};

///< CMSG_GET_SERVER_FIRST_ACHIEVEMENTS
struct UserClientGetServerFirstAchievements
{
};

///< CMSG_QUERY_CORPSE_LOCATION_FROM_CLIENT
struct UserClientQueryCorpseLocationFromClient
{
};

///< CMSG_QUERY_CORPSE_TRANSPORT
struct UserClientQueryCorpseTransport
{
    uint64 Transport;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_CAN_DUEL
struct UserClientCanDuel
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_FORCE_IMMIGRANT_HOST_SEARCH
struct UserClientForceImmigrantHostSearch
{
};

///< CMSG_SET_IMMIGRANT_HOST_SEARCH_LOG
struct UserClientSetImmigrantHostSearchLog
{
    bool Report;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_TELEPORT_TO_UNIT
struct UserClientTeleportToUnit
{
    std::string UnitName;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_RESET_REALM_SELECTOR
struct UserClientResetRealmSelector
{
};

///< CMSG_SET_REALM_SELECTOR
struct UserClientSetRealmSelector
{
    std::string RealmName;          ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_UPDATE_CLIENT_SETTINGS
struct UserClientUpdateClientSettings
{
    struct Settings_Struct
    {
        float FarClip;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
    };

    Settings_Struct Settings;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_SEND_REALM_BROADCAST_MESSAGE
struct UserClientSendRealmBroadcastMessage
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_SEND_WORLD_BROADCAST_MESSAGE
struct UserClientSendWorldBroadcastMessage
{
    std::string Text;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_PET_BATTLE_DEBUG_QUEUE_DUMP
struct UserClientPetBattleDebugQueueDump
{
};

///< CMSG_RESET_INSTANCES
struct UserClientResetInstances
{
};

///< CMSG_LUA_USAGE
struct UserClientLuaUsage
{
};

///< CMSG_GMUPDATE_TICKET_STATUS
struct UserClientGMUpdateTicketStatus
{
    uint64 TargetGUID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  TicketID;          ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  StatusInt;         ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_GMCREATE_TICKET_RESPONSE
struct UserClientGMCreateTicketResponse
{
    uint64      TargetGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Arguments;          ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< CMSG_SUMMON_RESPONSE
struct UserClientSummonResponse
{
    bool   Accept;              ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 SummonerGUID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_GMCHANGE_PVPRATING
struct UserClientGMChangePVPRating
{
    int32 Season;         ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 Bracket;        ///< Offset 0x0004 Type _MJVTBL_INT32
    int32 Rating;         ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_COMPLAINT
struct UserClientComplaint
{
    struct Offender_Struct
    {
        uint64 PlayerGuid;              ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 RealmAddress;            ///< Offset 0x0008 Type _MJVTBL_UINT32
        uint32 TimeSinceOffence;        ///< Offset 0x000C Type _MJVTBL_UINT32
    };

    struct Chat_Struct
    {
        uint32      Command;            ///< Offset 0x0000 Type _MJVTBL_UINT32
        uint32      ChannelID;          ///< Offset 0x0004 Type _MJVTBL_UINT32
        std::string MessageLog;         ///< Offset 0x0008 Type _MJVTBL_STRING
    };

    Offender_Struct Offender;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    uint8           ComplaintType;          ///< Offset 0x0010 Type _MJVTBL_UINT8
    uint64          EventGuid;              ///< Offset 0x0018 Type _MJVTBL_UINT64
    uint64          InviteGuid;             ///< Offset 0x0020 Type _MJVTBL_UINT64
    uint32          MailID;                 ///< Offset 0x0028 Type _MJVTBL_UINT32
    Chat_Struct     Chat;                   ///< Offset 0x002C Type _MJVTBL_STRUCT
};

///< CMSG_GMSHOW_COMPLAINTS
struct UserClientGMShowComplaints
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GMUNSQUELCH
struct UserClientGMUnsquelch
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CALENDAR_GET
struct UserClientCalendarGet
{
};

///< CMSG_CALENDAR_GET_EVENT
struct UserClientCalendarGetEvent
{
    uint64 EventID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_CALENDAR_GUILD_FILTER
struct UserClientCalendarGuildFilter
{
    uint8 MinLevel;            ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8 MaxLevel;            ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint8 MaxRankOrder;        ///< Offset 0x0002 Type _MJVTBL_UINT8
};

///< CMSG_CALENDAR_EVENT_INVITE
struct UserClientCalendarEventInvite
{
    uint64      ModeratorID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool        IsSignUp;           ///< Offset 0x0008 Type _MJVTBL_BOOL
    bool        Creating;           ///< Offset 0x0009 Type _MJVTBL_BOOL
    uint64      EventID;            ///< Offset 0x0010 Type _MJVTBL_UINT64
    std::string Name;               ///< Offset 0x0018 Type _MJVTBL_STRING
};

///< CMSG_CALENDAR_REMOVE_INVITE
struct UserClientCalendarRemoveInvite
{
    uint64 ModeratorID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 Guid;               ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 EventID;            ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint64 InviteID;           ///< Offset 0x0018 Type _MJVTBL_UINT64
};

///< CMSG_CALENDAR_EVENT_RSVP
struct UserClientCalendarEventRSVP
{
    uint64 InviteID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 EventID;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8  Status;          ///< Offset 0x0010 Type _MJVTBL_UINT8
};

///< CMSG_CALENDAR_EVENT_STATUS
struct UserClientCalendarEventStatus
{
    uint64 ModeratorID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 EventID;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 InviteID;           ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint64 Guid;               ///< Offset 0x0018 Type _MJVTBL_UINT64
    uint8  Status;             ///< Offset 0x0020 Type _MJVTBL_UINT8
};

///< CMSG_CALENDAR_EVENT_MODERATOR_STATUS
struct UserClientCalendarEventModeratorStatus
{
    uint64 InviteID;           ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 EventID;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 Guid;               ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint64 ModeratorID;        ///< Offset 0x0018 Type _MJVTBL_UINT64
    uint8  Status;             ///< Offset 0x0020 Type _MJVTBL_UINT8
};

///< CMSG_CALENDAR_REMOVE_EVENT
struct UserClientCalendarRemoveEvent
{
    uint64 ModeratorID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 EventID;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 Flags;              ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< CMSG_CALENDAR_COPY_EVENT
struct UserClientCalendarCopyEvent
{
    uint64 ModeratorID;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 EventID;            ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 Date;               ///< Offset 0x0010 Type _MJVTBL_UINT32
};

///< CMSG_CALENDAR_COMPLAIN
struct UserClientCalendarComplain
{
    uint64 InviteID;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 EventID;              ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64 InvitedByGUID;        ///< Offset 0x0010 Type _MJVTBL_UINT64
};

///< CMSG_CALENDAR_GET_NUM_PENDING
struct UserClientCalendarGetNumPending
{
};

///< CMSG_CALENDAR_EVENT_SIGN_UP
struct UserClientCalendarEventSignUp
{
    bool   Tentative;        ///< Offset 0x0000 Type _MJVTBL_BOOL
    uint64 EventID;          ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_CALENDAR_EVENT_INVITE_NOTES
struct UserClientCalendarEventInviteNotes
{
    uint64      EventID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64      Guid;               ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint64      InviteID;           ///< Offset 0x0010 Type _MJVTBL_UINT64
    uint64      ModeratorID;        ///< Offset 0x0018 Type _MJVTBL_UINT64
    std::string Notes;              ///< Offset 0x0020 Type _MJVTBL_STRING
};

///< CMSG_CALENDAR_ADD_EVENT
struct UserClientCalendarAddEvent
{
    struct EventInfo_Struct
    {
        struct JamClientCalendarAddEventInviteInfo
        {
            uint64 Guid;             ///< Offset 0x0000 Type _MJVTBL_UINT64
            uint8  Status;           ///< Offset 0x0008 Type _MJVTBL_UINT8
            uint8  Moderator;        ///< Offset 0x0009 Type _MJVTBL_UINT8
        };

        std::string                                      Title;                                                   ///< Offset 0x0000 Type _MJVTBL_STRING
        std::string                                      Description;                                             ///< Offset 0x0081 Type _MJVTBL_STRING
        uint8                                            EventType;                                               ///< Offset 0x0482 Type _MJVTBL_UINT8
        int32                                            TextureID;                                               ///< Offset 0x0484 Type _MJVTBL_INT32
        uint32                                           Time;                                                    ///< Offset 0x0488 Type _MJVTBL_UINT32
        uint32                                           Flags;                                                   ///< Offset 0x048C Type _MJVTBL_UINT32
        std::vector<JamClientCalendarAddEventInviteInfo> Invites;                                                 ///< Offset 0x0490 Type MakeMJVTblForArrayOfStruct<JamClientCalendarAddEventInviteInfo>::MJVTBL
    };

    uint32           MaxSize;                 ///< Offset 0x0000 Type _MJVTBL_UINT32
    EventInfo_Struct EventInfo;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< CMSG_CALENDAR_UPDATE_EVENT
struct UserClientCalendarUpdateEvent
{
    struct EventInfo_Struct
    {
        uint64      EventID;            ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint64      ModeratorID;        ///< Offset 0x0008 Type _MJVTBL_UINT64
        std::string Title;              ///< Offset 0x0010 Type _MJVTBL_STRING
        std::string Description;        ///< Offset 0x0091 Type _MJVTBL_STRING
        uint8       EventType;          ///< Offset 0x0492 Type _MJVTBL_UINT8
        int32       TextureID;          ///< Offset 0x0494 Type _MJVTBL_INT32
        uint32      Time;               ///< Offset 0x0498 Type _MJVTBL_UINT32
        uint32      Flags;              ///< Offset 0x049C Type _MJVTBL_UINT32
    };

    uint32           MaxSize;                 ///< Offset 0x0000 Type _MJVTBL_UINT32
    EventInfo_Struct EventInfo;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< CMSG_KEEP_ALIVE
struct UserClientKeepAlive
{
};

///< CMSG_WHO_IS
struct UserClientWhoIs
{
    std::string CharName;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_WHO
struct UserClientWho
{
    struct Request_Struct
    {
        struct JamWhoWord
        {
            std::string Word;               ///< Offset 0x0000 Type _MJVTBL_STRING
        };

        struct JamWhoRequestServerInfo
        {
            int32  FactionGroup;                        ///< Offset 0x0000 Type _MJVTBL_INT32
            int32  Locale;                              ///< Offset 0x0004 Type _MJVTBL_INT32
            uint32 RequesterVirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
        };

        int32                             MinLevel;                                 ///< Offset 0x0000 Type _MJVTBL_INT32
        int32                             MaxLevel;                                 ///< Offset 0x0004 Type _MJVTBL_INT32
        std::string                       Name;                                     ///< Offset 0x0008 Type _MJVTBL_STRING
        std::string                       VirtualRealmName;                         ///< Offset 0x0039 Type _MJVTBL_STRING
        std::string                       Guild;                                    ///< Offset 0x013A Type _MJVTBL_STRING
        std::string                       GuildVirtualRealmName;                    ///< Offset 0x019B Type _MJVTBL_STRING
        int32                             RaceFilter;                               ///< Offset 0x029C Type _MJVTBL_INT32
        int32                             ClassFilter;                              ///< Offset 0x02A0 Type _MJVTBL_INT32
        std::vector<JamWhoWord>           Words;                                    ///< Offset 0x02A8 Type MakeMJVTblForArrayOfStruct<JamWhoWord>::MJVTBL
        bool                              ShowEnemies;                              ///< Offset 0x02C0 Type _MJVTBL_BOOL
        bool                              ShowArenaPlayers;                         ///< Offset 0x02C1 Type _MJVTBL_BOOL
        bool                              ExactName;                                ///< Offset 0x02C2 Type _MJVTBL_BOOL
        Optional<JamWhoRequestServerInfo> ServerInfo;                               ///< Offset 0x02C4 Type MakeMJVTblForOptionalStruct<JamWhoRequestServerInfo>::MJVTBL
    };

    Request_Struct     Request;                   ///< Offset 0x0000 Type _MJVTBL_STRUCT
    std::vector<int32> Areas;                     ///< Offset 0x02D8 Type MakeMJVTblForArrayOf<int,&(MJVTBL_INT32)>::MJVTBL
};

///< CMSG_SET_DUNGEON_DIFFICULTY
struct UserClientSetDungeonDifficulty
{
    uint32 DifficultyID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_GMSURVEY_SUBMIT
struct UserClientGMSurveySubmit
{
    struct JamClientGMSurveyQuestion
    {
        int32       QuestionID;           ///< Offset 0x0000 Type _MJVTBL_INT32
        uint8       Answer;               ///< Offset 0x0004 Type _MJVTBL_UINT8
        std::string AnswerComment;        ///< Offset 0x0005 Type _MJVTBL_STRING
    };

    std::vector<JamClientGMSurveyQuestion> SurveyQuestion;                                ///< Offset 0x0000 Type MakeMJVTblForArrayOfStruct<JamClientGMSurveyQuestion>::MJVTBL
    int32                                  SurveyID;                                      ///< Offset 0x0018 Type _MJVTBL_INT32
    std::string                            Comment;                                       ///< Offset 0x001C Type _MJVTBL_STRING
};

///< CMSG_VOICE_SESSION_ENABLE
struct UserClientVoiceSessionEnable
{
    bool EnableVoiceChat;         ///< Offset 0x0000 Type _MJVTBL_BOOL
    bool EnableMicrophone;        ///< Offset 0x0001 Type _MJVTBL_BOOL
};

///< CMSG_RESURRECT_RESPONSE
struct UserClientResurrectResponse
{
    uint64 Resurrecter;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 Response;           ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_PET_RENAME
struct UserClientPetRename
{
    struct RenameData_Struct
    {
        int32        PetNumber;               ///< Offset 0x0000 Type _MJVTBL_INT32
        std::string  NewName;                 ///< Offset 0x0004 Type _MJVTBL_STRING
        bool         HasDeclinedNames;        ///< Offset 0x0085 Type _MJVTBL_BOOL
        std::string  DeclinedNames[5];        ///< Offset 0x0086 Type MakeMJVTblForFixedArrayOfStrings<5,97>::MJVTBL
    };

    RenameData_Struct RenameData;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_BUG_REPORT
struct UserClientBugReport
{
    REPORT_TYPE Type;               ///< Offset 0x0000 Type _MJVTBL_REPORT_TYPE
    std::string Text;               ///< Offset 0x0004 Type _MJVTBL_STRING
    std::string DiagInfo;           ///< Offset 0x03EC Type _MJVTBL_STRING
};

///< CMSG_REFER_AFRIEND_CHEAT
struct UserClientReferAFriendCheat
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_SET_SAVED_INSTANCE_EXTEND
struct UserClientSetSavedInstanceExtend
{
    int32  MapID;               ///< Offset 0x0000 Type _MJVTBL_INT32
    bool   Extend;              ///< Offset 0x0004 Type _MJVTBL_BOOL
    uint32 DifficultyID;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_EXPIRE_RAID_INSTANCE
struct UserClientExpireRaidInstance
{
};

///< CMSG_SET_PLAYER_DECLINED_NAMES
struct UserClientSetPlayerDeclinedNames
{
    uint64       Player;                 ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string  DeclinedName[5];        ///< Offset 0x0008 Type MakeMJVTblForFixedArrayOfStrings<5,65>::MJVTBL
};

///< CMSG_QUERY_PLAYER_NAME
struct UserClientQueryPlayerName
{
    struct Hint_Struct
    {
        Optional<uint32> VirtualRealmAddress;        ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
        Optional<uint32> NativeRealmAddress;         ///< Offset 0x0008 Type MakeMJVTblForOptional<unsignedint,&(MJVTBL_UINT32)>::MJVTBL
    };

    uint64      Player;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    Hint_Struct Hint;               ///< Offset 0x0008 Type _MJVTBL_STRUCT
};

///< CMSG_QUERY_REALM_NAME
struct UserClientQueryRealmName
{
    uint32 VirtualRealmAddress;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_QUERY_GUILD_INFO
struct UserClientQueryGuildInfo
{
    uint64 PlayerGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 GuildGuid;         ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_CHAR_CUSTOMIZE
struct UserClientCharCustomize
{
    uint8       HairStyleID;              ///< Offset 0x0000 Type _MJVTBL_UINT8
    uint8       FaceID;                   ///< Offset 0x0001 Type _MJVTBL_UINT8
    uint64      CharGUID;                 ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8       SexID;                    ///< Offset 0x0010 Type _MJVTBL_UINT8
    std::string CharName;                 ///< Offset 0x0011 Type _MJVTBL_STRING
    uint8       HairColorID;              ///< Offset 0x0042 Type _MJVTBL_UINT8
    uint8       FacialHairStyleID;        ///< Offset 0x0043 Type _MJVTBL_UINT8
    uint8       SkinID;                   ///< Offset 0x0044 Type _MJVTBL_UINT8
};

///< CMSG_SERVER_INFO_QUERY
struct UserClientServerInfoQuery
{
    std::string Category;           ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GMTICKET_CREATE
struct UserClientGMTicketCreate
{
    G3D::Vector3 Pos;                    ///< Offset 0x0000 Type _MJVTBL_V3
    int32        MapID;                  ///< Offset 0x000C Type _MJVTBL_INT32
    uint8        Flags;                  ///< Offset 0x0010 Type _MJVTBL_UINT8
    bool         NeedMoreHelp;           ///< Offset 0x0011 Type _MJVTBL_BOOL
    bool         NeedResponse;           ///< Offset 0x0012 Type _MJVTBL_BOOL
    std::string  Description;            ///< Offset 0x0013 Type _MJVTBL_STRING
    uint8 *      ChatHistoryData;        ///< Offset 0x07E8 Type _MJVTBL_NOT_IMPLEMENTED
};

///< CMSG_GMTICKET_UPDATE_TEXT
struct UserClientGMTicketUpdateText
{
    std::string Description;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GMTICKET_GET_TICKET
struct UserClientGMTicketGetTicket
{
};

///< CMSG_GMTICKET_DELETE_TICKET
struct UserClientGMTicketDeleteTicket
{
};

///< CMSG_GMTICKET_RESPONSE_RESOLVE
struct UserClientGMTicketResponseResolve
{
};

///< CMSG_GMTICKET_GET_SYSTEM_STATUS
struct UserClientGMTicketGetSystemStatus
{
};

///< CMSG_GMTICKET_GET_CASE_STATUS
struct UserClientGMTicketGetCaseStatus
{
};

///< CMSG_GMTICKET_ACKNOWLEDGE_SURVEY
struct UserClientGMTicketAcknowledgeSurvey
{
    int32 CaseID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GMLAG_REPORT
struct UserClientGMLagReport
{
    int32        MapID;               ///< Offset 0x0000 Type _MJVTBL_INT32
    int32        LagKind;             ///< Offset 0x0004 Type _MJVTBL_INT32
    G3D::Vector3 Loc;                 ///< Offset 0x0008 Type _MJVTBL_V3
};

///< CMSG_GMDESTROY_CORPSE
struct UserClientGMDestroyCorpse
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHAR_RACE_OR_FACTION_CHANGE
struct UserClientCharRaceOrFactionChange
{
    Optional<uint8> HairColorID;              ///< Offset 0x0000 Type MakeMJVTblForOptional<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
    uint8           RaceID;                   ///< Offset 0x0002 Type _MJVTBL_UINT8
    uint8           SexID;                    ///< Offset 0x0003 Type _MJVTBL_UINT8
    Optional<uint8> SkinID;                   ///< Offset 0x0004 Type MakeMJVTblForOptional<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
    Optional<uint8> FacialHairStyleID;        ///< Offset 0x0006 Type MakeMJVTblForOptional<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
    uint64          Guid;                     ///< Offset 0x0008 Type _MJVTBL_UINT64
    bool            FactionChange;            ///< Offset 0x0010 Type _MJVTBL_BOOL
    std::string     Name;                     ///< Offset 0x0011 Type _MJVTBL_STRING
    Optional<uint8> FaceID;                   ///< Offset 0x0042 Type MakeMJVTblForOptional<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
    Optional<uint8> HairStyleID;              ///< Offset 0x0044 Type MakeMJVTblForOptional<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
};

///< CMSG_REQUEST_ACCOUNT_DATA
struct UserClientRequestAccountData
{
    uint8 DataType;        ///< Offset 0x0000 Type _MJVTBL_UINT8
};

///< CMSG_UPDATE_ACCOUNT_DATA
struct UserClientUpdateAccountData
{
    uint32  Time;                  ///< Offset 0x0000 Type _MJVTBL_TIME_T
    uint32  Size;                  ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8   DataType;              ///< Offset 0x000C Type _MJVTBL_UINT8
    uint8 * CompressedData;        ///< Offset 0x0010 Type _MJVTBL_NOT_IMPLEMENTED
};

///< CMSG_SET_PVPWEEKLY_GAMES
struct UserClientSetPVPWeeklyGames
{
    uint32 NumPlayed;        ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32  Season;           ///< Offset 0x0004 Type _MJVTBL_INT32
    uint32 NumWon;           ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8  Bracket;          ///< Offset 0x000C Type _MJVTBL_UINT8
};

///< CMSG_SET_PVPSEASON_GAMES
struct UserClientSetPVPSeasonGames
{
    uint32 NumWon;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    int32  Season;           ///< Offset 0x0004 Type _MJVTBL_INT32
    uint32 NumPlayed;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint8  Bracket;          ///< Offset 0x000C Type _MJVTBL_UINT8
};

///< CMSG_READY_FOR_ACCOUNT_DATA_TIMES
struct UserClientReadyForAccountDataTimes
{
};

///< CMSG_GMNUKE_CHARACTER
struct UserClientGMNukeCharacter
{
    uint64 Target;        ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_UITIME_REQUEST
struct UserClientUITimeRequest
{
};

///< CMSG_CHAR_DELETE
struct UserClientCharDelete
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_CHAR_FORCE_DELETE
struct UserClientCharForceDelete
{
    uint64 Guid;          ///< Offset 0x0000 Type _MJVTBL_UINT64
};

///< CMSG_GMACCOUNT_ONLINE
struct UserClientGMAccountOnline
{
    uint32 AccountID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_GMGUILD_SAVE
struct UserClientGMGuildSave
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_LOW_LEVEL_RAID
struct UserClientLowLevelRaid
{
    bool Enable;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_GM_RESET_INSTANCE_LIMIT
struct UserClientGmResetInstanceLimit
{
};

///< CMSG_INSPECT_PVP
struct UserClientInspectPVP
{
    uint64 InspectTarget;              ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 InspectRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
};

///< CMSG_UNCLAIM_LICENSE
struct UserClientUnclaimLicense
{
    int32 License;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_GM_SILENCE
struct UserClientGmSilence
{
    int32       Action;             ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string Name;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_GM_REVEAL_TO
struct UserClientGmRevealTo
{
    uint32      Type;               ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string Name;               ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_GM_RESURRECT
struct UserClientGmResurrect
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_CHEAT_PLAYER_LOOKUP
struct UserClientCheatPlayerLookup
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GM_FREEZE
struct UserClientGmFreeze
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GM_CHARACTER_RESTORE
struct UserClientGmCharacterRestore
{
    std::vector<uint8> Data;                      ///< Offset 0x0000 Type MakeMJVTblForArrayOf<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
    uint32             Locale;                    ///< Offset 0x0018 Type _MJVTBL_UINT32
    uint32             ClientToken;               ///< Offset 0x001C Type _MJVTBL_UINT32
    uint32             ToAccount;                 ///< Offset 0x0020 Type _MJVTBL_UINT32
    bool               Compressed;                ///< Offset 0x0024 Type _MJVTBL_BOOL
};

///< CMSG_GM_CHARACTER_SAVE
struct UserClientGmCharacterSave
{
    std::string CharacterName;        ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      Flags;                ///< Offset 0x0034 Type _MJVTBL_UINT32
};

///< CMSG_GMGEAR_RATING
struct UserClientGMGearRating
{
};

///< CMSG_GMNUKE_ACCOUNT
struct UserClientGMNukeAccount
{
    uint32 AccountID;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_BEASTMASTER
struct UserClientBeastmaster
{
    int32       Op;                 ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string TargetName;         ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_PROFILE_DATA_REQUEST
struct UserClientProfileDataRequest
{
    bool Run;         ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_OFFER_PETITION
struct UserClientOfferPetition
{
    uint64 TargetPlayer;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 ItemGUID;            ///< Offset 0x0008 Type _MJVTBL_UINT64
};

///< CMSG_QUEST_POIQUERY
struct UserClientQuestPOIQuery
{
    int32 MissingQuestCount;           ///< Offset 0x0000 Type _MJVTBL_INT32
    int32 MissingQuestPOIs[50];        ///< Offset 0x0004 Type MakeMJVTblForFixedArrayOf<int,50,&(MJVTBL_INT32)>::MJVTBL
};

///< CMSG_GMINVIS
struct UserClientGMInvis
{
    int32       Action;             ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string PlayerName;         ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_GMBIND_OTHER
struct UserClientGMBindOther
{
    std::string PlayerName;         ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_GMSHOW_LABEL
struct UserClientGMShowLabel
{
    int32       Op;                 ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string TargetName;         ///< Offset 0x0004 Type _MJVTBL_STRING
};

///< CMSG_GM_SET_SECURITY_GROUP
struct UserClientGmSetSecurityGroup
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32      Group;              ///< Offset 0x0034 Type _MJVTBL_UINT32
};

///< CMSG_GM_NUKE
struct UserClientGmNuke
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_DANCE_STUDIO_ADD_MOVE
struct UserClientDanceStudioAddMove
{
    uint64      ImageBase;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string PseudoFilename;        ///< Offset 0x0008 Type _MJVTBL_STRING
    uint64      Caller;                ///< Offset 0x0048 Type _MJVTBL_UINT64
    std::string Code;                  ///< Offset 0x0050 Type _MJVTBL_STRING
};

///< CMSG_GET_ACCOUNT_CHARACTER_LIST
struct UserClientGetAccountCharacterList
{
    uint32 Token;         ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_LIVE_REGION_GET_ACCOUNT_CHARACTER_LIST
struct UserClientLiveRegionGetAccountCharacterList
{
    std::string     DevRealmOverride;        ///< Offset 0x0000 Type _MJVTBL_STRING
    uint32          Token;                   ///< Offset 0x0104 Type _MJVTBL_UINT32
    std::string     DevCharOverride;         ///< Offset 0x0108 Type _MJVTBL_STRING
    Optional<uint8> RegionID;                ///< Offset 0x0139 Type MakeMJVTblForOptional<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
};

///< CMSG_LIVE_REGION_CHARACTER_COPY
struct UserClientLiveRegionCharacterCopy
{
    uint64 Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 VirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 Token;                      ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< CMSG_LIVE_REGION_ACCOUNT_RESTORE
struct UserClientLiveRegionAccountRestore
{
    uint32          Token;                   ///< Offset 0x0000 Type _MJVTBL_UINT32
    std::string     DevRealmOverride;        ///< Offset 0x0004 Type _MJVTBL_STRING
    Optional<uint8> RegionID;                ///< Offset 0x0105 Type MakeMJVTblForOptional<unsignedchar,&(MJVTBL_UINT8)>::MJVTBL
    std::string     DevCharOverride;         ///< Offset 0x0107 Type _MJVTBL_STRING
};

///< CMSG_BATTLE_PAY_GET_PRODUCT_LIST
struct UserClientBattlePayGetProductList
{
};

///< CMSG_BATTLE_PAY_GET_PURCHASE_LIST
struct UserClientBattlePayGetPurchaseList
{
};

///< CMSG_SERVER_COMMAND
struct UserClientServerCommand
{
    std::string Line;               ///< Offset 0x0000 Type _MJVTBL_STRING
    uint64      Target;             ///< Offset 0x0100 Type _MJVTBL_UINT64
};

///< CMSG_CHARACTER_RENAME_REQUEST
struct UserClientCharacterRenameRequest
{
    std::string NewName;            ///< Offset 0x0000 Type _MJVTBL_STRING
    uint64      Guid;               ///< Offset 0x0038 Type _MJVTBL_UINT64
};

///< CMSG_SHOW_TRADE_SKILL
struct UserClientShowTradeSkill
{
    uint64 PlayerGUID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  SkillLineID;        ///< Offset 0x0008 Type _MJVTBL_INT32
    int32  SpellID;            ///< Offset 0x000C Type _MJVTBL_INT32
};

///< CMSG_BATTLE_PAY_DISTRIBUTION_ASSIGN_TO_TARGET
struct UserClientBattlePayDistributionAssignToTarget
{
    uint64 TargetCharacter;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 DistributionID;         ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 ProductChoice;          ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint32 ClientToken;            ///< Offset 0x0014 Type _MJVTBL_UINT32
};

///< CMSG_BATTLE_PAY_DISTRIBUTION_SELECT_CHOICE
struct UserClientBattlePayDistributionSelectChoice
{
    uint64 DistributionID;         ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 TargetCharacter;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint32 ProductChoice;          ///< Offset 0x0010 Type _MJVTBL_UINT32
    uint32 ClientToken;            ///< Offset 0x0014 Type _MJVTBL_UINT32
};

///< CMSG_GUILD_SET_GUILD_MASTER
struct UserClientGuildSetGuildMaster
{
    std::string NewMasterName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_PETITION_RENAME_GUILD
struct UserClientPetitionRenameGuild
{
    uint64      PetitionGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string NewGuildName;        ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< CMSG_REQUEST_RAID_INFO
struct UserClientRequestRaidInfo
{
};

///< CMSG_BATTLE_PAY_START_PURCHASE
struct UserClientBattlePayStartPurchase
{
    uint64 TargetCharacter;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint32 ProductID;              ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint32 ClientToken;            ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< CMSG_BATTLE_PAY_CONFIRM_PURCHASE_RESPONSE
struct UserClientBattlePayConfirmPurchaseResponse
{
    uint64 ClientCurrentPriceFixedPoint;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    bool   ConfirmPurchase;                     ///< Offset 0x0008 Type _MJVTBL_BOOL
    uint32 ServerToken;                         ///< Offset 0x000C Type _MJVTBL_UINT32
};

///< CMSG_BATTLE_PAY_ACK_FAILED_RESPONSE
struct UserClientBattlePayAckFailedResponse
{
    uint32 ServerToken;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_CHECK_RAFEMAIL_ENABLED
struct UserClientCheckRAFEmailEnabled
{
};

///< CMSG_RECRUIT_AFRIEND
struct UserClientRecruitAFriend
{
    std::string Email;              ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Text;               ///< Offset 0x0101 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x04FE Type _MJVTBL_STRING
};

///< CMSG_ADD_ACCOUNT_LICENSE
struct UserClientAddAccountLicense
{
    int64 BpayLicenseGroupID;        ///< Offset 0x0000 Type _MJVTBL_INT64
};

///< CMSG_SWITCH_CHARACTER
struct UserClientSwitchCharacter
{
    std::string CharacterName;        ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_SEND_CONTACT_LIST
struct UserClientSendContactList
{
    uint32 Flags;         ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_ADD_FRIEND
struct UserClientAddFriend
{
    std::string Notes;              ///< Offset 0x0000 Type _MJVTBL_STRING
    std::string Name;               ///< Offset 0x0201 Type _MJVTBL_STRING
};

///< CMSG_DEL_FRIEND
struct UserClientDelFriend
{
    struct Player_Struct
    {
        uint64 Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 VirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    };

    Player_Struct Player;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_SET_CONTACT_NOTES
struct UserClientSetContactNotes
{
    struct Player_Struct
    {
        uint64 Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 VirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    };

    Player_Struct Player;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    std::string   Notes;                ///< Offset 0x0010 Type _MJVTBL_STRING
};

///< CMSG_BATTLENET_CHALLENGE_RESPONSE
struct UserClientBattlenetChallengeResponse
{
    BATTLENET_CHALLENGE_RESULT Result;                            ///< Offset 0x0000 Type _MJVTBL_BATTLENET_CHALLENGE_RESULT
    uint32                     Token;                             ///< Offset 0x0004 Type _MJVTBL_UINT32
    std::string                BattlenetError;                    ///< Offset 0x0008 Type _MJVTBL_STRING
};

///< CMSG_ADD_IGNORE
struct UserClientAddIgnore
{
    std::string Name;               ///< Offset 0x0000 Type _MJVTBL_STRING
};

///< CMSG_DEL_IGNORE
struct UserClientDelIgnore
{
    struct Player_Struct
    {
        uint64 Guid;                       ///< Offset 0x0000 Type _MJVTBL_UINT64
        uint32 VirtualRealmAddress;        ///< Offset 0x0008 Type _MJVTBL_UINT32
    };

    Player_Struct Player;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
};

///< CMSG_GMSET_VETERAN_TRIAL
struct UserClientGMSetVeteranTrial
{
    bool VeteranTrial;        ///< Offset 0x0000 Type _MJVTBL_BOOL
};

///< CMSG_NUKE_EXPANSION_REWARD
struct UserClientNukeExpansionReward
{
};

///< CMSG_GMGRANT_ACHIEVEMENT
struct UserClientGMGrantAchievement
{
    int32       AchievementID;        ///< Offset 0x0000 Type _MJVTBL_INT32
    uint64      Guid;                 ///< Offset 0x0008 Type _MJVTBL_UINT64
    std::string Target;               ///< Offset 0x0010 Type _MJVTBL_STRING
};

///< CMSG_GMREMOVE_ACHIEVEMENT
struct UserClientGMRemoveAchievement
{
    uint64      Guid;                 ///< Offset 0x0000 Type _MJVTBL_UINT64
    std::string Target;               ///< Offset 0x0008 Type _MJVTBL_STRING
    int32       AchievementID;        ///< Offset 0x013C Type _MJVTBL_INT32
};

///< CMSG_GMSET_CRITERIA
struct UserClientGMSetCriteria
{
    int32       CriteriaID;         ///< Offset 0x0000 Type _MJVTBL_INT32
    std::string Target;             ///< Offset 0x0004 Type _MJVTBL_STRING
    int32       Quantity;           ///< Offset 0x0138 Type _MJVTBL_INT32
    uint64      Guid;               ///< Offset 0x0140 Type _MJVTBL_UINT64
};

///< CMSG_GMCREATE_ITEM_TARGET
struct UserClientGMCreateItemTarget
{
    struct CreationContext_Struct
    {
        uint8 Context;        ///< Offset 0x0000 Type _MJVTBL_UINT8
    };

    CreationContext_Struct CreationContext;               ///< Offset 0x0000 Type _MJVTBL_STRUCT
    int32                  ItemID;                        ///< Offset 0x0004 Type _MJVTBL_INT32
    std::string            Target;                        ///< Offset 0x0008 Type _MJVTBL_STRING
    uint64                 Guid;                          ///< Offset 0x0140 Type _MJVTBL_UINT64
};

///< CMSG_PAID_SERVICE_CHEAT
struct UserClientPaidServiceCheat
{
    uint64 Guid;             ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  ServiceID;        ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_SET_RAID_DIFFICULTY
struct UserClientSetRaidDifficulty
{
    int32 DifficultyID;        ///< Offset 0x0000 Type _MJVTBL_INT32
};

///< CMSG_TUTORIAL
struct UserClientTutorial
{
    TUTORIAL_ACTION Action;                 ///< Offset 0x0000 Type _MJVTBL_TUTORIAL_ACTION
    uint32          TutorialBit;            ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_ENUM_CHARACTERS_DELETED_BY_CLIENT
struct UserClientEnumCharactersDeletedByClient
{
};

///< CMSG_UNDELETE_CHARACTER
struct UserClientUndeleteCharacter
{
    uint64 CharacterGuid;        ///< Offset 0x0000 Type _MJVTBL_UINT64
    int32  ClientToken;          ///< Offset 0x0008 Type _MJVTBL_INT32
};

///< CMSG_GET_UNDELETE_CHARACTER_COOLDOWN_STATUS
struct UserClientGetUndeleteCharacterCooldownStatus
{
};

///< CMSG_CHEAT_RESET_UNDELETE_COOLDOWN
struct UserClientCheatResetUndeleteCooldown
{
};

///< CMSG_GET_LUCK_FACTOR
struct UserClientGetLuckFactor
{
};

///< CMSG_SET_LUCK_FACTOR
struct UserClientSetLuckFactor
{
    float LuckFactor;        ///< Offset 0x0000 Type _MJVTBL_FLOAT
};

///< CMSG_SUSPEND_COMMS_ACK
struct UserRouterClientSuspendCommsAck
{
    uint32 Serial;           ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 Timestamp;        ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_AUTH_SESSION
struct UserRouterClientAuthSession
{
    uint32      SiteID;                 ///< Offset 0x0000 Type _MJVTBL_UINT32
    int8        LoginServerType;        ///< Offset 0x0004 Type _MJVTBL_INT8
    int8        BuildType;              ///< Offset 0x0005 Type _MJVTBL_INT8
    uint32      RealmID;                ///< Offset 0x0008 Type _MJVTBL_UINT32
    uint16      Build;                  ///< Offset 0x000C Type _MJVTBL_UINT16
    uint32      LocalChallenge;         ///< Offset 0x0010 Type _MJVTBL_UINT32
    int32       LoginServerID;          ///< Offset 0x0014 Type _MJVTBL_INT32
    uint32      RegionID;               ///< Offset 0x0018 Type _MJVTBL_UINT32
    uint64      DosResponse;            ///< Offset 0x0020 Type _MJVTBL_UINT64
    uint8       Digest[20];             ///< Offset 0x0028 Type MakeMJVTblForFixedArrayOf<unsignedchar,20,&(MJVTBL_UINT8)>::MJVTBL
    std::string Account;                ///< Offset 0x003C Type _MJVTBL_STRING
    bool        UseIPv6;                ///< Offset 0x053D Type _MJVTBL_BOOL
    uint8 *     AddonInfo;              ///< Offset 0x0540 Type _MJVTBL_NOT_IMPLEMENTED
};

///< CMSG_AUTH_CONTINUED_SESSION
struct UserRouterClientAuthContinuedSession
{
    uint64 Key;                ///< Offset 0x0000 Type _MJVTBL_UINT64
    uint64 DosResponse;        ///< Offset 0x0008 Type _MJVTBL_UINT64
    uint8  Digest[20];         ///< Offset 0x0010 Type MakeMJVTblForFixedArrayOf<unsignedchar,20,&(MJVTBL_UINT8)>::MJVTBL
};

///< CMSG_PING
struct UserRouterClientPing
{
    uint32 Serial;         ///< Offset 0x0000 Type _MJVTBL_UINT32
    uint32 Latency;        ///< Offset 0x0004 Type _MJVTBL_UINT32
};

///< CMSG_LOG_DISCONNECT
struct UserRouterClientLogDisconnect
{
    uint32 Reason;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_SUSPEND_TOKEN_RESPONSE
struct UserRouterClientSuspendTokenResponse
{
    uint32 Sequence;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_ENABLE_NAGLE
struct UserRouterClientEnableNagle
{
};

///< CMSG_QUEUED_MESSAGES_END
struct UserRouterClientQueuedMessagesEnd
{
    uint32 Timestamp;        ///< Offset 0x0000 Type _MJVTBL_UINT32
};

///< CMSG_LOG_STREAMING_ERROR
struct UserRouterClientLogStreamingError
{
    std::string Error;              ///< Offset 0x0000 Type _MJVTBL_STRING
};


